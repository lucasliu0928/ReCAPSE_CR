scale_linetype_manual("variable",values=c(0,1)) +
scale_color_manual("variable",
values = c("Acutal" = "darkblue",
"Predicted" = "darkred"))+
scale_shape_manual("variable",values=c(16,NA)) +
ylim(c(0,1)) +
xlab("Year") +
ylab("Predicted Probability")+
theme_bw() +  theme(legend.position="top", legend.title = element_blank()) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=14))
p
View(reshaped_plot_data)
p <- ggplot(reshaped_plot_data, aes(x= month_start, y= value,color = variable, linetype = variable,shape = variable)) +
geom_point(size=5) +
geom_line(size=1)
p
p <- ggplot(reshaped_plot_data, aes(x= month_start, y= value,color = variable, linetype = variable,shape = variable)) +
geom_point(size=5) +
geom_line(size=1)+
scale_linetype_manual("variable",values=c(1,1)) +
scale_color_manual("variable",
values = c("Acutal" = "darkblue",
"Predicted" = "darkred"))+
scale_shape_manual("variable",values=c(16,NA)) +
ylim(c(0,1)) +
xlab("Year") +
ylab("Predicted Probability")+
theme_bw() +  theme(legend.position="top", legend.title = element_blank()) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=14))
p
p <- ggplot(reshaped_plot_data, aes(x= month_start, y= value,color = variable, linetype = variable,shape = variable)) +
geom_point(size=5) +
geom_line(size=1)+
scale_linetype_manual("variable",values=c(0,1)) +
scale_color_manual("variable",
values = c("Acutal" = "darkblue",
"Predicted" = "darkred"))+
scale_shape_manual("variable",values=c(16,NA)) +
ylim(c(0,1)) +
xlab("Year") +
ylab("Predicted Probability")+
theme_bw() +  theme(legend.position="top", legend.title = element_blank()) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=14))
p
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16C_PlotPredictions.R', echo=TRUE)
curr_id <- 26319
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
p <- plot_individual_prediction(curr_df)
png(paste0(outdir,"SBCE",curr_label,"_ID",curr_id,".png"))
print(p)
dev.off()
curr_id <- 26319
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
p <- plot_individual_prediction(curr_df)
png(paste0(outdir,"SBCE",curr_label,"_ID",curr_id,".png"))
print(p)
dev.off()
curr_id
curr_id <- 36215
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
p <- plot_individual_prediction(curr_df)
png(paste0(outdir,"SBCE",curr_label,"_ID",curr_id,".png"))
print(p)
dev.off()
curr_id <- 36215
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
p <- plot_individual_prediction(curr_df)
png(paste0(outdir,"SBCE",curr_label,"_ID",curr_id,".png"))
print(p)
dev.off()
curr_label
which(SBCE_label_df[,"study_id"] == 36215)
curr_id <- 19245
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
curr_label
curr_id <- 38881
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
p <- plot_individual_prediction(curr_df)
curr_label
13542 +1049 + 3362 + 285
18238*0.8
13542+1049
#data dir
data_dir1        <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
outdir           <- paste0(proj_dir, "17_Discrip_Statistics/")
################################################################################
#1. Load Final ID char
################################################################################
pt_char_df <- read.xlsx(paste0(project_dir,"/8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
################################################################################
#1. Load Final ID char
################################################################################
pt_char_df <- read.xlsx(paste0(data_dir1,"/8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
#data dir
data_dir1        <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
################################################################################
#1. Load pts level char for fianl IDs
################################################################################
pt_char_df <- read.xlsx(paste0(data_dir1,"/9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
Final_IDs <- FinalID_df$study_id
final_Ids <- pt_char_df$study_id
final_Ids
################################################################################
#3. Report some stats
################################################################################
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
################################################################################
#1. Load pts level char for final IDs
################################################################################
pts_level_char_df <- read.xlsx(paste0(data_dir1,"/9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
final_Ids <- pts_level_char_df$study_id
################################################################################
#3. Report some stats
################################################################################
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
n_sbce0   <- length(sbce_pt_Ids)
n_sbce1 <- length(nosbce_pt_Ids)
perc_sbce0 <- round(n_sbce0/length(Final_IDs)*100,2)
perc_sbce0 <- round(n_sbce0/length(final_Ids)*100,2)
perc_sbce0
View(pts_level_char_df)
View(pts_level_char_df)
1206751 + 41098
1206751 +87685
41098+3594
1294436 + 44692
13542+3362
1049+285
16904/1334
n_sbce0
n_sbce1
13,542+3362
13542+3362
n_sbce0
################################################################################
#3. Report some stats
################################################################################
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
################################################################################
#3. Report some stats
################################################################################
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
n_sbce1   <- length(sbce_pt_Ids)
n_sbce0   <- length(nosbce_pt_Ids)
n_sbce1
n_sbce0
13542+1049
13542+1049+3362+285
source("Recapse_Ultility.R")
Data_Sampling_Func <- function(upsample_flag,train_data,label_col_name,seed_num,random_perc = 0.8){
# upsample_flag <- 0
# train_data <- train_data
# label_col_name <- "y_PRE_OR_POST_2ndEvent"
# seed_num <- 1
#Get label col index
label_col_index <- which(colnames(train_data) == label_col_name)
#Sampling
if(upsample_flag==1){ #upsampling
set.seed(seed_num)
up_train <- upSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- up_train
}else if(upsample_flag==0){ #downsample
set.seed(seed_num)
down_train <- downSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else if(upsample_flag==2){ #random sample 90% of orignal data
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
sampled_train_data <- train_data[sampled_indxes,]
}else if (upsample_flag == 3){ #random sample then down sample
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
randomsampled_train_data <- train_data[sampled_indxes,]
down_train <- downSample(x = randomsampled_train_data[, -label_col_index],
y = as.factor(randomsampled_train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else{
original_train <- train_data
sampled_train_data <- original_train
}
return(sampled_train_data)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
#proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "12_TrainTestIDs/")
data_dir2        <- paste0(proj_dir, "11D_ModelReady_CombFatures/WithPossibleMonthsHasNoCodes/")
outdir           <- paste0(proj_dir, "16_Performance/")
#User input
sampling_flag    <- "Down"
########################################################################################################
#1. Load and combine all patient model ready data
########################################################################################################
pt_files <-list.files(data_dir2,full.names = T)
#model_data <- do.call(rbind, lapply(pt_files,read.xlsx))
model_data <- do.call(rbind,mclapply(pt_files, mc.cores= numCores, function(z){read.xlsx(z, sheet = 1)}))
print("Original pre vs post samples: ")
table(model_data$y_PRE_OR_POST_2ndEvent)
#Add a column for original study ID
original_IDs <- strsplit(model_data$sample_id,split = "@")
model_data$study_id <- sapply(original_IDs, "[[", 1)
################################################################################
#2. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
train_ID_df <- read.xlsx(paste0(data_dir1,"train_ID_withLabel.xlsx"),sheet = 1)
test_ID_df  <- read.xlsx(paste0(data_dir1,"test_ID_withLabel.xlsx"),sheet = 1)
source("Recapse_Ultility.R")
Data_Sampling_Func <- function(upsample_flag,train_data,label_col_name,seed_num,random_perc = 0.8){
# upsample_flag <- 0
# train_data <- train_data
# label_col_name <- "y_PRE_OR_POST_2ndEvent"
# seed_num <- 1
#Get label col index
label_col_index <- which(colnames(train_data) == label_col_name)
#Sampling
if(upsample_flag==1){ #upsampling
set.seed(seed_num)
up_train <- upSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- up_train
}else if(upsample_flag==0){ #downsample
set.seed(seed_num)
down_train <- downSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else if(upsample_flag==2){ #random sample 90% of orignal data
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
sampled_train_data <- train_data[sampled_indxes,]
}else if (upsample_flag == 3){ #random sample then down sample
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
randomsampled_train_data <- train_data[sampled_indxes,]
down_train <- downSample(x = randomsampled_train_data[, -label_col_index],
y = as.factor(randomsampled_train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else{
original_train <- train_data
sampled_train_data <- original_train
}
return(sampled_train_data)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "12_TrainTestIDs/")
data_dir2        <- paste0(proj_dir, "11D_ModelReady_CombFatures/WithPossibleMonthsHasNoCodes/")
outdir           <- paste0(proj_dir, "16_Performance/")
#User input
sampling_flag    <- "Down"
########################################################################################################
#1. Load and combine all patient model ready data
########################################################################################################
pt_files <-list.files(data_dir2,full.names = T)
#model_data <- do.call(rbind, lapply(pt_files,read.xlsx))
model_data <- do.call(rbind,mclapply(pt_files, mc.cores= numCores, function(z){read.xlsx(z, sheet = 1)}))
print("Original pre vs post samples: ")
table(model_data$y_PRE_OR_POST_2ndEvent)
#Add a column for original study ID
original_IDs <- strsplit(model_data$sample_id,split = "@")
model_data$study_id <- sapply(original_IDs, "[[", 1)
################################################################################
#2. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
train_ID_df <- read.xlsx(paste0(data_dir1,"train_ID_withLabel.xlsx"),sheet = 1)
test_ID_df  <- read.xlsx(paste0(data_dir1,"test_ID_withLabel.xlsx"),sheet = 1)
intersect(train_ID_df$study_id,test_ID_df$SBCE)
#data dir
data_dir1        <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
################################################################################
#1. Load pts level char for final IDs
################################################################################
pts_level_char_df <- read.xlsx(paste0(data_dir1,"/9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
final_Ids <- pts_level_char_df$study_id
setdiff(final_Ids, test_ID_df$study_id)
which(test_ID_df$study_id %in% final_Ids)
which(!test_ID_df$study_id %in% final_Ids)
which(!train_ID_df$study_id %in% final_Ids)
length(which(pts_level_char_df$SBCE == 1))
1,049 + 285
1049 + 285
#Check
which(pts_level_char_df$study_id %in% test_ID_df$study_id)
#Check
check_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% test_ID_df$study_id),]
identical(check_df$study_id, test_ID_df$study_id)
identical(check_df$SBCE, test_ID_df$SBCE)
check_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% train_ID_df$study_id),]
identical(check_df$study_id, train_ID_df$study_id)
identical(check_df$SBCE, train_ID_df$SBCE)
identical(check_df$SBCE, train_ID_df$study_id)
table(train_ID_df$SBCE) #13542  1049
table(test_ID_df$SBCE)  #3362  285
1049+285
#Check
check_df <- pts_level_char_df[-which(pts_level_char_df$study_id %in% test_ID_df$study_id),]
check_df <- check_df[-which(check_df$study_id %in% train_ID_df$study_id),]
View(check_df)
View(test_ID_df)
View(train_ID_df)
#Check
check_df <- pts_level_char_df[-which(pts_level_char_df$study_id %in% test_ID_df$study_id),]
check_df <- check_df[-which(check_df$study_id %in% train_ID_df$study_id),]
#Check
test_Id <- test_ID_df$study_id
train_Id <- train_ID_df$study_id
test_Id
intersect(test_Id,train_Id)
#Check
test_Id  <- test_ID_df$study_id
train_Id <- train_ID_df$study_id
intersect(test_Id,train_Id)
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir           <- paste0(proj_dir, "12_TrainTestIDs/")
################################################################################
#1. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir1,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
Final_ID    <- unique(Final_ID_df$study_id)
pts_level_char_df <- read.xlsx(paste0(data_dir1,"9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
pts_level_char_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% Final_ID),] #only keep char for final ID
print("Original non-SBCE vs SBCE : ")
table(pts_level_char_df$SBCE) #16917  1322
################################################################################
#2. Get SBCE and non-SBCE IDs
################################################################################
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
original_noSBCE_toSBCEratio <- round(length(nosbce_pt_Ids)/length(sbce_pt_Ids)) #13: 1
########################################################################################################
#3. make sure no overlapping in original Ids in train and test
#Without sampling
#Test: 20% of the original IDs
#Train: 80% of the orginal IDs
#Validation sets will be auto generated when doing CV
########################################################################################################
total_n <- length(Final_ID)
set.seed(123)
test_ID   <- sample(Final_ID,0.2*total_n)
train_ID  <- Final_ID[-which(Final_ID %in% test_ID)]
intersect(test_ID,train_ID)
test_ID_withLabel_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% test_ID),c("study_id" , "SBCE")]
train_ID_withLabel_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% train_ID),c("study_id" , "SBCE")]
write.xlsx(test_ID_withLabel_df, paste0(outdir,"test_ID_withLabel.xlsx"))
write.xlsx(train_ID_withLabel_df,paste0(outdir,"train_ID_withLabel.xlsx"))
13542+3362
1049+285
intersect(test_ID,train_ID)
table(test_ID_withLabel_df$SBCE)
table(train_ID_withLabel_df$SBCE)
285 +1037
3362 +285+13555 +1037
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir           <- paste0(proj_dir, "17_Discrip_Statistics/")
################################################################################
#1. Load pts level char for final IDs
################################################################################
pts_level_char_df <- read.xlsx(paste0(data_dir1,"/9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
final_Ids <- pts_level_char_df$study_id
################################################################################
#3. Report some stats
################################################################################
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
n_sbce1   <- length(sbce_pt_Ids)
n_sbce0   <- length(nosbce_pt_Ids)
n_sbce1
length(n_sbce0)
n_sbce0   <- length(nosbce_pt_Ids)
length(n_sbce0)
nosbce_pt_Ids
n_sbce0   <- length(nosbce_pt_Ids)
n_sbce0
perc_sbce0 <- round(n_sbce0/length(final_Ids)*100,2)
perc_sbce0
n_sbce1:n_sbce0
n_sbce1/n_sbce0
n_sbce1
n_sbce0
n_sbce0/ n_sbce1
#Number of patients with first primary recurrence
table(pts_level_char_df$Type_2nd_Event)
table(pts_level_char_df$First_Primary_BC_related_Death)
#type of 2nd event
table(pts_level_char_df$Type_2nd_Event)
#type of 2nd event
type_2ndevnet_tb <- table(pts_level_char_df$Type_2nd_Event)
#type of 2nd event
type_2ndevnet_tb <- as.data.frame(table(pts_level_char_df$Type_2nd_Event))
View(type_2ndevnet_tb)
892+7+7
892+7+7+4
910+275+137
910/18239
round(910/18239)
round(910/18239,2)
round(910/18239*100,2)
round(275/18239*100,2)
round(275/1322*100,2)
round(910/1322*100,2)
round(137/1322*100,2)
1206751 - 239885
41098 - 8847
1206751+41098
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16C_PlotPredictions.R', echo=TRUE)
curr_id <- 26319
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
p <- plot_individual_prediction(curr_df)
png(paste0(outdir,"SBCE",curr_label,"_ID",curr_id,".png"))
print(p)
dev.off()
