curr_char_df <- pts_level_char_df[pts_level_char_df[,"study_id"] == curr_pt_id, ]
pt_pred_df[i , "SBCE"]             <- curr_char_df[,"SBCE"]
pt_pred_df[i , "study_id"]         <- curr_pt_id
curr_2nd_event_date <- mdy(curr_char_df[,"Date_2nd_Event"])
if (is.na(curr_2nd_event_date) == F){
curr_2nd_event_year  <- year(curr_2nd_event_date)
curr_2nd_event_month <- month(curr_2nd_event_date)
curr_acutal_SBCEMonth <- paste0(curr_2nd_event_year, "-",curr_2nd_event_month, "-", "01") #use the first day as the month
}else {
curr_acutal_SBCEMonth <- "NONE"
}
pt_pred_df[i , "Acutal_SBCEMonth"] <- curr_acutal_SBCEMonth
#sort by month
curr_pred_df <- curr_pred_df[order(curr_pred_df$month_start),]
for (j in 1:length(thres)){
curr_thres <- thres[j]
#Get col index of threshold in sample pred df
curr_col_idxes_inpreddf <- which(grepl(paste0("PredictedClass_Thres_",curr_thres),colnames(curr_pred_df)))
curr_all_idxes <- which(curr_pred_df[,curr_col_idxes_inpreddf] == 1) #all index predicted higher than threhold
if (length(curr_all_idxes) >= 3 ){ #if there is 3 consecutive predicted month ?= threhold
#check if persistent 1s for 3 months
first_month_index <- 0
kt <- 1
while (first_month_index == 0){
curr_3indxes <- curr_all_idxes[kt:(kt+2)] #check every 3 consecitve indexes
curr_diff   <- diff(curr_3indxes)
if (sum(curr_diff) == 2){ #if the sum of diff is 2, them it is consecutives, and it persistent as 1
first_month_index <- curr_all_idxes[kt]
}else{
kt <- kt+1
}
}
curr_pred_month <- curr_pred_df[first_month_index,"month_start"] #1st index predicted higher or equal to the threhold
curr_pred_class <- 1
}else {
curr_pred_month <- "NONE"
curr_pred_class <- 0
}
#get col idex of threhold in patient pred df
curr_col_idxes_inptdf1 <- which(grepl(paste0("PredictedSBCEMonth_Thres_",curr_thres),colnames(pt_pred_df)))
curr_col_idxes_inptdf2 <- which(grepl(paste0("PredictedClass_Thres_",curr_thres),colnames(pt_pred_df)))
pt_pred_df[i,curr_col_idxes_inptdf1] <- curr_pred_month
pt_pred_df[i,curr_col_idxes_inptdf2] <- curr_pred_class
}
}
i
first_month_index
j
curr_thres <- thres[j]
#Get col index of threshold in sample pred df
curr_col_idxes_inpreddf <- which(grepl(paste0("PredictedClass_Thres_",curr_thres),colnames(curr_pred_df)))
curr_all_idxes <- which(curr_pred_df[,curr_col_idxes_inpreddf] == 1) #all index predicted higher than threhold
curr_all_idxes
#check if persistent 1s for 3 months
first_month_index <- 0
kt <- 1
while (first_month_index == 0){
curr_3indxes <- curr_all_idxes[kt:(kt+2)] #check every 3 consecitve indexes
curr_diff   <- diff(curr_3indxes)
if (sum(curr_diff) == 2){ #if the sum of diff is 2, them it is consecutives, and it persistent as 1
first_month_index <- curr_all_idxes[kt]
}else{
kt <- kt+1
}
}
kt
curr_all_idxes
#check if persistent 1s for 3 months
first_month_index <- 0
kt <- 1
while (first_month_index == 0 & (kt + 2) <= length(curr_all_idxes)){
curr_3indxes <- curr_all_idxes[kt:(kt+2)] #check every 3 consecitve indexes
curr_diff   <- diff(curr_3indxes)
if (sum(curr_diff) == 2){ #if the sum of diff is 2, them it is consecutives, and it persistent as 1
first_month_index <- curr_all_idxes[kt]
}else{
kt <- kt+1
}
}
first_month_index
#persistence for 3 months
get_pt_level_pred_df2 <- function(analysis_df,pts_level_char_df){
#analysis_df <- test_prediction_df
unique_test_ptIDs <- unique(analysis_df[,"study_id"])
thres <- c("01","02","03","04","05","06","07","08")
pt_pred_df<- as.data.frame(matrix(NA, nrow = length(unique_test_ptIDs),ncol = 19))
colnames(pt_pred_df) <- c("study_id","SBCE","Acutal_SBCEMonth",
"PredictedSBCEMonth_Thres_01","PredictedClass_Thres_01",
"PredictedSBCEMonth_Thres_02","PredictedClass_Thres_02",
"PredictedSBCEMonth_Thres_03","PredictedClass_Thres_03",
"PredictedSBCEMonth_Thres_04","PredictedClass_Thres_04",
"PredictedSBCEMonth_Thres_05","PredictedClass_Thres_05",
"PredictedSBCEMonth_Thres_06","PredictedClass_Thres_06",
"PredictedSBCEMonth_Thres_07","PredictedClass_Thres_07",
"PredictedSBCEMonth_Thres_08","PredictedClass_Thres_08")
for (i in 1:length(unique_test_ptIDs)){
if (i %% 500 == 0) {print(i)}
curr_pt_id <- unique_test_ptIDs[i]
curr_pred_df <- analysis_df[analysis_df[,"study_id"] == curr_pt_id,]
curr_char_df <- pts_level_char_df[pts_level_char_df[,"study_id"] == curr_pt_id, ]
pt_pred_df[i , "SBCE"]             <- curr_char_df[,"SBCE"]
pt_pred_df[i , "study_id"]         <- curr_pt_id
curr_2nd_event_date <- mdy(curr_char_df[,"Date_2nd_Event"])
if (is.na(curr_2nd_event_date) == F){
curr_2nd_event_year  <- year(curr_2nd_event_date)
curr_2nd_event_month <- month(curr_2nd_event_date)
curr_acutal_SBCEMonth <- paste0(curr_2nd_event_year, "-",curr_2nd_event_month, "-", "01") #use the first day as the month
}else {
curr_acutal_SBCEMonth <- "NONE"
}
pt_pred_df[i , "Acutal_SBCEMonth"] <- curr_acutal_SBCEMonth
#sort by month
curr_pred_df <- curr_pred_df[order(curr_pred_df$month_start),]
for (j in 1:length(thres)){
curr_thres <- thres[j]
#Get col index of threshold in sample pred df
curr_col_idxes_inpreddf <- which(grepl(paste0("PredictedClass_Thres_",curr_thres),colnames(curr_pred_df)))
curr_all_idxes <- which(curr_pred_df[,curr_col_idxes_inpreddf] == 1) #all index predicted higher than threhold
if (length(curr_all_idxes) >= 3 ){ #if there is 3 consecutive predicted month ?= threhold
#check if persistent 1s for 3 months
first_month_index <- 0
kt <- 1
while (first_month_index == 0 & (kt + 2) <= length(curr_all_idxes)){
curr_3indxes <- curr_all_idxes[kt:(kt+2)] #check every 3 consecitve indexes
curr_diff   <- diff(curr_3indxes)
if (sum(curr_diff) == 2){ #if the sum of diff is 2, them it is consecutives, and it persistent as 1
first_month_index <- curr_all_idxes[kt]
}else{
kt <- kt+1
}
}
if (first_month_index != 0){
curr_pred_month <- curr_pred_df[first_month_index,"month_start"] #1st index predicted higher or equal to the threhold
curr_pred_class <- 1
}else{
curr_pred_class <- 0
}
}else {
curr_pred_month <- "NONE"
curr_pred_class <- 0
}
#get col idex of threhold in patient pred df
curr_col_idxes_inptdf1 <- which(grepl(paste0("PredictedSBCEMonth_Thres_",curr_thres),colnames(pt_pred_df)))
curr_col_idxes_inptdf2 <- which(grepl(paste0("PredictedClass_Thres_",curr_thres),colnames(pt_pred_df)))
pt_pred_df[i,curr_col_idxes_inptdf1] <- curr_pred_month
pt_pred_df[i,curr_col_idxes_inptdf2] <- curr_pred_class
}
}
return(pt_pred_df)
}
#2. persisten 3 month results
ptlevel_pred_df_alltest2 <- get_pt_level_pred_df2(test_prediction_df,pts_level_char_df)
ptlevel_perf_tb_alltest2 <- get_perf_table_PTLEVEL_func(ptlevel_pred_df_alltest2)
write.csv(ptlevel_perf_tb_alltest2,paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/",update_pred_flag,"_Patient_Level_Perf_tb_alltest_persistent3month",".csv"),row.names = T)
ptlevel_pred_df_SBCE <- ptlevel_pred_df_alltest2[which(ptlevel_pred_df_alltest2[,"SBCE"]==1), ]
#2.1 add predicted month using change points
ptlevel_pred_df_SBCE$PredictedSBCEMonth_Thres_CP <- NA
for (i in 1:nrow(ptlevel_pred_df_SBCE)){
curr_id <- ptlevel_pred_df_SBCE[i,"study_id"]
curr_cp <- changepoint_df[which(changepoint_df[,"study_id"] == curr_id),"changepoint_month"]
ptlevel_pred_df_SBCE[i, "PredictedSBCEMonth_Thres_CP"] <- curr_cp
}
#2.2 compute the difference between predicted SBCE month and actual SBCE month
ptlevel_monthdiff_df <- compute_month_diff(ptlevel_pred_df_SBCE)
#2.3 month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
write.csv(monthdiff_stats,paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/",update_pred_flag,"_Predicted_Monthdiff_stats_persistent3month",".csv"),row.names = T)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16E_Compute_Perf.R', echo=TRUE)
View(ptlevel_pred_df_alltest2)
source("Recapse_Ultility.R")
library(reshape2)
plot_individual_prediction <- function(pt_prediction_df, changepoint = NA, plot_cp = FALSE){
#pt_prediction_df <- curr_df
plot_data           <- curr_df[,c("month_start","actual","pred")]
colnames(plot_data) <- c("month_start","Acutal","Predicted")
reshaped_plot_data <- melt(plot_data,id.vars="month_start") #reshape
p <- ggplot(reshaped_plot_data, aes(x= month_start, y= value,color = variable, linetype = variable,shape = variable)) +
geom_point(size=5) +
geom_line(size=1)+
scale_linetype_manual("variable",values=c(0,1)) +
scale_color_manual("variable",
values = c("Acutal" = "darkblue",
"Predicted" = "darkred"))+
scale_shape_manual("variable",values=c(16,NA)) +
ylim(c(0,1)) +
xlab("Year") +
ylab("Predicted Probability")+
theme_bw() +  theme(legend.position="top", legend.title = element_blank()) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=14))
if (plot_cp == T){
p <- p + geom_vline(xintercept = changepoint, linetype="dotted", color = "darkorange", size=1.5) +
geom_text(aes(x=changepoint, label="CP", y=1), colour="darkorange", angle=0)
}
return(p)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1217updated/Use_ImportantFs_Performance/")
data_dir2        <- paste0(proj_dir, "11F_TrainTestIDs/")
outdir           <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1217updated/Use_ImportantFs_Performance/")
#User input
ds_index <- 1
update_pred_flag <- "Original" #Updated or Original
########################################################################################################
#1.Load predictions
########################################################################################################
#Load prediction data
if (update_pred_flag != "Updated"){ #predtion use model
test_prediction_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed", "/16_Prediction_Table_DS", ds_index, ".csv"))
}else if (update_pred_flag == "Updated"){#prediction obv neg by assigin 0, prediction of other ones used model
test_prediction_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed", "/16_Updated_Prediction_Table_DS", ds_index, ".csv"))
}
#Add study_id and month start
original_IDs <- strsplit(as.character(test_prediction_df$sample_id),split = "@")
test_prediction_df$study_id    <- gsub("ID","",sapply(original_IDs, "[[", 1))
test_prediction_df$month_start <- sapply(original_IDs, "[[", 2)
test_ID <- unique(test_prediction_df$study_id)
################################################################################
#2. Load label df to get SBCE or not
################################################################################
SBCE_label_df <- read.xlsx(paste0(data_dir2,"/test_ID_withLabel.xlsx"),sheet = 1)
################################################################################
#3. Load change point analysis results
################################################################################
changepoint_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed/","16_",update_pred_flag,"_ChangePoint",".csv"),stringsAsFactors = F)
################################################################################
#Plot
#'@TODO: Maybe add event date Later
################################################################################
for (i in 1:length(test_ID)){
if(i %% 100 == 0){print(i)}
curr_id <- test_ID[i]
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
if (curr_label == 1){
#get change point
curr_cp <- ymd(changepoint_df[which(changepoint_df[,"study_id"] == curr_id),"changepoint_month"])
p <- plot_individual_prediction(curr_df,curr_cp,TRUE)
}else{
p <- plot_individual_prediction(curr_df,NA,FALSE)
}
png(paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/Individual_Plot/",update_pred_flag,"/SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
}
################################################################################
#4. Load predicted months
################################################################################
pred_month_df <- read.csv(paste0(data_dir3,paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/",update_pred_flag,"_Patient_Level_Perf_tb_alltest_persistent3month",".csv")),stringsAsFactors = F)
source("Recapse_Ultility.R")
library(reshape2)
plot_individual_prediction <- function(pt_prediction_df, changepoint = NA, plot_cp = FALSE){
#pt_prediction_df <- curr_df
plot_data           <- curr_df[,c("month_start","actual","pred")]
colnames(plot_data) <- c("month_start","Acutal","Predicted")
reshaped_plot_data <- melt(plot_data,id.vars="month_start") #reshape
p <- ggplot(reshaped_plot_data, aes(x= month_start, y= value,color = variable, linetype = variable,shape = variable)) +
geom_point(size=5) +
geom_line(size=1)+
scale_linetype_manual("variable",values=c(0,1)) +
scale_color_manual("variable",
values = c("Acutal" = "darkblue",
"Predicted" = "darkred"))+
scale_shape_manual("variable",values=c(16,NA)) +
ylim(c(0,1)) +
xlab("Year") +
ylab("Predicted Probability")+
theme_bw() +  theme(legend.position="top", legend.title = element_blank()) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=14))
if (plot_cp == T){
p <- p + geom_vline(xintercept = changepoint, linetype="dotted", color = "darkorange", size=1.5) +
geom_text(aes(x=changepoint, label="CP", y=1), colour="darkorange", angle=0)
}
return(p)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1217updated/Use_ImportantFs_Performance/")
data_dir2        <- paste0(proj_dir, "11F_TrainTestIDs/")
data_dir3           <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1217updated/Use_ImportantFs_Performance/")
outdir           <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1217updated/Use_ImportantFs_Performance/")
#User input
ds_index <- 1
update_pred_flag <- "Original" #Updated or Original
########################################################################################################
#1.Load predictions
########################################################################################################
#Load prediction data
if (update_pred_flag != "Updated"){ #predtion use model
test_prediction_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed", "/16_Prediction_Table_DS", ds_index, ".csv"))
}else if (update_pred_flag == "Updated"){#prediction obv neg by assigin 0, prediction of other ones used model
test_prediction_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed", "/16_Updated_Prediction_Table_DS", ds_index, ".csv"))
}
#Add study_id and month start
original_IDs <- strsplit(as.character(test_prediction_df$sample_id),split = "@")
test_prediction_df$study_id    <- gsub("ID","",sapply(original_IDs, "[[", 1))
test_prediction_df$month_start <- sapply(original_IDs, "[[", 2)
test_ID <- unique(test_prediction_df$study_id)
################################################################################
#2. Load label df to get SBCE or not
################################################################################
SBCE_label_df <- read.xlsx(paste0(data_dir2,"/test_ID_withLabel.xlsx"),sheet = 1)
################################################################################
#3. Load change point analysis results
################################################################################
changepoint_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed/","16_",update_pred_flag,"_ChangePoint",".csv"),stringsAsFactors = F)
################################################################################
#4. Load predicted months
################################################################################
pred_month_df <- read.csv(paste0(data_dir3,paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/",update_pred_flag,"_Patient_Level_Perf_tb_alltest_persistent3month",".csv")),stringsAsFactors = F)
################################################################################
#4. Load predicted months
################################################################################
pred_month_df <- read.csv(paste0(data_dir3,"train_DS",ds_index,"/BeforeSmoothed/",update_pred_flag,"_Patient_Level_Perf_tb_alltest_persistent3month",".csv"),stringsAsFactors = F)
View(pred_month_df)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16E_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16E_Compute_Perf.R', echo=TRUE)
source("Recapse_Ultility.R")
library(reshape2)
plot_individual_prediction <- function(pt_prediction_df, changepoint = NA, plot_cp = FALSE){
#pt_prediction_df <- curr_df
plot_data           <- curr_df[,c("month_start","actual","pred")]
colnames(plot_data) <- c("month_start","Acutal","Predicted")
reshaped_plot_data <- melt(plot_data,id.vars="month_start") #reshape
p <- ggplot(reshaped_plot_data, aes(x= month_start, y= value,color = variable, linetype = variable,shape = variable)) +
geom_point(size=5) +
geom_line(size=1)+
scale_linetype_manual("variable",values=c(0,1)) +
scale_color_manual("variable",
values = c("Acutal" = "darkblue",
"Predicted" = "darkred"))+
scale_shape_manual("variable",values=c(16,NA)) +
ylim(c(0,1)) +
xlab("Year") +
ylab("Predicted Probability")+
theme_bw() +  theme(legend.position="top", legend.title = element_blank()) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=14))
if (plot_cp == T){
p <- p + geom_vline(xintercept = changepoint, linetype="dotted", color = "darkorange", size=1.5) +
geom_text(aes(x=changepoint, label="CP", y=1), colour="darkorange", angle=0)
}
return(p)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1217updated/Use_ImportantFs_Performance/")
data_dir2        <- paste0(proj_dir, "11F_TrainTestIDs/")
data_dir3           <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1217updated/Use_ImportantFs_Performance/")
outdir           <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1217updated/Use_ImportantFs_Performance/")
#User input
ds_index <- 1
update_pred_flag <- "Original" #Updated or Original
########################################################################################################
#1.Load predictions
########################################################################################################
#Load prediction data
if (update_pred_flag != "Updated"){ #predtion use model
test_prediction_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed", "/16_Prediction_Table_DS", ds_index, ".csv"))
}else if (update_pred_flag == "Updated"){#prediction obv neg by assigin 0, prediction of other ones used model
test_prediction_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed", "/16_Updated_Prediction_Table_DS", ds_index, ".csv"))
}
#Add study_id and month start
original_IDs <- strsplit(as.character(test_prediction_df$sample_id),split = "@")
test_prediction_df$study_id    <- gsub("ID","",sapply(original_IDs, "[[", 1))
test_prediction_df$month_start <- sapply(original_IDs, "[[", 2)
test_ID <- unique(test_prediction_df$study_id)
################################################################################
#2. Load label df to get SBCE or not
################################################################################
SBCE_label_df <- read.xlsx(paste0(data_dir2,"/test_ID_withLabel.xlsx"),sheet = 1)
################################################################################
#3. Load change point analysis results
################################################################################
changepoint_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed/","16_",update_pred_flag,"_ChangePoint",".csv"),stringsAsFactors = F)
################################################################################
#4. Load predicted months
################################################################################
pred_month_df <- read.csv(paste0(data_dir3,"train_DS",ds_index,"/BeforeSmoothed/",update_pred_flag,"_Patient_Level_PerdMonth_alltest_persistent3month.csv",".csv"),stringsAsFactors = F)
################################################################################
#4. Load predicted months
################################################################################
pred_month_df <- read.csv(paste0(data_dir3,"train_DS",ds_index,"/BeforeSmoothed/",update_pred_flag,"_Patient_Level_PerdMonth_alltest_persistent3month.csv"),stringsAsFactors = F)
View(test_prediction_df)
i <- 4
if(i %% 100 == 0){print(i)}
curr_id <- test_ID[i]
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
pred_month_df$study_id
#get pred month
curr_cp <- ymd(pred_month_df[which(pred_month_df[,"study_id"] == curr_id),"PredictedSBCEMonth_Thres_05"])
pred_month_df$PredictedSBCEMonth_Thres_05
pred_month_df[which(pred_month_df[,"study_id"] == curr_id),"PredictedSBCEMonth_Thres_05"])
pred_month_df[which(pred_month_df[,"study_id"] == curr_id),"PredictedSBCEMonth_Thres_05"]
#get pred month
curr_cp <- ymd(pred_month_df[which(pred_month_df[,"study_id"] == curr_id),"PredictedSBCEMonth_Thres_05"])
curr_cp
p <- plot_individual_prediction(curr_df,curr_cp,TRUE)
p
print(p)
curr_cp
################################################################################
#Plot
#'@TODO: Maybe add event date Later
################################################################################
for (i in 1:length(test_ID)){
if(i %% 100 == 0){print(i)}
curr_id <- test_ID[i]
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
if (curr_label == 1){
#get change point
#curr_cp <- ymd(changepoint_df[which(changepoint_df[,"study_id"] == curr_id),"changepoint_month"])
#get pred month
curr_cp <- ymd(pred_month_df[which(pred_month_df[,"study_id"] == curr_id),"PredictedSBCEMonth_Thres_05"])
p <- plot_individual_prediction(curr_df,curr_cp,TRUE)
}else{
p <- plot_individual_prediction(curr_df,NA,FALSE)
}
png(paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/Individual_Plot/",update_pred_flag,"/SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
}
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16F_PlotPredictions.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16F_PlotPredictions.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16F_PlotPredictions.R', echo=TRUE)
curr_id <- "ID20374"
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
if (curr_label == 1){
#get change point
#curr_cp <- ymd(changepoint_df[which(changepoint_df[,"study_id"] == curr_id),"changepoint_month"])
#get pred month
curr_cp <- ymd(pred_month_df[which(pred_month_df[,"study_id"] == curr_id),"PredictedSBCEMonth_Thres_05"])
p <- plot_individual_prediction(curr_df,curr_cp,TRUE)
}else{
p <- plot_individual_prediction(curr_df,NA,FALSE)
}
png(paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/Individual_Plot/",update_pred_flag,"/SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
curr_id <- "ID20374"
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
curr_df
curr_id
curr_id <- test_ID[i]
curr_id
curr_id <- "20374"
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
if (curr_label == 1){
#get change point
#curr_cp <- ymd(changepoint_df[which(changepoint_df[,"study_id"] == curr_id),"changepoint_month"])
#get pred month
curr_cp <- ymd(pred_month_df[which(pred_month_df[,"study_id"] == curr_id),"PredictedSBCEMonth_Thres_05"])
p <- plot_individual_prediction(curr_df,curr_cp,TRUE)
}else{
p <- plot_individual_prediction(curr_df,NA,FALSE)
}
png(paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/Individual_Plot/",update_pred_flag,"/SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
View(test_prediction_df)
View(pred_month_df)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16F_PlotPredictions.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16F_PlotPredictions.R', echo=TRUE)
