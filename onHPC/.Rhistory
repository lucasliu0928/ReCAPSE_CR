}
get_state_county_data(state_name)
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
state_name <- "Kentucky"
get_state_county_data(state_name)
ky_df <- get_state_county_data(state_name)
View(ky_df)
get_state_county_data <- function(state_name){
#A. Get us and state map data
us_map_df <- left_join(countydata, counties, by = "county_fips")
state_map_df <- us_df[which(us_df[,"state_name"] == state_name),]
#B. Initial county count
state_count_df <- data.frame(county_name = unique(ky_df[,"county_name"]),
count= 0)
state_count_df[,"county_name"] <- as.character(state_count_df[,"county_name"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= state_map_df, y= state_count_df, by= "county_name")
return(comb_df)
}
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
state_name <- "Kentucky"
ky_df <- get_state_county_data(state_name)
View(ky_df)
colnames(ky_df)
get_state_county_data <- function(state_name){
#A. Get us and state map data
us_map_df <- left_join(countydata, counties, by = "county_fips")
state_map_df <- us_df[which(us_df[,"state_name"] == state_name),]
#B. Initial county count
state_count_df <- data.frame(county_name = unique(ky_df[,"county_name"]),
count = 0)
state_count_df[,"county_name"] <- as.character(state_count_df[,"county_name"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= state_map_df, y= state_count_df, by= "county_name")
#D.Keep useful col
comb_df <- comb_df[,c("long","lat","group","state_abbv","state_name","county_name","count")]
return(comb_df)
}
ky_df <- get_state_county_data(state_name)
View(ky_df)
get_US_state_county_data <- function(state_name){
#A. Get us and state map data
us_map_df <- left_join(countydata, counties, by = "county_fips")
state_map_df <- us_df[which(us_df[,"state_name"] == state_name),]
#B. Initial county count
state_count_df <- data.frame(county_name = unique(ky_df[,"county_name"]),
count = 0)
state_count_df[,"county_name"] <- as.character(state_count_df[,"county_name"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= state_map_df, y= state_count_df, by= "county_name")
#D.Keep useful col
comb_df <- comb_df[,c("long","lat","group","state_abbv","state_name","county_name","count")]
return(comb_df)
}
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
#A. Get Kentucky Map Data and Student count
ky_df <- get_US_state_county_data("Kentucky")
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
ky_df[idxes,"count"] <- 5
idxes <- which(ky_df[,"county_name"] == "Jefferson County")
ky_df[idxes,"count"] <- 10
idxes <- which(ky_df[,"county_name"] == "Warren County")
ky_df[idxes,"count"] <- 20
#reformat count
ky_df[,"count"] <- as.factor(ky_df[,"count"])
p1 <- ggplot(data = ky_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count), color = "steelblue3",size = 0)+
coord_fixed(1.3) +
scale_fill_manual(values=c("steelblue", "darkseagreen1",
"darkorange","burlywood1")) +
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"ky_highlight_region_map")
ky_df$count
table(ky_df$count)
View(ky_df)
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
idxes
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
ky_df[idxes,"count"] <- 5
idxes <- which(ky_df[,"county_name"] == "Jefferson County")
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
idxes
ky_df[idxes,"count"] <- 5
ky_df$count
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
#A. Get Kentucky Map Data and Student count
ky_df <- get_US_state_county_data("Kentucky")
ky_df$count
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
ky_df[idxes,"count"] <- 5
idxes <- which(ky_df[,"county_name"] == "Jefferson County")
ky_df[idxes,"count"] <- 10
idxes <- which(ky_df[,"county_name"] == "Warren County")
ky_df[idxes,"count"] <- 20
#reformat count
ky_df[,"count"] <- as.factor(ky_df[,"count"])
table(ky_df$count)
ky_df[,"count"]
View(ky_df)
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
#A. Get Kentucky Map Data and Student count
ky_df <- get_US_state_county_data("Kentucky")
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
ky_df[idxes,"count"]
get_US_state_county_data <- function(state_name){
#A. Get us and state map data
us_map_df <- left_join(countydata, counties, by = "county_fips")
state_map_df <- us_df[which(us_df[,"state_name"] == state_name),]
#B. Initial county count
state_count_df <- data.frame(county_name = unique(ky_df[,"county_name"]),
count = 0)
state_count_df[,"county_name"] <- as.character(state_count_df[,"county_name"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= state_map_df, y= state_count_df, by= "county_name")
#D.Keep useful col
comb_df <- as.data.frame(comb_df[,c("long","lat","group","state_abbv","state_name","county_name","count")])
return(comb_df)
}
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
#A. Get Kentucky Map Data and Student count
ky_df <- get_US_state_county_data("Kentucky")
View(ky_df)
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
ky_df[idxes,"count"] <- 5
idxes <- which(ky_df[,"county_name"] == "Jefferson County")
ky_df[idxes,"count"] <- 10
idxes <- which(ky_df[,"county_name"] == "Warren County")
ky_df[idxes,"count"] <- 20
#reformat count
ky_df[,"count"] <- as.factor(ky_df[,"count"])
table(ky_df$count)
p1 <- ggplot(data = ky_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count), color = "steelblue3",size = 0)+
coord_fixed(1.3) +
scale_fill_manual(values=c("steelblue", "darkseagreen1",
"darkorange","burlywood1")) +
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"ky_highlight_region_map")
################################################
#4. Japan map
################################################
#https://rpubs.com/Ndee/499439
#A.Get japan map data
japan_map_df <- map_data("japan")
#B. Whole map
#1.Create the plot
p2 <- ggplot() +
geom_polygon(data = japan_map_df,
aes(x=long, y = lat, group = group),
fill = "steelblue3", color = "steelblue3",
size = 0)  +
coord_fixed(1.3) +  #fixed the ratio of x and y
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"jp_map")
#A.Get japan map data
japan_map_df <- map_data("japan")
#B. Initial region count
region_count_df <- data.frame(region = unique(japan_map_df[,"region"]),
count= 0)
region_count_df[,"region"] <- as.character(region_count_df[,"region"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= japan_map_df, y= region_count_df, by= "region")
View(comb_df)
colnames(comb_df)
################################################
#4. Japan map
################################################
#https://rpubs.com/Ndee/499439
get_JP_region_data <- function(){
#A.Get japan map data
japan_map_df <- map_data("japan")
#B. Initial region count
region_count_df <- data.frame(region = unique(japan_map_df[,"region"]),
count= 0)
region_count_df[,"region"] <- as.character(region_count_df[,"region"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= japan_map_df, y= region_count_df, by= "region")
#D.Keep useful col
comb_df <- as.data.frame(comb_df[,c("long","lat","group","region","count")])
return(comb_df)
}
################################################
#4. Japan map
################################################
#https://rpubs.com/Ndee/499439
get_JP_region_data <- function(){
#A.Get japan map data
japan_map_df <- map_data("japan")
#B. Initial region count
region_count_df <- data.frame(region = unique(japan_map_df[,"region"]),
count= 0)
region_count_df[,"region"] <- as.character(region_count_df[,"region"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= japan_map_df, y= region_count_df, by= "region")
#D.Keep useful col
comb_df <- as.data.frame(comb_df[,c("long","lat","group","region","count")])
return(comb_df)
}
################################################
#4. Japan map
################################################
#https://rpubs.com/Ndee/499439
jp_df <- get_JP_region_data()
View(jp_df)
################################################
#4. Japan map
################################################
#https://rpubs.com/Ndee/499439
#A. Get Japan Map Data and Student count
jp_df <- get_JP_region_data()
#B. plot whole map (no highlight on region)
p2 <- ggplot() +
geom_polygon(data = jp_df,
aes(x=long, y = lat, group = group),
fill = "steelblue3", color = "steelblue3",
size = 0)  +
coord_fixed(1.3) +  #fixed the ratio of x and y
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"jp_map")
#D. plot highlight on region map
#Assign numbers
idxes <- which(jp_df[,"region"] == "Tokyo")
jp_df[idxes,"count"] <- 1
idxes <- which(jp_df[,"region"] == "Osaka")
jp_df[idxes,"count"] <- 10
#reformat count
jp_df[,"count"] <- as.factor(jp_df[,"count"])
p3 <- ggplot(data = jp_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count), color = "steelblue3",size = 0)+
coord_fixed(1.3) +
scale_fill_manual(values=c("steelblue",
"lightpink1","darkslategray1")) +
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"jp_highlight_region_map")
################################################
#5.Combine KY and JP in one plot
################################################
#1.Combine
figure <- ggarrange(p1, p3,
ncol = 2,
nrow = 1)
#2.Output plot to png
output_plot(outdir,"KYandJP_highlight_region_map",
width = 10, height = 6)
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
#proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
feature_set_name  <- "CCSandVAL2nd"     #choose from CCSandDM3SPE , CCSandVAL2nd
SBCE_ID_Folder    <- "SBCE" #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
sample_name       <- "All_Samples"  #choose from "All_Samples" , "Samples_HasAtLeastOneCodeGrpFeature"
if ((SBCE_ID_Folder == "SBCE") | (SBCE_ID_Folder == "SBCE_Excluded_DeathPts")){
label_col   <- "y_PRE_OR_POST_2ndEvent"
SBCE_col <- "SBCE"
}else{
label_col   <- "y_PRE_OR_POST_2ndEvent_ExcludedDeath"
SBCE_col <- "SBCE_Excluded_DeathLabel"
}
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
data_dir2  <- paste0(proj_dir,"12E_OBVandNONOBV_SamplesIDs/",feature_set_name,"/",sample_name,"/",SBCE_ID_Folder,"/")
newout <- paste0("18_Discrip_Statistics/",feature_set_name,"/",sample_name,"/",SBCE_ID_Folder,"/")
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
View(pt_char_df)
################################################################################
#1.Load all train and test IDs with flag for obv pos/neg or non obv
################################################################################
train_res <- load_obsSample_IDs(data_dir2,"Train",pt_char_df)
all_train_df <- train_res[[1]]
all_train_pt_ids <- train_res[[2]] #14592
all_train_sp_ids <- train_res[[3]] #999117
test_res <- load_obsSample_IDs(data_dir2,"Test",pt_char_df)
all_test_df <- test_res[[1]]
all_test_pt_ids <- test_res[[2]] #3647
all_test_sp_ids <- test_res[[3]] #248732
all_analysis_pt_ids <-c(all_train_pt_ids,all_test_pt_ids) #18239
all_analysis_sp_ids <-c(all_train_sp_ids,all_test_sp_ids) #1247849
################################################################################
#3.Fiter pt char df for anlaysis Ids
################################################################################
pt_char_df <- pt_char_df[which(pt_char_df[,"study_id"] %in% all_analysis_pt_ids),]
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
#proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
feature_set_name  <- "CCSandVAL2nd"     #choose from CCSandDM3SPE , CCSandVAL2nd
SBCE_ID_Folder    <- "SBCE" #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
sample_name       <- "All_Samples"  #choose from "All_Samples" , "Samples_HasAtLeastOneCodeGrpFeature"
if ((SBCE_ID_Folder == "SBCE") | (SBCE_ID_Folder == "SBCE_Excluded_DeathPts")){
label_col   <- "y_PRE_OR_POST_2ndEvent"
SBCE_col <- "SBCE"
}else{
label_col   <- "y_PRE_OR_POST_2ndEvent_ExcludedDeath"
SBCE_col <- "SBCE_Excluded_DeathLabel"
}
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
data_dir2  <- paste0(proj_dir,"12E_OBVandNONOBV_SamplesIDs/",feature_set_name,"/",sample_name,"/",SBCE_ID_Folder,"/")
newout <- paste0("18_Discrip_Statistics/",feature_set_name,"/",sample_name,"/",SBCE_ID_Folder,"/")
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
pt_char_df$Stage
table(pt_char_df[,"Stage"]
)
table(pt_char_df[,"Stage"])
table(pt_char_df[,"Age"])
table(pt_char_df[,"AGE"])
pt_char_df$Diagnosis_Year
source("Recapse_Ultility.R")
exclusion_func <- function(in_data){
exclusion1_indxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
exclusion2_indxes <- which(in_data[,"Stage"]  %in% c(0,4) |
is.na(in_data[,"Stage"])==T) #3491
exclusion3_indxes <- which(in_data[,"Comb_SEERSummStg"]  %in% c(0,7,9) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
exclusion4_indxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
all_exc_indexes <- unique(c(exclusion1_indxes,exclusion2_indxes,exclusion3_indxes,exclusion4_indxes))
updated_in_data <- in_data[-all_exc_indexes,]
return(updated_in_data)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
outdir   <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
################################################################################
#1. Load pts level char
################################################################################
patient_level_char_df1 <- read.xlsx(paste0(data_dir1,"8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
#patient_level_char_df2 <- read.xlsx(paste0(data_dir1,"8_PatientLevel_char_WithEveryMonthsHasCodes.xlsx"),sheet = 1)
################################################################################
#3.Analysis ID
################################################################################
analysis_ID1 <- unique(patient_level_char_df1$study_id)
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
#proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
feature_set_name  <- "CCSandVAL2nd"     #choose from CCSandDM3SPE , CCSandVAL2nd
SBCE_ID_Folder    <- "SBCE" #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
sample_name       <- "All_Samples"  #choose from "All_Samples" , "Samples_HasAtLeastOneCodeGrpFeature"
if ((SBCE_ID_Folder == "SBCE") | (SBCE_ID_Folder == "SBCE_Excluded_DeathPts")){
label_col   <- "y_PRE_OR_POST_2ndEvent"
SBCE_col <- "SBCE"
}else{
label_col   <- "y_PRE_OR_POST_2ndEvent_ExcludedDeath"
SBCE_col <- "SBCE_Excluded_DeathLabel"
}
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
#1.Adult
exclusion_indxes <- pt_char_df$reg_age_at_dx >= 18
#1.Adult
exclusion_indxes <- which(pt_char_df[,"reg_age_at_dx"] >= 18)
cond1 <- pt_char_df[,"reg_age_at_dx"] < 18   #non-adult
cond2 <-  pt_char_df[,"Stage"]  %in% c(0,4) | is.na(pt_char_df[,"Stage"])==T   #stage 0 or 4, or na
exclusion1_indxes <- which(cond1 | cond2 )
length(exclusion1_indxes)
pt_char_df <- pt_char_df[-exclusion1_indxes,]
cond1 <- pt_char_df[,"reg_age_at_dx"] < 18   #non-adult
cond2 <-  pt_char_df[,"Stage"]  %in% c(0,4) | is.na(pt_char_df[,"Stage"])==T   #stage 0 or 4, or na
cond3 <-  pt_char_df[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015| is.na(pt_char_df[,"Diagnosis_Year"])==T # year before 2004 and > 2015
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
#proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
feature_set_name  <- "CCSandVAL2nd"     #choose from CCSandDM3SPE , CCSandVAL2nd
SBCE_ID_Folder    <- "SBCE" #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
sample_name       <- "All_Samples"  #choose from "All_Samples" , "Samples_HasAtLeastOneCodeGrpFeature"
if ((SBCE_ID_Folder == "SBCE") | (SBCE_ID_Folder == "SBCE_Excluded_DeathPts")){
label_col   <- "y_PRE_OR_POST_2ndEvent"
SBCE_col <- "SBCE"
}else{
label_col   <- "y_PRE_OR_POST_2ndEvent_ExcludedDeath"
SBCE_col <- "SBCE_Excluded_DeathLabel"
}
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
cond1 <- pt_char_df[,"reg_age_at_dx"] < 18   #non-adult
cond2 <-  pt_char_df[,"Stage"]  %in% c(0,4) | is.na(pt_char_df[,"Stage"])==T   #stage 0 or 4, or na
cond3 <-  pt_char_df[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015| is.na(pt_char_df[,"Diagnosis_Year"])==T # year before 2004 and > 2015
cond3 <-  pt_char_df[,"Diagnosis_Year"]<2004 | pt_char_df[,"Diagnosis_Year"]>2015| is.na(pt_char_df[,"Diagnosis_Year"])==T # year before 2004 and > 2015
exclusion1_indxes <- which(cond1 | cond2 |cond3)
pt_char_df <- pt_char_df[-exclusion1_indxes,]
table(pt_char_df$Comb_SEERSummStg)
# (SEERSummStg2000 stages  != 1,2,3,4,5) #In-situ 0; Localized 1; Regional 2-5; Distant 7
exclusion2_indxes <- which(pt_char_df[,"Comb_SEERSummStg"]  %in% c(0,7,9) | is.na(pt_char_df[,"Comb_SEERSummStg"])==T) #3382
print(length(exclusion2_indxes))
pt_char_df <- pt_char_df[-exclusion2_indxes,]
exclusion3_indxes <- which(pt_char_df[,"HasEnoughMonths_InWindow"] ==0 |
is.na(pt_char_df[,"HasEnoughMonths_InWindow"])==T) #999
print(length(exclusion3_indxes))
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/20_InclusionExclusion.R")
table(pt_char_df$SBCE)
