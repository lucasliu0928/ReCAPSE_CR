setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Code_Extract_rawData/UK_Extract")
data_d <- read.csv("/Volumes/LJL_ExtPro/Data/AKI_Data/UTSW_Data/UTSW_RawDynamic_Data/UTSW_Data_120921/req1242_hosp_dx_prior_2016.csv",stringsAsFactors = F)
data_d$RECORDED_DATE
table(data_d$RECORDED_DATE)
unique(data_d$RECORDED_DATE)
check <- table(data_d$RECORDED_DATE)
check <- sa.datam.frame(table(data_d$RECORDED_DATE))
check <- as.data.frame(table(data_d$RECORDED_DATE))
View(check)
View(data_d)
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
library(lubridate)
library(openxlsx)
proj_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/UTSW_Data/"
data_dir     <- paste0( proj_dir, "UTSW_RawDynamic_Data/")
new_data_dir <- paste0( proj_dir, "UTSW_RawDynamic_Data/UTSW_Data_092321/")
new_data_dir2 <- paste0( proj_dir, "UTSW_RawDynamic_Data/UTSW_Data_120921/")
new_data_dir3 <- paste0( proj_dir, "UTSW_RawDynamic_Data/UTSW_Data_122921/")
#######################################################################################
#New diagnoiss data  12/07
#######################################################################################
new_df3 <- read.csv(paste0(new_data_dir3,"req1242_hosp_dx_prior_2016.csv"),stringsAsFactors = F)
colnames(new_df3)
#Date:
min(dmy_hms(new_df3$RECORDED_DATE),na.rm = T) #1700-01-01 UTC ?? Error?
max(dmy_hms(new_df3$RECORDED_DATE),na.rm = T) #2015-12-31 UTC
View(new_df3)
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
#onHPC
data_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
outdir <- "/recapse/intermediate_data/5_Enrollment_And_Prediction_Months/"
#local
data_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/Testing data for UH3 - Dec 16 2020/"
outdir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/5_Enrollment_And_Prediction_Months"
#########################################################################################################
#I. Get Medicaid
#mon1-mon240 (from 1/2000-12/2019)
#########################################################################################################
medicaid_enrollment_df <- read.csv(paste0(data_dir,"kcr_medicaid_enroll_fb0015.csv"),stringsAsFactors = F)
#1. Get Month Columns
month_col_names <- paste0("mon", seq(1, 240,1))
month_col_indexes <- which(colnames(medicaid_enrollment_df) %in% month_col_names)
#2. Convert Month column names from mon1-mon240 to (1/2000-12/2019)
medicaid_enrollment_df <- convert_intCol_toDate(medicaid_enrollment_df,month_col_indexes, my("1/2000"),my("12/2019"), "1 mon")
#3. remove all NA rows (All Month columns)
medicaid_enrollment_df <- medicaid_enrollment_df[complete.cases(medicaid_enrollment_df[ ,month_col_indexes]),]
#4. Get IDs
Medicaid_IDs <- unique(medicaid_enrollment_df[,"study_id"])
length(Medicaid_IDs) #13902
#########################################################################################################
#II. Get Medicare
#Mon1-Mon324 (1/1991-12/2017)
#GHO1-GHO324 (HMO enrollment indicator)
#########################################################################################################
Medicare_enrollment_df <- read.csv(paste0(data_dir,"kcr_medicare_enroll_fb0015.csv"),stringsAsFactors = F)
#1. Remove GHO cols
Medicare_enrollment_df <- Medicare_enrollment_df[, -which(grepl("GHO",colnames(Medicare_enrollment_df)) == T)]
#2.reorder ID column to be the 1st
Medicare_enrollment_df <- relocate(Medicare_enrollment_df,"study_id")
#3. Get Month Columns
month_col_names <- paste0("MON", seq(1, 324,1))
month_col_indexes <- which(colnames(Medicare_enrollment_df) %in% month_col_names)
#4. Convert Month column names from Mon1-Mon324  to (1/1991-12/2017)
Medicare_enrollment_df <- convert_intCol_toDate(Medicare_enrollment_df,month_col_indexes, my("1/1991"),my("12/2017"), "1 mon")
#5. remove all NA rows (All Month columns)
Medicare_enrollment_df <- Medicare_enrollment_df[complete.cases(Medicare_enrollment_df[ , month_col_indexes]),]
#6.Recode enrollent 1,2,3 to 1 as enrolled
for (j in 1:length(month_col_indexes)){
curr_col_idx <- month_col_indexes[j]
Medicare_enrollment_df[which(Medicare_enrollment_df[,curr_col_idx] > 1),curr_col_idx] <- 1
}
#6. Get IDs
Medicare_IDs <- unique(Medicare_enrollment_df[,"study_id"])
length(Medicare_IDs) #33446
#########################################################################################################
#1. Get Enrollment month  (the month date where enrollment = 1)
#########################################################################################################
analysis_Ids <- sort(unique(c(Medicaid_IDs,Medicare_IDs))) #37469
enrollment_months_list <- list(NA)
for (i in 1:length(analysis_Ids)){
if (i %% 1000 == 0){print(i)}
curr_id <- analysis_Ids[i]
medicaid_idx <- which(medicaid_enrollment_df[,"study_id"] == curr_id)
medicare_idx <- which(Medicare_enrollment_df[,"study_id"] == curr_id)
#Medicaid enrollment
if (length(medicaid_idx) > 0 ){
curr_medicaid_enroll_df <- medicaid_enrollment_df[medicaid_idx,3:242]
enroll_idx <- which(curr_medicaid_enroll_df ==1)
if (length(enroll_idx) >0){ #if any enroll
curr_enroll_month1 <- colnames(curr_medicaid_enroll_df)[enroll_idx]
}else{
curr_enroll_month1 <- NA
}
}else{
curr_enroll_month1 <- NA
}
#Medicare enrollment
if (length(medicare_idx) > 0 ){
curr_medicare_enroll_df <- Medicare_enrollment_df[medicare_idx,2:325]
enroll_idx2 <- which(curr_medicare_enroll_df ==1)
if (length(enroll_idx2) >0){#if any enroll
curr_enroll_month2 <- colnames(curr_medicare_enroll_df)[enroll_idx2]
}else{
curr_enroll_month2 <- NA
}
}else{
curr_enroll_month2 <- NA
}
curr_all_enroll_months <- unique(c(curr_enroll_month1,curr_enroll_month2))
#remove NA months
na_idxes <- which(is.na(curr_all_enroll_months) == T)
if (length(na_idxes) > 0){
curr_all_enroll_months <- curr_all_enroll_months[-na_idxes]
}
if (length(curr_all_enroll_months)>0){
enrollment_months_list[[i]] <- data.frame("study_id" = curr_id, "Enrolled_Month"= curr_all_enroll_months)
}else{
enrollment_months_list[[i]] <- data.frame("study_id" = curr_id, "Enrolled_Month" = NA)
}
}
all_enrollment_months_df <- do.call(rbind, enrollment_months_list)
View(all_enrollment_months_df)
outdir
write.xlsx(all_enrollment_months_df,paste0(outdir,"5_enrollment_Months2.xlsx"))
outdir
source("Recapse_Ultility.R")
#onHPC
data_dir <- "/recapse/intermediate_data/4_RecurrDates_Outcome_Info/"
outdir <- "/recapse/intermediate_data/5_Enrollment_And_Prediction_Months/"
#local
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/4_RecurrDates_Outcome_Info/"
outdir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/5_Enrollment_And_Prediction_Months/"
#########################################################################################################
#1.Load pateint event type and date data
#########################################################################################################
All_event_df <- read.xlsx(paste0(data_dir,"4_All_event_df.xlsx"),sheet = 1)
#1.Get number of IDs in event type files
event_type_IDs <- unique(All_event_df$study_id) # 40324
#########################################################################################################
#2. Load enrollment month
#########################################################################################################
enrollment_df <- read.xlsx(paste0(outdir,"5_enrollment_Months.xlsx"),sheet = 1)
enrolmment_IDs <- unique(enrollment_df$study_id) #37149
#########################################################################################################
#3. only process Ids in both event type data and enrollemnt
#########################################################################################################
analysis_Ids <- unique(intersect(enrolmment_IDs,event_type_IDs)) #31262
analysis_Ids <- sort(analysis_Ids)
#########################################################################################################
#IV Get the prediction window as the predefined starting and ending point
#1. Start point : the diagnosis date of the first primary breast cancer + 6 months
#2. End point:  2.1 without an SBCE :  end of enrollment
#               2.2 with an SBCE, but no third event: end of enrollment
#               2.3 with an SBCE,
#                   the 1st subsequent event is a non-breast primary cancer: 3 months before the registry-based diagnosis date or,
#                   the 1st subsequent event is a breast cancer event:
#                   (Recurrence or diagnose of breast cancer or 1st primary BC death):  1 month before the subsequent event.
#########################################################################################################
prediction_month_df <- as.data.frame(matrix(NA, nrow = length(analysis_Ids), ncol = 7))
colnames(prediction_month_df) <- c("study_id" , "Prediction_Start","Prediction_End","First_Primary_Start","Date_3rd_Event","Enrollment_Start","Enrollment_End")
for (i in 1:length(analysis_Ids)){
if (i %% 1000 == 0){
print(i)
}
curr_id <- analysis_Ids[i]
#current enrollment
curr_enroll_df <- enrollment_df[which(enrollment_df[,"study_id"] == curr_id),]
curr_enroll_months <- curr_enroll_df[,"Enrolled_Month"]
last_enroll_mon  <- max(ymd(curr_enroll_months))
first_enroll_mon <- min(ymd(curr_enroll_months))
#########curr event df
curr_event_df       <- All_event_df[which(All_event_df[,"study_id"] == curr_id),]
curr_1stPBC_date    <- mdy(curr_event_df[,"Date_1st_Event"])
curr_3rd_event_date <- mdy(curr_event_df[,"Date_3rd_Event"])
#Start point
curr_start <- curr_1stPBC_date + days(6*30)  #in the case of + 6months returns NA
#End point
if (is.na(curr_event_df[,"Type_2nd_Event"]) == T){ #if no 2nd event :  end of recorded claims
curr_end <- last_enroll_mon
}else {#if With 2nd event
if (is.na(curr_3rd_event_date) == T){ #if no third event: end of recorded claims
curr_end <- last_enroll_mon
}else{#if with 3rd event
curr_3rd_event_type <- curr_event_df[,"Type_3rd_Event"] #get 3rd event type
#3rd event is a breast cancer event (Recurrence or diagnose of breast cancer or death):  1 month before the first subsequent breast cancer event.
if (grepl("Primary|1Recur|Death",curr_3rd_event_type)==T){ #due to merging effect, as long as it contains primary/1Recur, it counts, it is possible that type = "Priamry$$$Other"
curr_end <- curr_3rd_event_date - days(1*30)
}else if (curr_3rd_event_type == "Other"){# due to merging effect, consider exact match in this case (Only has other)
#3rd event is a non-breast primary cancer: 3 months before the registry-based diagnosis date or,
curr_end <- curr_3rd_event_date - days(3*30)
}
}
}
prediction_month_df[i,"study_id"] <- curr_id
prediction_month_df[i,"Prediction_Start"] <- as.character(curr_start)
prediction_month_df[i,"Prediction_End"] <- as.character(curr_end)
prediction_month_df[i,"First_Primary_Start"] <- as.character(curr_1stPBC_date)
prediction_month_df[i,"Date_3rd_Event"] <- as.character(curr_3rd_event_date)
prediction_month_df[i,"Enrollment_Start"] <- as.character(first_enroll_mon)
prediction_month_df[i,"Enrollment_End"]   <- as.character(last_enroll_mon)
}
#########################################################################################################
#1.Exclude patient has enrollment end before prediction start
#########################################################################################################
exclude_idxes1 <- which(ymd(prediction_month_df[,"Enrollment_End"]) <= ymd(prediction_month_df[,"Prediction_Start"]))
length(exclude_idxes1)
updated_prediction_month_df <- prediction_month_df[-exclude_idxes1,] #-1105
#########################################################################################################
#2.Exclude patient has enrollment start after prediction end
#########################################################################################################
exclude_idxes2 <- which(ymd(updated_prediction_month_df[,"Enrollment_Start"]) >= ymd(updated_prediction_month_df[,"Prediction_End"]))
updated_prediction_month_df <- updated_prediction_month_df[-exclude_idxes2,] #-134
length(exclude_idxes2)
#########################################################################################################
#3.Exclude patient has prediction end before prediction start (because it is 1st bc date + 6 month is after 3rd event -3 month)
#########################################################################################################
updated_prediction_month_df$Prediction_Duration_inDays <- difftime(ymd(updated_prediction_month_df[,"Prediction_End"]) ,
ymd(updated_prediction_month_df[,"Prediction_Start"]), units = "days")
#Exclude prediction duration < 0 days
exclude_indxes <- which(updated_prediction_month_df$Prediction_Duration_inDays <= 0 )
length(exclude_indxes)
#Exclude prediction duration < 180 days (6 month) #(cuz Later will further exclude no claims within 3month before and after SBCE or 6 month for no SBCE patient)
exclude_indxes <- which(updated_prediction_month_df[,"Prediction_Duration_inDays"] < 180)
updated_prediction_month_df <- updated_prediction_month_df[-exclude_indxes,]
length(exclude_indxes)
130+61+27
source("Recapse_Ultility.R")
#This script get patient level group count for Final Id (All enrolls) in valid month
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
#proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
data_dir2  <- paste0(proj_dir, "0_Codes/Grouped_CleanUniqueCodes/")
data_dir_CCSdiag  <- paste0(proj_dir, "10B_CCSDiagFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_CCSproc  <- paste0(proj_dir, "10C_CCSProcFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_DM3spe   <- paste0(proj_dir, "10D_DM3SPEFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_DM3gen   <- paste0(proj_dir, "10E_DM3GENFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_SGNN     <- paste0(proj_dir, "10F_ShortGNNFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
outdir   <- paste0(proj_dir, "10G_Counts_UniqueGrp_PtsLevel/WithPossibleMonthsHasNoCodes/")
################################################################################
#'Load pts SBCElabel
################################################################################
PTS_char_df <- read.xlsx(paste0(data_dir1,"9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
source("Recapse_Ultility.R")
#This script get patient level group count for Final Id (All enrolls) in valid month
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
data_dir2  <- paste0(proj_dir, "0_Codes/Grouped_CleanUniqueCodes/")
data_dir_CCSdiag  <- paste0(proj_dir, "10B_CCSDiagFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_CCSproc  <- paste0(proj_dir, "10C_CCSProcFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_DM3spe   <- paste0(proj_dir, "10D_DM3SPEFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_DM3gen   <- paste0(proj_dir, "10E_DM3GENFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_SGNN     <- paste0(proj_dir, "10F_ShortGNNFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
outdir   <- paste0(proj_dir, "10G_Counts_UniqueGrp_PtsLevel/WithPossibleMonthsHasNoCodes/")
################################################################################
#'Load pts SBCElabel
################################################################################
PTS_char_df <- read.xlsx(paste0(data_dir1,"9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
218*3
654+218+23
61-2
59+654+218
61-3
source("Recapse_Ultility.R")
compute_sp_label_ratio <- function(in_data){
label_tb <- table(in_data[,"Label"])
ct_total <- nrow(in_data)
ct_pre   <- label_tb["Pre"]
ct_post  <- label_tb["Post"]
neg_post_ratio <- round(ct_pre/ct_post,10)
ct_tb <- data.frame("Total" = ct_total,"Pre"=ct_pre,"Post"=ct_post,"Ratio"=neg_post_ratio)
rownames(ct_tb) <- NULL
return(ct_tb)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir  <- paste0(proj_dir, "12B_TopPCAFeature_ModelReady_TrainData/WithPossibleMonthsHasNoCodes/")
outdir   <- paste0(proj_dir, "12D_ExclusionSamples/WithPossibleMonthsHasNoCodes/Train/")
########################################################################################################
#1. Load all pts model data with four top features
########################################################################################################
#1A. Load data
load(file = paste0(data_dir, "4F_ModelReady_TrainData.rda"))
#2B. Orginal NEG POS ratio
compute_sp_label_ratio(model_data_4f)
########################################################################################################
#2.Find samples < threshold OR > threshold by Most contributed feature by examing boxplot
#  Compute neg:pos ratio for each feature
########################################################################################################
#2A. cumul_ratio_CCS_PROC_202
sample1_idxes <- which(model_data_4f[,"cumul_ratio_CCS_PROC_202"] < 0)
sample1_data  <- model_data_4f[sample1_idxes,]
compute_sp_label_ratio(sample1_data)
afterRemoval_data <- model_data_4f[-sample1_idxes,]
compute_sp_label_ratio(afterRemoval_data)
#2B. cumul_ratio_CCS_PROC_227
threshold_list <- seq(2,7.5,0.5)
table_list <- list()
for (i in 1:length(threshold_list)){
curr_th <- threshold_list[i]
sample1_idxes <- which(model_data_4f[,"cumul_ratio_CCS_PROC_227"] > curr_th)
sample1_data  <- model_data_4f[sample1_idxes,]
sp_res <- compute_sp_label_ratio(sample1_data)
afterRemoval_data <- model_data_4f[-sample1_idxes,]
after_res <- compute_sp_label_ratio(afterRemoval_data)
final_res <- rbind(sp_res,after_res)
rownames(final_res) <-c(paste0("Sample"," > Threshold ",curr_th),"After Removal")
table_list[[i]] <- final_res
}
all_table <- do.call(rbind,table_list)
View(all_table)
1960+199+109+179
369/2233
78/2233
199/7354
0.0270601*100
1960/7354
109/7354
179/7354
80/2233*100
79/2233
2382/7354
574/2233
7354-5395
7354-2382
7354-1960
7354-1960
1959/7354
