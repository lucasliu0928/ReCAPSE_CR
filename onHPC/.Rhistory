for (i in 1:nrow(indata)){
cur_pt_id <- indata[i,"study_id"]
indx <- which(sbce_df[,"study_id"] == cur_pt_id)
indata[i,"SBCE"] <- sbce_df[indx,"SBCE"]
}
i
indata <- all_train_df
sbce_df <- pt_char_df
indata[,"SBCE"] <- NA
for (i in 1:nrow(indata)){
if (i %% 1000 == 0){print(i)}
cur_pt_id <- indata[i,"study_id"]
indx <- which(sbce_df[,"study_id"] == cur_pt_id)
indata[i,"SBCE"] <- sbce_df[indx,"SBCE"]
}
match(sbce_df[,"study_id"], indata[,"study_id"])
match(indata[,"study_id"],sbce_df[,"study_id"])
matched_indx <- match(indata[,"study_id"],sbce_df[,"study_id"])
matched_indxes <- match(indata[,"study_id"],sbce_df[,"study_id"])
sbce_df[matched_indxes,"study_id"]
sbce_df[matched_indxes,"SBCE"]
indata[,"SBCE"] <- sbce_df[matched_indxes,"SBCE"]
source("Recapse_Ultility.R")
add_sbce_label_to_sample_func <- function(indata,sbce_df){
matched_indxes <- match(indata[,"study_id"],sbce_df[,"study_id"])
indata[,"SBCE"] <- sbce_df[matched_indxes,"SBCE"]
return(indata)
}
load_obsSample_IDs <- function(indir, train_or_test_set,sbce_df){
obv_neg <- read.csv(paste0(indir,"ObviousNeg_Samples_",train_or_test_set,".csv"),stringsAsFactors = F)
obv_neg[,"OBV_TYPE"] <- "OBV_NEG"
obv_pos <- read.csv(paste0(indir,"ObviousPos_Samples_",train_or_test_set,".csv"),stringsAsFactors = F)
obv_pos[,"OBV_TYPE"] <- "OBV_POS"
NON_obv<- read.csv(paste0(indir,"NON_Obvious_Samples_",train_or_test_set,".csv"),stringsAsFactors = F)
NON_obv[,"OBV_TYPE"] <- "OBV_NON"
all_df <- rbind(obv_neg,obv_pos,NON_obv)
all_df[,"TRAIN_OR_TEST"] <- train_or_test_set
#rename col
colnames(all_df)[which(colnames(all_df) == "Label")] <- "Label_PreOrPost"
#Remove redundant col
all_df <- all_df[,-which(colnames(all_df)=="X")]
#Get unique patient ID
unique_pt_ids <- unique(all_df[,"study_id"])
#get unique sample ID
unique_sample_ids <- unique(all_df[,"sample_id"])
#Add SBCE label to the sample df
sbce_df <- sbce_df[which(sbce_df[,"study_id"] %in% unique_pt_ids),]
all_df <- add_sbce_label_to_sample_func(all_df,sbce_df)
return(list(all_df,unique_pt_ids,unique_sample_ids))
}
load_pt_char_func <-function(indir, analysis_ids){
PTs_Char_df <- read.xlsx(paste0(indir,"/8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
PTs_Char_df[,"study_id"] <- paste0("ID",PTs_Char_df[,"study_id"])
Final_PTs_Char_df <- PTs_Char_df[which(PTs_Char_df[,"study_id"] %in% analysis_ids),]
return(Final_PTs_Char_df)
}
compute_sp_label_ratio <- function(in_data,label_col){
label_tb <- table(in_data[,label_col])
ct_total <- nrow(in_data)
ct_pre   <- label_tb["0"]
ct_post  <- label_tb["1"]
neg_post_ratio <- round(ct_pre/ct_post,0)
ct_tb <- data.frame("Total" = ct_total,"NEG"=ct_pre,"POS"=ct_post,"Ratio"=neg_post_ratio)
rownames(ct_tb) <- NULL
return(ct_tb)
}
compute_mean_sd_func <- function(data_col,round_digit){
mean_val <- round(mean(data_col),round_digit)
sd_val <-  round(sd(data_col),round_digit)
comb_val <- paste0(mean_val," \u00b1 ",sd_val)
return(comb_val)
}
compute_n_perc_func <- function(data_col,round_digit){
# data_col <- curr_values
total_n <- length(data_col)
count_tb <- table(data_col)
count_tb_perc <- round(count_tb/total_n*100,round_digit)
count_cato_names <- names(count_tb)
count_final <-""
count_final <- paste0(count_cato_names,": ", count_tb, " (",count_tb_perc,")", collapse = "\n")
count_final <- paste0(count_final,"\n Total(NA excluded):",total_n)
return(count_final)
}
compute_median_p25andp75_func <- function(data_col,round_digit){
med_val <- round(median(data_col),round_digit)
quant_res <- quantile(data_col,c(0.25,0.75))
p25 <- round(quant_res[1],round_digit)
p75 <- round(quant_res[2],round_digit)
comb_val <- paste0(med_val," [",p25,"-",p75,"]")
return(comb_val)
}
compute_stats_func <- function(input_df,cohort_name,ordered_parameters,n_perc_variables_list){
Final_table <- as.data.frame(matrix(NA, nrow = length(ordered_parameters), ncol = 3))
colnames(Final_table) <- c("Var","Stats","Missingness")
Final_table$Var <- ordered_parameters
for (i in 1:length(ordered_parameters)){
curr_f <- ordered_parameters[i]
#get index column of current feature
curr_colindex <- which(colnames(input_df) == curr_f)
if (length(curr_colindex) == 0){ #if feature is not in curret data input
Final_table[i,2] <- NA
}else{
#Get current values
curr_values <- input_df[,curr_f]
#report and remove NAs
na_indexes <- which(is.na(curr_values) == T)
n_NA <-  length(na_indexes)
prec_NA <- round((n_NA/length(curr_values)*100),2)
Final_table[i,3] <- paste0(n_NA," (",prec_NA,"%)")
if(n_NA > 0){
curr_values <- curr_values[-na_indexes]
}
if (curr_f %in% n_perc_variables_list){ #compte n perc
Final_table[i,2] <- compute_n_perc_func(curr_values,2)
}else{
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}
}
}
colnames(Final_table) <- paste0(cohort_name,"_",colnames(Final_table))
return(Final_table)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
data_dir2        <- paste0(proj_dir,"12E_OBVandNONOBV_SamplesIDs/WithPossibleMonthsHasNoCodes/")
newout <- "18_Discrip_Statistics/"
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1,all_analysis_pt_ids)
################################################################################
#1.Load all train and test IDs with flag for obv pos/neg or non obv
################################################################################
train_res <- load_obsSample_IDs(data_dir2,"Train",pt_char_df)
all_train_df <- train_res[[1]]
all_train_pt_ids <- train_res[[2]] #14592
all_train_sp_ids <- train_res[[3]] #999117
test_res <- load_obsSample_IDs(data_dir2,"Test",pt_char_df)
all_test_df <- test_res[[1]]
all_test_pt_ids <- test_res[[2]] #3647
all_test_sp_ids <- test_res[[3]] #248732
all_analysis_pt_ids <-c(all_train_pt_ids,all_test_pt_ids) #18239
all_analysis_sp_ids <-c(all_train_sp_ids,all_test_sp_ids) #1247849
################################################################################
#1.Load all train and test IDs with flag for obv pos/neg or non obv
################################################################################
train_res <- load_obsSample_IDs(data_dir2,"Train",pt_char_df)
pt_char_df <- load_pt_char_func(data_dir1,all_analysis_pt_ids)
################################################################################
#1.Load all train and test IDs with flag for obv pos/neg or non obv
################################################################################
train_res <- load_obsSample_IDs(data_dir2,"Train",pt_char_df)
load_pt_char_func <-function(indir){
PTs_Char_df <- read.xlsx(paste0(indir,"/8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
PTs_Char_df[,"study_id"] <- paste0("ID",PTs_Char_df[,"study_id"])
return(Final_PTs_Char_df)
}
source("Recapse_Ultility.R")
add_sbce_label_to_sample_func <- function(indata,sbce_df){
matched_indxes <- match(indata[,"study_id"],sbce_df[,"study_id"])
indata[,"SBCE"] <- sbce_df[matched_indxes,"SBCE"]
return(indata)
}
load_obsSample_IDs <- function(indir, train_or_test_set,sbce_df){
obv_neg <- read.csv(paste0(indir,"ObviousNeg_Samples_",train_or_test_set,".csv"),stringsAsFactors = F)
obv_neg[,"OBV_TYPE"] <- "OBV_NEG"
obv_pos <- read.csv(paste0(indir,"ObviousPos_Samples_",train_or_test_set,".csv"),stringsAsFactors = F)
obv_pos[,"OBV_TYPE"] <- "OBV_POS"
NON_obv<- read.csv(paste0(indir,"NON_Obvious_Samples_",train_or_test_set,".csv"),stringsAsFactors = F)
NON_obv[,"OBV_TYPE"] <- "OBV_NON"
all_df <- rbind(obv_neg,obv_pos,NON_obv)
all_df[,"TRAIN_OR_TEST"] <- train_or_test_set
#rename col
colnames(all_df)[which(colnames(all_df) == "Label")] <- "Label_PreOrPost"
#Remove redundant col
all_df <- all_df[,-which(colnames(all_df)=="X")]
#Get unique patient ID
unique_pt_ids <- unique(all_df[,"study_id"])
#get unique sample ID
unique_sample_ids <- unique(all_df[,"sample_id"])
#Add SBCE label to the sample df
sbce_df <- sbce_df[which(sbce_df[,"study_id"] %in% unique_pt_ids),]
all_df <- add_sbce_label_to_sample_func(all_df,sbce_df)
return(list(all_df,unique_pt_ids,unique_sample_ids))
}
load_pt_char_func <-function(indir){
PTs_Char_df <- read.xlsx(paste0(indir,"/8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
PTs_Char_df[,"study_id"] <- paste0("ID",PTs_Char_df[,"study_id"])
return(Final_PTs_Char_df)
}
compute_sp_label_ratio <- function(in_data,label_col){
label_tb <- table(in_data[,label_col])
ct_total <- nrow(in_data)
ct_pre   <- label_tb["0"]
ct_post  <- label_tb["1"]
neg_post_ratio <- round(ct_pre/ct_post,0)
ct_tb <- data.frame("Total" = ct_total,"NEG"=ct_pre,"POS"=ct_post,"Ratio"=neg_post_ratio)
rownames(ct_tb) <- NULL
return(ct_tb)
}
compute_mean_sd_func <- function(data_col,round_digit){
mean_val <- round(mean(data_col),round_digit)
sd_val <-  round(sd(data_col),round_digit)
comb_val <- paste0(mean_val," \u00b1 ",sd_val)
return(comb_val)
}
compute_n_perc_func <- function(data_col,round_digit){
# data_col <- curr_values
total_n <- length(data_col)
count_tb <- table(data_col)
count_tb_perc <- round(count_tb/total_n*100,round_digit)
count_cato_names <- names(count_tb)
count_final <-""
count_final <- paste0(count_cato_names,": ", count_tb, " (",count_tb_perc,")", collapse = "\n")
count_final <- paste0(count_final,"\n Total(NA excluded):",total_n)
return(count_final)
}
compute_median_p25andp75_func <- function(data_col,round_digit){
med_val <- round(median(data_col),round_digit)
quant_res <- quantile(data_col,c(0.25,0.75))
p25 <- round(quant_res[1],round_digit)
p75 <- round(quant_res[2],round_digit)
comb_val <- paste0(med_val," [",p25,"-",p75,"]")
return(comb_val)
}
compute_stats_func <- function(input_df,cohort_name,ordered_parameters,n_perc_variables_list){
Final_table <- as.data.frame(matrix(NA, nrow = length(ordered_parameters), ncol = 3))
colnames(Final_table) <- c("Var","Stats","Missingness")
Final_table$Var <- ordered_parameters
for (i in 1:length(ordered_parameters)){
curr_f <- ordered_parameters[i]
#get index column of current feature
curr_colindex <- which(colnames(input_df) == curr_f)
if (length(curr_colindex) == 0){ #if feature is not in curret data input
Final_table[i,2] <- NA
}else{
#Get current values
curr_values <- input_df[,curr_f]
#report and remove NAs
na_indexes <- which(is.na(curr_values) == T)
n_NA <-  length(na_indexes)
prec_NA <- round((n_NA/length(curr_values)*100),2)
Final_table[i,3] <- paste0(n_NA," (",prec_NA,"%)")
if(n_NA > 0){
curr_values <- curr_values[-na_indexes]
}
if (curr_f %in% n_perc_variables_list){ #compte n perc
Final_table[i,2] <- compute_n_perc_func(curr_values,2)
}else{
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}
}
}
colnames(Final_table) <- paste0(cohort_name,"_",colnames(Final_table))
return(Final_table)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
data_dir2        <- paste0(proj_dir,"12E_OBVandNONOBV_SamplesIDs/WithPossibleMonthsHasNoCodes/")
newout <- "18_Discrip_Statistics/"
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
################################################################################
#1.Load all train and test IDs with flag for obv pos/neg or non obv
################################################################################
train_res <- load_obsSample_IDs(data_dir2,"Train",pt_char_df)
all_train_df <- train_res[[1]]
all_train_pt_ids <- train_res[[2]] #14592
all_train_sp_ids <- train_res[[3]] #999117
test_res <- load_obsSample_IDs(data_dir2,"Test",pt_char_df)
all_test_df <- test_res[[1]]
all_test_pt_ids <- test_res[[2]] #3647
all_test_sp_ids <- test_res[[3]] #248732
all_analysis_pt_ids <-c(all_train_pt_ids,all_test_pt_ids) #18239
all_analysis_sp_ids <-c(all_train_sp_ids,all_test_sp_ids) #1247849
################################################################################
#3.Fiter pt char df for anlaysis Ids
################################################################################
pt_char_df <- pt_char_df[which(pt_char_df[,"study_id"] %in% all_analysis_pt_ids),]
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
source("Recapse_Ultility.R")
add_sbce_label_to_sample_func <- function(indata,sbce_df){
matched_indxes <- match(indata[,"study_id"],sbce_df[,"study_id"])
indata[,"SBCE"] <- sbce_df[matched_indxes,"SBCE"]
return(indata)
}
load_obsSample_IDs <- function(indir, train_or_test_set,sbce_df){
obv_neg <- read.csv(paste0(indir,"ObviousNeg_Samples_",train_or_test_set,".csv"),stringsAsFactors = F)
obv_neg[,"OBV_TYPE"] <- "OBV_NEG"
obv_pos <- read.csv(paste0(indir,"ObviousPos_Samples_",train_or_test_set,".csv"),stringsAsFactors = F)
obv_pos[,"OBV_TYPE"] <- "OBV_POS"
NON_obv<- read.csv(paste0(indir,"NON_Obvious_Samples_",train_or_test_set,".csv"),stringsAsFactors = F)
NON_obv[,"OBV_TYPE"] <- "OBV_NON"
all_df <- rbind(obv_neg,obv_pos,NON_obv)
all_df[,"TRAIN_OR_TEST"] <- train_or_test_set
#rename col
colnames(all_df)[which(colnames(all_df) == "Label")] <- "Label_PreOrPost"
#Remove redundant col
all_df <- all_df[,-which(colnames(all_df)=="X")]
#Get unique patient ID
unique_pt_ids <- unique(all_df[,"study_id"])
#get unique sample ID
unique_sample_ids <- unique(all_df[,"sample_id"])
#Add SBCE label to the sample df
sbce_df <- sbce_df[which(sbce_df[,"study_id"] %in% unique_pt_ids),]
all_df <- add_sbce_label_to_sample_func(all_df,sbce_df)
return(list(all_df,unique_pt_ids,unique_sample_ids))
}
load_pt_char_func <-function(indir){
PTs_Char_df <- read.xlsx(paste0(indir,"/8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
PTs_Char_df[,"study_id"] <- paste0("ID",PTs_Char_df[,"study_id"])
return(PTs_Char_df)
}
compute_sp_label_ratio <- function(in_data,label_col){
label_tb <- table(in_data[,label_col])
ct_total <- nrow(in_data)
ct_pre   <- label_tb["0"]
ct_post  <- label_tb["1"]
neg_post_ratio <- round(ct_pre/ct_post,0)
ct_tb <- data.frame("Total" = ct_total,"NEG"=ct_pre,"POS"=ct_post,"Ratio"=neg_post_ratio)
rownames(ct_tb) <- NULL
return(ct_tb)
}
compute_mean_sd_func <- function(data_col,round_digit){
mean_val <- round(mean(data_col),round_digit)
sd_val <-  round(sd(data_col),round_digit)
comb_val <- paste0(mean_val," \u00b1 ",sd_val)
return(comb_val)
}
compute_n_perc_func <- function(data_col,round_digit){
# data_col <- curr_values
total_n <- length(data_col)
count_tb <- table(data_col)
count_tb_perc <- round(count_tb/total_n*100,round_digit)
count_cato_names <- names(count_tb)
count_final <-""
count_final <- paste0(count_cato_names,": ", count_tb, " (",count_tb_perc,")", collapse = "\n")
count_final <- paste0(count_final,"\n Total(NA excluded):",total_n)
return(count_final)
}
compute_median_p25andp75_func <- function(data_col,round_digit){
med_val <- round(median(data_col),round_digit)
quant_res <- quantile(data_col,c(0.25,0.75))
p25 <- round(quant_res[1],round_digit)
p75 <- round(quant_res[2],round_digit)
comb_val <- paste0(med_val," [",p25,"-",p75,"]")
return(comb_val)
}
compute_stats_func <- function(input_df,cohort_name,ordered_parameters,n_perc_variables_list){
Final_table <- as.data.frame(matrix(NA, nrow = length(ordered_parameters), ncol = 3))
colnames(Final_table) <- c("Var","Stats","Missingness")
Final_table$Var <- ordered_parameters
for (i in 1:length(ordered_parameters)){
curr_f <- ordered_parameters[i]
#get index column of current feature
curr_colindex <- which(colnames(input_df) == curr_f)
if (length(curr_colindex) == 0){ #if feature is not in curret data input
Final_table[i,2] <- NA
}else{
#Get current values
curr_values <- input_df[,curr_f]
#report and remove NAs
na_indexes <- which(is.na(curr_values) == T)
n_NA <-  length(na_indexes)
prec_NA <- round((n_NA/length(curr_values)*100),2)
Final_table[i,3] <- paste0(n_NA," (",prec_NA,"%)")
if(n_NA > 0){
curr_values <- curr_values[-na_indexes]
}
if (curr_f %in% n_perc_variables_list){ #compte n perc
Final_table[i,2] <- compute_n_perc_func(curr_values,2)
}else{
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}
}
}
colnames(Final_table) <- paste0(cohort_name,"_",colnames(Final_table))
return(Final_table)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
data_dir2        <- paste0(proj_dir,"12E_OBVandNONOBV_SamplesIDs/WithPossibleMonthsHasNoCodes/")
newout <- "18_Discrip_Statistics/"
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
################################################################################
#1.Load all train and test IDs with flag for obv pos/neg or non obv
################################################################################
train_res <- load_obsSample_IDs(data_dir2,"Train",pt_char_df)
all_train_df <- train_res[[1]]
all_train_pt_ids <- train_res[[2]] #14592
all_train_sp_ids <- train_res[[3]] #999117
test_res <- load_obsSample_IDs(data_dir2,"Test",pt_char_df)
all_test_df <- test_res[[1]]
all_test_pt_ids <- test_res[[2]] #3647
all_test_sp_ids <- test_res[[3]] #248732
all_analysis_pt_ids <-c(all_train_pt_ids,all_test_pt_ids) #18239
all_analysis_sp_ids <-c(all_train_sp_ids,all_test_sp_ids) #1247849
################################################################################
#3.Fiter pt char df for anlaysis Ids
################################################################################
pt_char_df <- pt_char_df[which(pt_char_df[,"study_id"] %in% all_analysis_pt_ids),]
all_train_df$SBCE
table(all_train_df$SBCE)
View(all_train_df)
table(all_train_df$SBCE)
table(all_train_df$Label_PreOrPost)
indata <- all_train_df
check_df <- indata[duplicated(indata[,"study_id"])]
check_df <- indata[~duplicated(indata[,"study_id"]),]
check_df <- indata[!duplicated(indata[,"study_id"]),]
table(check_df$SBCE)
#Compute pre/post number of samples and ratio
table(all_train_df$Label_PreOrPost)
#Compute pre/post number of samples and ratio
table(all_train_df[,"Label_PreOrPost"])
#Compute pre/post number of samples and ratio
table(all_train_df[,"Label_PreOrPost"])["Post"]
table(all_train_df[,"Label_PreOrPost"])["Pre"]
n_pre/n_post
#Compute pre/post number of samples and ratio
n_post <- table(all_train_df[,"Label_PreOrPost"])["Post"]
n_pre  <- table(all_train_df[,"Label_PreOrPost"])["Pre"]
n_pre/n_post
pre_to_post_ratio <- round(n_pre/n_post)
pre_to_post_ratio
#Compute pre/post number of samples and ratio
n_post <- as.numeric(table(all_train_df[,"Label_PreOrPost"])["Post"])
n_pre  <- as.numeric(table(all_train_df[,"Label_PreOrPost"])["Pre"])
pre_to_post_ratio <- round(n_pre/n_post)
pre_to_post_ratio
pre_to_post_ratio <- paste0(round(n_pre/n_post),":",1)
pre_to_post_ratio
#Compute number of sbce/non-sbce patients
indata_unique_pt_ids <- indata[!duplicated(indata[,"study_id"]),] #For each pateint ID, only keep one SBCE label, ignore the samples
indata_unique_pt_ids$Label_PreOrPost
#Compute number of sbce/non-sbce patients
indata_unique_pt_ids <- indata[!duplicated(indata[,"study_id"]),] #For each pateint ID, only keep one SBCE label, ignore the samples
n_SBCE0  <- as.numeric(table(indata_unique_pt_ids[,"SBCE"])["Post"])
n_SBCE1  <- as.numeric(table(indata_unique_pt_ids[,"SBCE"])["Pre"])
SBCE0_to_SBCE1_ratio <- paste0(round(n_SBCE0/n_SBCE1),":",1)
SBCE0_to_SBCE1_ratio
n_SBCE0  <- as.numeric(table(indata_unique_pt_ids[,"SBCE"])[0])
n_SBCE1  <- as.numeric(table(indata_unique_pt_ids[,"SBCE"])[1])
SBCE0_to_SBCE1_ratio <- paste0(round(n_SBCE0/n_SBCE1),":",1)
SBCE0_to_SBCE1_ratio
n_SBCE0
table(indata_unique_pt_ids[,"SBCE"])
indata_unique_pt_ids <- indata[!duplicated(indata[,"study_id"]),] #For each pateint ID, only keep one SBCE label, ignore the samples
n_SBCE0  <- as.numeric(table(indata_unique_pt_ids[,"SBCE"])["0"])
n_SBCE1  <- as.numeric(table(indata_unique_pt_ids[,"SBCE"])["1"])
SBCE0_to_SBCE1_ratio <- paste0(round(n_SBCE0/n_SBCE1),":",1)
SBCE0_to_SBCE1_ratio
counts_df <- as.data.frame(cbind(n_pre,n_post,pre_to_post_ratio))
counts_df
counts_df <- as.data.frame(cbind(n_pre,n_post,pre_to_post_ratio,
n_SBCE0,n_SBCE1,SBCE0_to_SBCE1_ratio))
counts_df
compute_prepost_and_sbcepts_func <- function(indata){
#Compute pre/post number of samples and ratio
n_post <- as.numeric(table(indata[,"Label_PreOrPost"])["Post"])
n_pre  <- as.numeric(table(indata[,"Label_PreOrPost"])["Pre"])
pre_to_post_ratio <- paste0(round(n_pre/n_post),":",1)
#Compute number of sbce/non-sbce patients
indata_unique_pt_ids <- indata[!duplicated(indata[,"study_id"]),] #For each pateint ID, only keep one SBCE label, ignore the samples
n_SBCE0  <- as.numeric(table(indata_unique_pt_ids[,"SBCE"])["0"])
n_SBCE1  <- as.numeric(table(indata_unique_pt_ids[,"SBCE"])["1"])
SBCE0_to_SBCE1_ratio <- paste0(round(n_SBCE0/n_SBCE1),":",1)
counts_df <- as.data.frame(cbind(n_pre,n_post,pre_to_post_ratio,
n_SBCE0,n_SBCE1,SBCE0_to_SBCE1_ratio))
return(counts_df)
}
compute_prepost_and_sbcepts_func(all_train_df)
compute_prepost_and_sbcepts_func(all_train_df)
compute_prepost_and_sbcepts_func(all_train_df[which(all_train_df$OBV_TYPE == "ONV_NEG"),])
compute_prepost_and_sbcepts_func(all_train_df[which(all_train_df$OBV_TYPE == "OBV_NEG"),])
compute_prepost_and_sbcepts_func(all_train_df[which(all_train_df$OBV_TYPE == "OBV_POS"),])
compute_prepost_and_sbcepts_func(all_train_df[which(all_train_df$OBV_TYPE == "OBV_NON"),])
