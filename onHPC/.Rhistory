curr_col <- static_df[,j]
na_indxes <- which(is.na(curr_col)==T)
if (length(na_indxes) > 0){
static_df[na_indxes,j] <- median(static_df[,j],na.rm = T)
}
}
#MAtch ID order
match_order <- match(avg_max_min_df[,"SAMPLE_ID"],static_df[,"SAMPLE_ID"])
comb_df <- cbind(static_df[match_order,-1],avg_max_min_df[,-1])
rownames(comb_df) <- comb_df$SAMPLE_ID
comb_df <- comb_df[,-1]
match_order2 <- match(label_df[,"SAMPLE_ID"],rownames(comb_df))
comb_df_withLabel <- cbind(comb_df,label_df[,c("sample_death_in24h")])
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)] <- "sample_death_in24h"
#########################################################
#Input df, remove duplicated rows
#########################################################
#remove duplicated rows for tSNE and PCA
comb_df_withLabel <- comb_df_withLabel[!duplicated(comb_df_withLabel[,-ncol(comb_df_withLabel)]),]
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
#Run PCA
res.pca <- PCA(input_df, graph = FALSE)
eig.val <- get_eigenvalue(res.pca)
write.csv(eig.val,paste0(outdir,"PCA_Eigenvalues.csv"))
#Perc of explained Variation
p <- fviz_eig(res.pca, ncp = 10, addlabels = TRUE, ylim = c(0, max(eig.val[,2] + eig.val[,2]/5)))
png(paste0(outdir,"PCA_Explained_Var.png"),res = 150,width = 1800,height = 1200)
print(p)
dev.off()
#Get varaible contribution
var <- get_pca_var(res.pca)
var_contribution <- as.data.frame(var$contrib)
write.csv(var_contribution,paste0(outdir,"PCA_Variable_Contribution.csv"))
#plot
p <- fviz_pca_ind(res.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = as.factor(comb_df_withLabel$sample_death_in24h), # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups")
png(paste0(outdir,"PCA_2DPlot.png"),res = 150,width = 1800,height = 1200)
print(p)
dev.off()
#'@TODO
####################################################################################################
#Add weighted sum scores for each sample, based on the contribution of top 7 features on Dim 1
####################################################################################################
top7_features_contribution_df  <- var_contribution[order(var_contribution[,"Dim.1"],decreasing = T)[1:7],]
top7_features                  <- rownames(top7_features_contribution_df)
top7_features_contributions    <- top7_features_contribution_df[,"Dim.1"]
#First get normalized top 7 feature value for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
colnames(normed_data)
colnames(normed_data) <- paste0("Normed",colnames(normed_data))
#First get normalized top 7 feature value for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
colnames(normed_data)
colnames(normed_data) <- paste0("Normed_",colnames(normed_data))
colnames(normed_data)
comb_df_withLabel[,colnames(normed_data)] <- normed_data
normed_data
#First get normalized top 7 feature value for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
normed_data
View(normed_data)
comb_df_withLabel[,top7_features]
norm_minmax
norm_minmax <- function(x){
(x- min(x,na.rm = T)) /(max(x,na.rm = T)-min(x,na.rm = T))
}
#First get normalized top 7 feature value for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
colnames(normed_data) <- paste0("Normed_",colnames(normed_data))
comb_df_withLabel[,colnames(normed_data)] <- normed_data
#Compute weightes sum
comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] <- NA
i <- 1
curr_pt_vals <- comb_df_withLabel[i,top7_feature_names]
curr_pt_vals <- comb_df_withLabel[i,top7_features]
curr_pt_vals
top7_feature_contributions
curr_pt_vals*top7_features_contributions
curr_pt_vals <- comb_df_withLabel[i,paste0("Normed_",top7_features)]
0.53curr_pt_vals
curr_pt_vals
curr_pt_vals*top7_features_contributions
0.1092553  *8.64
0.30674*6.987387185
0.3087526*6.40208
sum(curr_pt_vals*top7_features_contributions)
curr_wss     <- sum(curr_pt_vals*top7_features_contributions) #weighted sum
curr_wss
#Compute weightes sum
comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] <- NA
for (i in 1:nrow(comb_df_withLabel)){
if (i %% 1000 == 0){print(i)}
curr_pt_vals <- comb_df_withLabel[i,paste0("Normed_",top7_features)]
curr_wss     <- sum(curr_pt_vals*top7_features_contributions) #weighted sum
comb_df_withLabel[i,"WeightedSumScore_Dim1Top7Fs"] <- curr_wss
}
colnames(comb_df_withLabel)
wss_df <- comb_df_withLabel[,c(paste0("Normed_",top7_features),"WeightedSumScore_Dim1Top7Fs","sample_death_in24h")]
write.csv(wss_df,paste0(outdir,"WSS_Scores.csv"))
feature_col3 <- "WeightedSumScore_Dim1Top7Fs"
####################################################################################################
#Boxplot most contributed feature
####################################################################################################
outcome_col <- "sample_death_in24h"
feature_col1 <- "MIN_Scr"
feature_col2 <- "AVG_Bicarbonate"
feature_col3 <- "WeightedSumScore_Dim1Top7Fs"
comb_df_withLabel[,outcome_col] <- as.factor(comb_df_withLabel[,outcome_col])
top_fs <- c(feature_col1,feature_col2,feature_col3)
for (i in 1:length(top_fs)){
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
#geom_violin() +
geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Box_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
wss_df <- comb_df_withLabel[,top7_features,
c(paste0("Normed_",top7_features),
"WeightedSumScore_Dim1Top7Fs",
"sample_death_in24h")]
View(wss_df)
wss_df <- comb_df_withLabel[,top7_features,
c(paste0("Normed_",top7_features),
"WeightedSumScore_Dim1Top7Fs",
"sample_death_in24h")]
wss_df <- comb_df_withLabel[, c(top7_features,
paste0("Normed_",top7_features),
"WeightedSumScore_Dim1Top7Fs",
"sample_death_in24h")]
View(wss_df)
write.csv(wss_df,paste0(outdir,"WSS_Scores.csv"))
#'@TODO:
#######################################################################################################
#5. Violin Plot
#######################################################################################################
for (i in 1:length(top_fs)){
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
geom_violin() +
#geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Violin_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
#######################################################################################################
#6. histogram Plot
#######################################################################################################
for (i in 1:length(top_fs)){
if (i %% 10 == 0){print(i)}
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 800)
print(p)
dev.off()
}
####################################################################################################
#Boxplot most contributed feature
####################################################################################################
comb_df_withLabel[,outcome_col] <- as.factor(comb_df_withLabel[,outcome_col])
outcome_col <- "sample_death_in24h"
feature_col1 <- "MIN_Scr"
feature_col2 <- "AVG_Bicarbonate"
feature_col3 <- "WeightedSumScore_Dim1Top7Fs"
top_fs <- c(feature_col1,feature_col2,feature_col3)
for (i in 1:length(top_fs)){
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
#geom_violin() +
geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Box_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
#######################################################################################################
#5. Violin Plot
#######################################################################################################
for (i in 1:length(top_fs)){
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
geom_violin() +
#geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Violin_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
#######################################################################################################
#6. histogram Plot
#######################################################################################################
for (i in 1:length(top_fs)){
if (i %% 10 == 0){print(i)}
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 800)
print(p)
dev.off()
}
#'@TODO
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 30),]  #when min_scr > 3,  NEG:4263,POS:186
table(wss_obv_neg_df$sample_death_in24h)
View(wss_obv_neg_df)
#'@TODO
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 22),]
table(wss_obv_neg_df$sample_death_in24h) #925   7
#'@TODO
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 25),]
table(wss_obv_neg_df$sample_death_in24h) #925   7
#'@TODO
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 20),]
table(wss_obv_neg_df$sample_death_in24h) #925   7
#'@TODO
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 20),]
table(wss_obv_neg_df$sample_death_in24h) #925   7
4411/152
write.csv(wss_obv_neg_df,paste0(outdir,"OBV_NEG_SAMPLE_IDs_AndData.csv"))
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/UH3 cancer recurrence/ReCAPSE-dev/src/R_model_output/xgboost/"
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
compute_perf <- function(prediction_df){
#prediction_df <- test_pred3
predicted_class <- prediction_df[,"pred"]
actual_label    <- prediction_df[,"y_PRE_OR_POST_2ndEvent"]
#Match label factor levels
matched_res   <- match_label_levels_func(predicted_class,actual_label)
final_pred    <- matched_res[[1]]
final_actual  <- matched_res[[2]]
cm<-confusionMatrix(final_pred, final_actual, positive = "1", dnn = c("Prediction", "TrueLabels"),mode = "everything")
#Manually get TN, FP, TP, FN
# cm_tb <- cm$table
# TN <- cm_tb[1,1]
# FP <- cm_tb[2,1]
# TP <- cm_tb[2,2]
# FN <- cm_tb[1,2]
TN <- length(which(final_pred==0 & final_actual==0))
FP <- length(which(final_pred==1 & final_actual==0))
TP <- length(which(final_pred==1 & final_actual==1))
FN <- length(which(final_pred==0 & final_actual==1))
#class 1
performance_table <- cm$byClass[c("Sensitivity","Specificity",
"Pos Pred Value","Neg Pred Value",
"Precision", "Recall","F1")]
performance_table["Accuracy"] <- cm$overall[1]
#performance_table["AUC"]      <- auc_score
performance_table["TNR_Specificity"] <- TN/(TN + FP) #True negative rate = specificity
performance_table["FPR"] <- FP/(TN + FP) #False postive rate
performance_table["TPR_Sensitivity_Recall"] <- TP/(TP + FN) #True postive rate = sensitivity = recall
performance_table["FNR"] <- FN/(TP + FN) #False negative rate
performance_table <- round(performance_table,2)
#Reognized the table
perf_df <- data.frame(matrix(NA,nrow = 1, ncol = 8))
colnames(perf_df) <- c("Accuracy","Recall/Sensitivity/TPR",
"Specificity/TNR",
"Precision/PPV","F1",
"NPV","FPR","FNR")
perf_df[1,"Accuracy"]               <- performance_table["Accuracy"]
perf_df[1,"Recall/Sensitivity/TPR"] <- performance_table["Recall"]
perf_df[1,"Specificity/TNR"]        <- performance_table["Specificity"]
perf_df[1,"Precision/PPV"]          <- performance_table["Precision"]
perf_df[1,"F1"]                     <- performance_table["F1"]
perf_df[1,"NPV"]                    <- performance_table["Neg Pred Value"]
perf_df[1,"FPR"]                    <- performance_table["FPR"]
perf_df[1,"FNR"]                    <- performance_table["FNR"]
return(perf_df)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1       <- paste0(proj_dir, "15_XGB_Input/")
outdir           <- paste0(proj_dir, "21_BaselineResults/")
ds_index <- 1
################################################################################
#5.Load data test data
################################################################################
#B. Entire Testing
load(file = paste0(data_dir1, "test_data.rda"))
table(test_data$y_PRE_OR_POST_2ndEvent) #0:173862, 1: 6957
################################################################################
#3.Baseline 1: Random Gusses
################################################################################
test_pred1 <- data.frame(matrix(NA, nrow = nrow(test_data), ncol = 3))
colnames(test_pred1) <- c("sample_id","pred","y_PRE_OR_POST_2ndEvent")
test_pred1[,"sample_id"] <- test_data[,"sample_id"]
test_pred1[,"y_PRE_OR_POST_2ndEvent"] <- test_data[,"y_PRE_OR_POST_2ndEvent"]
for (i in 1:nrow(test_pred1)){
if (i %% 1000 == 0){print(i)}
set.seed(i)
test_pred1[i,"pred"] <- sample(c(0,1), 1) #random generate 0 or 1
}
perf1_df <- compute_perf(test_pred1)
rownames(perf1_df) <- "RandomGuess"
View(perf1_df)
################################################################################
#4.Baseline 2: All1s
################################################################################
test_pred2 <- data.frame(matrix(NA, nrow = nrow(test_data), ncol = 3))
colnames(test_pred2) <- c("sample_id","pred","y_PRE_OR_POST_2ndEvent")
test_pred2[,"sample_id"] <- test_data[,"sample_id"]
test_pred2[,"y_PRE_OR_POST_2ndEvent"] <- test_data[,"y_PRE_OR_POST_2ndEvent"]
test_pred2[,"pred"] <- 1
perf2_df <- compute_perf(test_pred2)
rownames(perf2_df) <- "All1s"
################################################################################
#4.Baseline 3: All0s
################################################################################
test_pred3 <- data.frame(matrix(NA, nrow = nrow(test_data), ncol = 3))
colnames(test_pred3) <- c("sample_id","pred","y_PRE_OR_POST_2ndEvent")
test_pred3[,"sample_id"] <- test_data[,"sample_id"]
test_pred3[,"y_PRE_OR_POST_2ndEvent"] <- test_data[,"y_PRE_OR_POST_2ndEvent"]
test_pred3[,"pred"] <- 0
perf3_df <- compute_perf(test_pred3)
rownames(perf3_df) <- "All0s"
all_perf_df <- rbind(perf1_df,perf2_df,perf3_df)
write.csv(all_perf_df,paste0(outdir,"perf_baseline.csv"))
source("Recapse_Ultility.R")
library(reshape2)
plot_individual_prediction <- function(pt_prediction_df, changepoint = NA, plot_cp = FALSE){
#pt_prediction_df <- curr_df
plot_data           <- curr_df[,c("month_start","actual","pred")]
colnames(plot_data) <- c("month_start","Acutal","Predicted")
reshaped_plot_data <- melt(plot_data,id.vars="month_start") #reshape
p <- ggplot(reshaped_plot_data, aes(x= month_start, y= value,color = variable, linetype = variable,shape = variable)) +
geom_point(size=5) +
geom_line(size=1)+
scale_linetype_manual("variable",values=c(0,1)) +
scale_color_manual("variable",
values = c("Acutal" = "darkblue",
"Predicted" = "darkred"))+
scale_shape_manual("variable",values=c(16,NA)) +
ylim(c(0,1)) +
xlab("Year") +
ylab("Predicted Probability")+
theme_bw() +  theme(legend.position="top", legend.title = element_blank()) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=14))
if (plot_cp == T){
p <- p + geom_vline(xintercept = changepoint, linetype="dotted", color = "darkorange", size=1.5) +
geom_text(aes(x=changepoint, label="CP", y=1), colour="darkorange", angle=0)
}
return(p)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1208updated/Use_ImportantFs_Performance/")
data_dir2        <- paste0(proj_dir, "11F_TrainTestIDs/")
outdir           <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1208updated/Use_ImportantFs_Performance/")
#User input
ds_index <- 1
update_pred_flag <- "Updated" #Updated or Original
########################################################################################################
#1.Load predictions
########################################################################################################
#Load prediction data
if (update_pred_flag != "Updated"){ #predtion use model
test_prediction_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed", "/16_Prediction_Table_DS", ds_index, ".csv"))
}else if (update_pred_flag == "Updated"){#prediction obv neg by assigin 0, prediction of other ones used model
test_prediction_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed", "/16_Updated_Prediction_Table_DS", ds_index, ".csv"))
}
#Add study_id and month start
original_IDs <- strsplit(as.character(test_prediction_df$sample_id),split = "@")
test_prediction_df$study_id    <- gsub("ID","",sapply(original_IDs, "[[", 1))
test_prediction_df$month_start <- sapply(original_IDs, "[[", 2)
test_ID <- unique(test_prediction_df$study_id)
################################################################################
#2. Load label df to get SBCE or not
################################################################################
SBCE_label_df <- read.xlsx(paste0(data_dir2,"/test_ID_withLabel.xlsx"),sheet = 1)
################################################################################
#3. Load change point analysis results
################################################################################
changepoint_df <- read.csv(paste0(data_dir1,"train_DS",ds_index,"/BeforeSmoothed/","16_",update_pred_flag,"_ChangePoint",".csv"),stringsAsFactors = F)
curr_id <- 28490
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
curr_df
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
if (curr_label == 1){
#get change point
curr_cp <- ymd(changepoint_df[which(changepoint_df[,"study_id"] == curr_id),"changepoint_month"])
p <- plot_individual_prediction(curr_df,curr_cp,TRUE)
}else{
p <- plot_individual_prediction(curr_df,NA,FALSE)
}
png(paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/Individual_Plot/",update_pred_flag,"/SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
curr_id <- 28473
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
if (curr_label == 1){
#get change point
curr_cp <- ymd(changepoint_df[which(changepoint_df[,"study_id"] == curr_id),"changepoint_month"])
p <- plot_individual_prediction(curr_df,curr_cp,TRUE)
}else{
p <- plot_individual_prediction(curr_df,NA,FALSE)
}
png(paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/Individual_Plot/",update_pred_flag,"/SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
curr_id <- 26811
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
if (curr_label == 1){
#get change point
curr_cp <- ymd(changepoint_df[which(changepoint_df[,"study_id"] == curr_id),"changepoint_month"])
p <- plot_individual_prediction(curr_df,curr_cp,TRUE)
}else{
p <- plot_individual_prediction(curr_df,NA,FALSE)
}
png(paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/Individual_Plot/",update_pred_flag,"/SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
curr_id <- 21795
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
if (curr_label == 1){
#get change point
curr_cp <- ymd(changepoint_df[which(changepoint_df[,"study_id"] == curr_id),"changepoint_month"])
p <- plot_individual_prediction(curr_df,curr_cp,TRUE)
}else{
p <- plot_individual_prediction(curr_df,NA,FALSE)
}
png(paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/Individual_Plot/",update_pred_flag,"/SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
curr_id <- 22041
#get prediction df
curr_df <- test_prediction_df[which(test_prediction_df[,"study_id"] == curr_id),]
curr_df$month_start <- ymd(curr_df$month_start)
#get label
curr_label_df <- SBCE_label_df[which(SBCE_label_df[,"study_id"] == curr_id),]
curr_label <- curr_label_df[,"SBCE"]
if (curr_label == 1){
#get change point
curr_cp <- ymd(changepoint_df[which(changepoint_df[,"study_id"] == curr_id),"changepoint_month"])
p <- plot_individual_prediction(curr_df,curr_cp,TRUE)
}else{
p <- plot_individual_prediction(curr_df,NA,FALSE)
}
png(paste0(outdir,"train_DS",ds_index,"/BeforeSmoothed/Individual_Plot/",update_pred_flag,"/SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
