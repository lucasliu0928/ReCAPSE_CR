labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[1,]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[1,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
#geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
geom_vline(aes(xintercept= 0.25), linetype="solid",  color="yellow", size=2)
geom_vline(aes(xintercept= 0.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
#geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
geom_vline(aes(xintercept= 0.25), linetype="solid",  color="yellow", size=2)  +
geom_vline(aes(xintercept= 0.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
#geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
geom_vline(aes(xintercept= 0.4), linetype="solid",  color="yellow", size=2)  +
geom_vline(aes(xintercept= 0.6), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 0.4), linetype="solid",  color="yellow", size=2)  +
#geom_vline(aes(xintercept= 0.6), linetype="solid",  color="yellow", size=2)
}
sp_value <- sample_stats[1,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[10,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[5241,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
library(ggplot2)
get_sample_func <- function(sample_size){
sample_IDs  <- sample(data_pop[,"Student_ID"], replace=FALSE, size=sample_size)
data_sample <- data_pop[which(data_pop[,"Student_ID"] %in% sample_IDs),]
return(data_sample)
}
compute_average <- function(input_data,variable_col,cohort_name){
mean_val    <- mean(input_data[,variable_col])
#print(paste("Average", variable_col,"of", cohort_name, "is:",mean_val))
return(mean_val)
}
compute_proportion <- function(input_data,variable_col,cohort_name){
n_total          <- nrow(input_data)
n_qualified      <- length(which(input_data[,variable_col] == 1))
prop <-  n_qualified/ n_total
#print(paste(variable_col,"Proportion","of",cohort_name ,"is:",prop))
return(prop)
}
###Create population
set.seed(1)
n <- 5000
student_id <- paste0("ID", seq(1,n,1))
gpa        <- sample(c(0,0.5,1,1.5,2,2.5,3,3.5,4), replace = TRUE,size=n)      #Random generate 1000 student GPA
female     <- sample(c(0,1), replace=TRUE, size=n) #Random generate Gender student GPA
male       <- 1- female
###Population data
data_pop <- data.frame(Student_ID = student_id,GPA = gpa,FEMALE =  female, MALE = male)
##Population MEAN and proportion
meanGPA_pop <- compute_average(data_pop,"GPA","Population")
propFEMALE_pop <- compute_proportion(data_pop,"FEMALE","Population")
propMALE_pop   <- compute_proportion(data_pop,"MALE","Population")
##################################################
#Generate 10000 samples with sample size = 100
##################################################
n_samples <- 1000
sample_size <- 20
sample_data_list <- list(NA)
for (i in 1:n_samples){
set.seed(i)
sample_data_list[[i]] <- get_sample_func(sample_size)
}
example_sample_data <-  sample_data_list[[1]]
#############################################################
#Compute average GPA and female proportaion for each sample
#############################################################
sample_stats <- as.data.frame(matrix(NA, nrow = n_samples,ncol = 3))
colnames(sample_stats) <- c("Sample_NAME","GPA_Mean","Female_Proportion")
for (i in 1:n_samples){
curr_sample_data <- sample_data_list[[i]]
sample_stats[i,"Sample_NAME"]       <- paste0("Sample",i)
sample_stats[i,"GPA_Mean"]           <- compute_average(curr_sample_data,"GPA","Sample")
sample_stats[i,"Female_Proportion"] <- compute_proportion(curr_sample_data,"FEMALE","Sample")
}
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 0.4), linetype="solid",  color="yellow", size=2)  +
#geom_vline(aes(xintercept= 0.6), linetype="solid",  color="yellow", size=2)
}
sp_value <- sample_stats[5241,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source("Recapse_Ultility.R")
get_codes_func <- function(codes_colnames,code_type){
colnames_indata <- codes_colnames[which(grepl(code_type,codes_colnames)==T)]
codes   <- gsub(paste0(code_type,"_"),"",colnames_indata)
if (length(colnames_indata) == 0){
code_df <- NULL
}else{
code_df <- data.frame(COLNAMES = colnames_indata, CODE = codes,TYPE = code_type)
}
return(code_df)
}
find_grp_func <- function(list_of_codes,type_of_codes,diag_grp_df,proc_grp_df,drug_grp_df){
#list_of_codes <- as.character(all_code_df$CODE)
#type_of_codes <- as.character(all_code_df$TYPE)
GRPs <- NA
for (i in 1:length(list_of_codes)){
curr_code <- list_of_codes[i]
curr_type <- type_of_codes[i]
if (curr_type == "DIAG_ICD"){
idx <- which(diag_grp_df[,"CODE"] == curr_code &
diag_grp_df[,"TYPE"] == "DIAG_ICD9or10")
if(length(idx) > 0){
curr_grp <- diag_grp_df[idx,"CCS_CATEGORY"]
}else{
curr_grp <- paste0("CCS_",NA)
}
}else if (curr_type == "PROC_ICD"){
idx <- which(proc_grp_df[,"CODE"] == curr_code &
proc_grp_df[,"TYPE"] == "PROC_ICD9or10")
if(length(idx) > 0){
curr_grp <- proc_grp_df[idx,"CCS_CATEGORY"]
}else{
curr_grp <- paste0("CCS_",NA)
}
}else if (curr_type == "PROC_HCPCS"){
idx <- which(proc_grp_df[,"CODE"] == curr_code &
proc_grp_df[,"TYPE"] == "PROC_HCPCS")
if(length(idx) > 0){
curr_grp <- proc_grp_df[idx,"CCS_CATEGORY"]
}else{
curr_grp <- paste0("CCS_",NA)
}
}else if (curr_type == "DRUG_AHFS"){
idx <- which(drug_grp_df[,"CODE"] == curr_code &
drug_grp_df[,"TYPE"] == "DRUG_THERA_CLS_AHFS")
if(length(idx) > 0){
curr_grp <- drug_grp_df[idx,"specific_group"]
}else{
curr_grp <- paste0("DM3_SPE_",NA)
}
}else if (curr_type == "DRUG_NDC"){
idx <- which(drug_grp_df[,"CODE"] == curr_code &
drug_grp_df[,"TYPE"] == "DRUG_NDC")
if(length(idx) > 0){
curr_grp <- drug_grp_df[idx,"specific_group"]
}else{
curr_grp <- paste0("DM3_SPE_",NA)
}
}
GRPs[i] <- curr_grp
}
return(GRPs)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
#proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "0_Codes/Grouped_CleanUniqueCodes/")
data_dir2  <- paste0(proj_dir, "6_CleanClaims_InValidMonth/EnrolledMonths_WithPossibleMonthsHasNoCodes3/")
data_dir3  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir   <- paste0(proj_dir, "10A_CCSDiagProcF_And_DM3SPEF_inValidMonth/WithPossibleMonthsHasNoCodes/")
outdir2  <- paste0(proj_dir, "10A_UniqueGrps_inValidMonths_PtsLevel/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.Load group df
################################################################################
diag_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Diag_And_Groups_inALLClaims.xlsx"),sheet = 1)
proc_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Proc_And_Groups_inALLClaims.xlsx"),sheet = 1)
drug_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Drug_And_Groups_inALLClaims.xlsx"),sheet = 1)
diag_grp_df$CCS_CATEGORY <- paste0("CCS_DIAG_",diag_grp_df$CCS_CATEGORY)
proc_grp_df$CCS_CATEGORY <- paste0("CCS_PROC_",proc_grp_df$CCS_CATEGORY)
drug_grp_df$specific_group <- paste0("DM3_SPE_",drug_grp_df$specific_group)
drug_grp_df$general_group <- paste0("DM3_GEN_",drug_grp_df$general_group)
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
get_codes_func <- function(codes_colnames,code_type){
colnames_indata <- codes_colnames[which(grepl(code_type,codes_colnames)==T)]
codes   <- gsub(paste0(code_type,"_"),"",colnames_indata)
if (length(colnames_indata) == 0){
code_df <- NULL
}else{
code_df <- data.frame(COLNAMES = colnames_indata, CODE = codes,TYPE = code_type)
}
return(code_df)
}
find_grp_func <- function(list_of_codes,type_of_codes,diag_grp_df,proc_grp_df,drug_grp_df){
#list_of_codes <- as.character(all_code_df$CODE)
#type_of_codes <- as.character(all_code_df$TYPE)
GRPs <- NA
for (i in 1:length(list_of_codes)){
curr_code <- list_of_codes[i]
curr_type <- type_of_codes[i]
if (curr_type == "DIAG_ICD"){
idx <- which(diag_grp_df[,"CODE"] == curr_code &
diag_grp_df[,"TYPE"] == "DIAG_ICD9or10")
if(length(idx) > 0){
curr_grp <- diag_grp_df[idx,"CCS_CATEGORY"]
}else{
curr_grp <- paste0("CCS_",NA)
}
}else if (curr_type == "PROC_ICD"){
idx <- which(proc_grp_df[,"CODE"] == curr_code &
proc_grp_df[,"TYPE"] == "PROC_ICD9or10")
if(length(idx) > 0){
curr_grp <- proc_grp_df[idx,"CCS_CATEGORY"]
}else{
curr_grp <- paste0("CCS_",NA)
}
}else if (curr_type == "PROC_HCPCS"){
idx <- which(proc_grp_df[,"CODE"] == curr_code &
proc_grp_df[,"TYPE"] == "PROC_HCPCS")
if(length(idx) > 0){
curr_grp <- proc_grp_df[idx,"CCS_CATEGORY"]
}else{
curr_grp <- paste0("CCS_",NA)
}
}else if (curr_type == "DRUG_AHFS"){
idx <- which(drug_grp_df[,"CODE"] == curr_code &
drug_grp_df[,"TYPE"] == "DRUG_THERA_CLS_AHFS")
if(length(idx) > 0){
curr_grp <- drug_grp_df[idx,"specific_group"]
}else{
curr_grp <- paste0("DM3_SPE_",NA)
}
}else if (curr_type == "DRUG_NDC"){
idx <- which(drug_grp_df[,"CODE"] == curr_code &
drug_grp_df[,"TYPE"] == "DRUG_NDC")
if(length(idx) > 0){
curr_grp <- drug_grp_df[idx,"specific_group"]
}else{
curr_grp <- paste0("DM3_SPE_",NA)
}
}
GRPs[i] <- curr_grp
}
return(GRPs)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
#proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "0_Codes/Grouped_CleanUniqueCodes/")
data_dir2  <- paste0(proj_dir, "6_CleanClaims_InValidMonth/EnrolledMonths_WithPossibleMonthsHasNoCodes3/")
data_dir3  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir   <- paste0(proj_dir, "10A_CCSDiagProcF_And_DM3SPEF_inValidMonth/WithPossibleMonthsHasNoCodes/")
outdir2  <- paste0(proj_dir, "10A_UniqueGrps_inValidMonths_PtsLevel/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.Load group df
################################################################################
diag_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Diag_And_Groups_inALLClaims.xlsx"),sheet = 1)
proc_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Proc_And_Groups_inALLClaims.xlsx"),sheet = 1)
drug_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Drug_And_Groups_inALLClaims.xlsx"),sheet = 1)
diag_grp_df$CCS_CATEGORY <- paste0("CCS_DIAG_",diag_grp_df$CCS_CATEGORY)
proc_grp_df$CCS_CATEGORY <- paste0("CCS_PROC_",proc_grp_df$CCS_CATEGORY)
drug_grp_df$specific_group <- paste0("DM3_SPE_",drug_grp_df$specific_group)
drug_grp_df$general_group <- paste0("DM3_GEN_",drug_grp_df$general_group)
################################################################################
#1.Load group df
################################################################################
diag_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Diag_And_Groups_inALLClaims.xlsx"),sheet = 1)
data_dir1
source("Recapse_Ultility.R")
get_codes_func <- function(codes_colnames,code_type){
colnames_indata <- codes_colnames[which(grepl(code_type,codes_colnames)==T)]
codes   <- gsub(paste0(code_type,"_"),"",colnames_indata)
if (length(colnames_indata) == 0){
code_df <- NULL
}else{
code_df <- data.frame(COLNAMES = colnames_indata, CODE = codes,TYPE = code_type)
}
return(code_df)
}
find_grp_func <- function(list_of_codes,type_of_codes,diag_grp_df,proc_grp_df,drug_grp_df){
#list_of_codes <- as.character(all_code_df$CODE)
#type_of_codes <- as.character(all_code_df$TYPE)
GRPs <- NA
for (i in 1:length(list_of_codes)){
curr_code <- list_of_codes[i]
curr_type <- type_of_codes[i]
if (curr_type == "DIAG_ICD"){
idx <- which(diag_grp_df[,"CODE"] == curr_code &
diag_grp_df[,"TYPE"] == "DIAG_ICD9or10")
if(length(idx) > 0){
curr_grp <- diag_grp_df[idx,"CCS_CATEGORY"]
}else{
curr_grp <- paste0("CCS_",NA)
}
}else if (curr_type == "PROC_ICD"){
idx <- which(proc_grp_df[,"CODE"] == curr_code &
proc_grp_df[,"TYPE"] == "PROC_ICD9or10")
if(length(idx) > 0){
curr_grp <- proc_grp_df[idx,"CCS_CATEGORY"]
}else{
curr_grp <- paste0("CCS_",NA)
}
}else if (curr_type == "PROC_HCPCS"){
idx <- which(proc_grp_df[,"CODE"] == curr_code &
proc_grp_df[,"TYPE"] == "PROC_HCPCS")
if(length(idx) > 0){
curr_grp <- proc_grp_df[idx,"CCS_CATEGORY"]
}else{
curr_grp <- paste0("CCS_",NA)
}
}else if (curr_type == "DRUG_AHFS"){
idx <- which(drug_grp_df[,"CODE"] == curr_code &
drug_grp_df[,"TYPE"] == "DRUG_THERA_CLS_AHFS")
if(length(idx) > 0){
curr_grp <- drug_grp_df[idx,"specific_group"]
}else{
curr_grp <- paste0("DM3_SPE_",NA)
}
}else if (curr_type == "DRUG_NDC"){
idx <- which(drug_grp_df[,"CODE"] == curr_code &
drug_grp_df[,"TYPE"] == "DRUG_NDC")
if(length(idx) > 0){
curr_grp <- drug_grp_df[idx,"specific_group"]
}else{
curr_grp <- paste0("DM3_SPE_",NA)
}
}
GRPs[i] <- curr_grp
}
return(GRPs)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "0_Codes/Grouped_CleanUniqueCodes/")
data_dir2  <- paste0(proj_dir, "6_CleanClaims_InValidMonth/EnrolledMonths_WithPossibleMonthsHasNoCodes3/")
data_dir3  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
diag_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Diag_And_Groups_inALLClaims.xlsx"),sheet = 1)
proc_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Proc_And_Groups_inALLClaims.xlsx"),sheet = 1)
drug_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Drug_And_Groups_inALLClaims.xlsx"),sheet = 1)
diag_grp_df$CCS_CATEGORY <- paste0("CCS_DIAG_",diag_grp_df$CCS_CATEGORY)
proc_grp_df$CCS_CATEGORY <- paste0("CCS_PROC_",proc_grp_df$CCS_CATEGORY)
drug_grp_df$specific_group <- paste0("DM3_SPE_",drug_grp_df$specific_group)
drug_grp_df$general_group <- paste0("DM3_GEN_",drug_grp_df$general_group)
################################################################################
#get per months files
################################################################################
perMonth_files <- list.files(data_dir2)
################################################################################
#3.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir3,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
########################################################################################################################
#Use the following code to run in case out of memory when procssing all at one time
########################################################################################################################
ID_processed <- as.numeric(gsub("_Month_Grp_Feature.xlsx|ID","",list.files(outdir)))
if (length(ID_processed) != 0 ){
analysis_IDs <- analysis_IDs[-which(analysis_IDs %in% ID_processed)]
}
print(length(analysis_IDs))
foreach (i = 1: length(analysis_IDs)) %dopar% {
curr_id <- analysis_IDs[i]
curr_file <- paste0("ID",curr_id,"_perMonthData_Enrolled_inPredictionWindow.xlsx")
#per month df
curr_perMonth_df <- read.xlsx(paste0(data_dir2,curr_file),sheet = 1)
#Make sure no code has all NAs rows
#NOTE this was also done in previous code when generate in prediction Window
curr_perMonth_df <- curr_perMonth_df[,colSums(is.na(curr_perMonth_df))<nrow(curr_perMonth_df)]
if (ncol(curr_perMonth_df) > 4){ #Make sure there is any code left in the df, if not, this pts should be excluded for final
code_names <- colnames(curr_perMonth_df)[5:ncol(curr_perMonth_df)]
#current codes
curr_diag_ICD_codes   <- get_codes_func(code_names,"DIAG_ICD")
curr_proc_ICD_codes   <-  get_codes_func(code_names,"PROC_ICD")
curr_proc_HCPCS_codes <-   get_codes_func(code_names,"PROC_HCPCS")
curr_drug_AHFS_codes  <-   get_codes_func(code_names,"DRUG_AHFS")
curr_drug_NDC_codes   <-  get_codes_func(code_names,"DRUG_NDC")
all_code_df <- rbind(curr_diag_ICD_codes,curr_proc_ICD_codes,curr_proc_HCPCS_codes,curr_drug_AHFS_codes,curr_drug_NDC_codes)
all_code_df$GRPS <- find_grp_func(all_code_df[,"CODE"],all_code_df[,"TYPE"],diag_grp_df,proc_grp_df,drug_grp_df)
#update per month df col names with ccs grp
unique_grps <- unique(all_code_df[,"GRPS"])
curr_grp_feature_df <- curr_perMonth_df[,1:4] #keep id and month
curr_grp_feature_df[,unique_grps] <- NA #new grp feature cols
for (j in 5:ncol(curr_grp_feature_df)){
curr_grp <- colnames(curr_grp_feature_df)[j]
curr_codes_ingrp <- as.character(all_code_df[which(all_code_df[,"GRPS"] == curr_grp),"COLNAMES"])
curr_col_idx_ingrps <- which(colnames(curr_perMonth_df) %in% curr_codes_ingrp)
curr_df <- as.data.frame(curr_perMonth_df[,curr_col_idx_ingrps])
curr_grp_feature_df[,j] <- rowSums(curr_df,na.rm = T)
}
write.xlsx(curr_grp_feature_df,paste0(outdir,"ID",curr_id,"_Month_Grp_Feature.xlsx"))
#Ouput unique grps for each patients
unique_grps_df <- as.data.frame(unique_grps)
write.xlsx(unique_grps_df,paste0(outdir2,"ID",curr_id,"_Month_Unique_Grps.xlsx"))
}
}
i
i <- 1
curr_id <- analysis_IDs[i]
curr_file <- paste0("ID",curr_id,"_perMonthData_Enrolled_inPredictionWindow.xlsx")
#per month df
curr_perMonth_df <- read.xlsx(paste0(data_dir2,curr_file),sheet = 1)
data_dir2
curr_file
data_dir2
