#######################################################################
##############              Data dir                     ##############
#######################################################################
code_data_dir <- "/recapse/intermediate_data/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/recapse/data/"
outdir   <- "/recapse/intermediate_data/0_Codes/Grouped_CleanUniqueCodes/"
#local
code_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/Grouped_CleanUniqueCodes/"
file_dir <- grping_data_dir
#Load data
drug_group_df <- read.xlsx(paste0(file_dir,"Code_Groups/Val_Quan_Final SecondRoot List and NDC.xlsx"),sheet = 1)
View(drug_group_df)
length(unique(drug_group_df$ROOT_CLASSIFICATION))
length(unique(drug_group_df$SECONDARY_CLASSIFICATION))
length(drug_group_df$ndc_upc_hri2)
length(unique(drug_group_df$ROOT_CLASSIFICATION))
length(unique(drug_group_df$GNN))
#Load data
check_df <- read.xlsx("/Users/lucasliu/Downloads/Final SecondRoot List and NDC (1).xlsx")
length(unique(check_df$SECONDARY_CLASSIFICATION))
#Load data
drug_group_df <- read.xlsx(paste0(file_dir,"Code_Groups/Val_Quan_Final SecondRoot List and NDC.xlsx"),sheet = 1)
source("Recapse_Ultility.R")
#######################################################################
##############              Data dir                     ##############
#######################################################################
code_data_dir <- "/recapse/intermediate_data/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/recapse/data/"
outdir   <- "/recapse/intermediate_data/0_Codes/Grouped_CleanUniqueCodes/"
#local
code_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/Grouped_CleanUniqueCodes/"
#6.Load Val drug groups
VAL_df <- load_and_clean_Val_data(grping_data_dir)
unique_diag_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Diag_Codes.xlsx"),sheet = 1)
unique_proc_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Proc_Codes.xlsx"),sheet = 1)
unique_drug_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Drug_Codes.xlsx"),sheet = 1)
claim_code_df <- unique_drug_df
View(VAL_df)
claim_code_df$VAL_ROOT_group <- NA
claim_code_df$VAL_2ndROOT_group <- NA
i <- 1
colnames(claim_code_df)
curr_gnn <- claim_code_df[i,"CODE"]
curr_idxes <- which(VAL_df[,"short_code"] == curr_gnn)
colnames(VAL_df)
curr_idxes <- which(VAL_df[,"ndc_upc_hri2"] == curr_gnn)
i <- 1
curr_code <- claim_code_df[i,"CODE"]
curr_idxes <- which(VAL_df[,"ndc_upc_hri2"] == curr_code)
curr_idxes
curr_code
View(VAL_df)
length(intersect(claim_code_df$CODE, VAL_df$ndc_upc_hri2))
28165 - 36530
8365/36530
intersect(claim_code_df$CODE, VAL_df$ndc_upc_hri2)
intersect(claim_code_df$CODE, VAL_df$ndc_upc_hri2)[1]
which(claim_code_df$CODE == 49884060301)
i <- 470
curr_code <- claim_code_df[i,"CODE"]
curr_idxes <- which(VAL_df[,"ndc_upc_hri2"] == curr_code)
curr_idxes
VAL_df[curr_idxes,"ndc_upc_hri2"]
source("Recapse_Ultility.R")
#######################################################################
##############              Data dir                     ##############
#######################################################################
code_data_dir <- "/recapse/intermediate_data/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/recapse/data/"
outdir   <- "/recapse/intermediate_data/0_Codes/Grouped_CleanUniqueCodes/"
#local
code_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/Grouped_CleanUniqueCodes/"
#6.Load Val drug groups
VAL_df <- load_and_clean_Val_data(grping_data_dir)
#3. DM3 drug codes
#grouped_unique_drug_df <- group_drugcodes_into_DM3_func(unique_drug_df,DM3_df) #use drug_name to group
grouped_unique_drug_df <- group_drugcodes_into_DM3_funcV2(unique_drug_df,DM3_df) #use short GNN to group
unique_drug_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Drug_Codes.xlsx"),sheet = 1)
#5.Load DM3 drug group
DM3_df <- load_and_clean_DM3_data(grping_data_dir)
#4.VAL drug grouping
grouped_unique_drug_df_VAL <- group_drugcodes_into_VAL_func(unique_drug_df,VAL_df) #use short GNN to group
claim_code_df <- unique_drug_df
claim_code_df$VAL_ROOT_group <- NA
claim_code_df$VAL_2ndROOT_group <- NA
for (i in 1:nrow(claim_code_df)){
if (i %% 1000 == 0){print(i)}
curr_code <- claim_code_df[i,"CODE"]
curr_idxes <- which(VAL_df[,"ndc_upc_hri2"] == curr_code)
if (length(curr_idxes) > 0){
claim_code_df[i,"VAL_ROOT_group"]     <-  unique(DM3_df[curr_idxes,"VAL_ROOT_group"])
claim_code_df[i,"VAL_2ndROOT_group"]  <-  unique(DM3_df[curr_idxes,"VAL_2ndROOT_group"])
}
}
i
VAL_df$ROOT_CLASSIFICATION
colnames(VAL_df)
claim_code_df <- unique_drug_df
claim_code_df$VAL_ROOT_group <- NA
claim_code_df$VAL_SECONDARY_group <- NA
for (i in 1:nrow(claim_code_df)){
if (i %% 1000 == 0){print(i)}
curr_code <- claim_code_df[i,"CODE"]
curr_idxes <- which(VAL_df[,"ndc_upc_hri2"] == curr_code)
if (length(curr_idxes) > 0){
claim_code_df[i,"VAL_ROOT_group"]     <-  unique(VAL_df[curr_idxes,"ROOT_CLASSIFICATION"])
claim_code_df[i,"VAL_SECONDARY_group"]  <-  unique(VAL_df[curr_idxes,"SECONDARY_CLASSIFICATION"])
}
}
i
unique(VAL_df[curr_idxes,"ROOT_CLASSIFICATION"])
unique(VAL_df[curr_idxes,"SECONDARY_CLASSIFICATION"])
curr_code
curr_code <- claim_code_df[i,"CODE"]
curr_idxes <- which(VAL_df[,"ndc_upc_hri2"] == curr_code)
if (length(curr_idxes) > 0){
claim_code_df[i,"VAL_ROOT_group"]       <-  unique(VAL_df[curr_idxes,"ROOT_CLASSIFICATION"])[1] #if there is still multiple, choose the 1st one
claim_code_df[i,"VAL_SECONDARY_group"]  <-  unique(VAL_df[curr_idxes,"SECONDARY_CLASSIFICATION"])[1]
}
source("Recapse_Ultility.R")
#######################################################################
##############              Data dir                     ##############
#######################################################################
code_data_dir <- "/recapse/intermediate_data/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/recapse/data/"
outdir   <- "/recapse/intermediate_data/0_Codes/Grouped_CleanUniqueCodes/"
#local
code_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/Grouped_CleanUniqueCodes/"
#5.Load DM3 drug group
DM3_df <- load_and_clean_DM3_data(grping_data_dir)
#6.Load Val drug groups
VAL_df <- load_and_clean_Val_data(grping_data_dir)
unique_drug_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Drug_Codes.xlsx"),sheet = 1)
#4.VAL drug grouping
grouped_unique_drug_df_VAL <- group_drugcodes_into_VAL_func(unique_drug_df,VAL_df) #use short GNN to group
View(grouped_unique_drug_df_VAL)
length(which(is.na(grouped_unique_drug_df_VAL$VAL_ROOT_group)))
length(which(is.na(grouped_unique_drug_df_VAL$VAL_SECONDARY_group)))
length(which(is.na(grouped_unique_drug_df_VAL$VAL_SECONDARY_group)==FALSE))
length(intersect(unique_drug_df$CODE, VAL_df$ndc_upc_hri2))
View(unique_drug_df)
View(VAL_df)
drug_group_df
drug_group_df <- VAL_df
which(nchar(drug_group_df$ndc_upc_hri2)<5)
nchar(drug_group_df$ndc_upc_hri2)
nchar(drug_group_df$ndc_upc_hri2) <= 5
which(nchar(drug_group_df$ndc_upc_hri2)<=5)
which(nchar(drug_group_df$ndc_upc_hri2)==5)
which(nchar(drug_group_df$ndc_upc_hri2)==6)
which(nchar(drug_group_df$ndc_upc_hri2)==7)
nchar(00002035102)
table(nchar(grouped_unique_drug_df_VAL$CODE))
table(nchar(grouped_unique_drug_df_VAL$CODE[which(grouped_unique_drug_df_VAL$TYPE == "DRUG_NDC")]))
source("Recapse_Ultility.R")
#######################################################################
##############              Data dir                     ##############
#######################################################################
data_dir <- "/recapse/intermediate_data/0_Codes/BeforeClean_UniqueCodes/"
drug_name_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
outdir   <- "/recapse/intermediate_data/0_Codes/AfterClean_UniqueCodes/"
# #local
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/BeforeClean_UniqueCodes/"
drug_name_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/Testing data for UH3 - Dec 16 2020/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/AfterClean_UniqueCodes/"
#######################################################################
############################## Medicaid  ##############################
#######################################################################
Drug_code1 <- read.xlsx(paste0(data_dir, "0_unique_Drug_Codes_Medicaid.xlsx"),sheet = 1)
Drug_code2 <- read.xlsx(paste0(data_dir, "0_unique_Drug_Codes_Medicare.xlsx"),sheet = 1)
common_drug_codes <- intersect(Drug_code1[,"CODE"],Drug_code1[,"CODE"])
Comb_drug <- rbind(Drug_code1,Drug_code2)
Comb_drug[which(Comb_drug[,"CODE"] %in% common_drug_codes),"CLAIM"] <- "BOTH"
Comb_drug <- Comb_drug[!duplicated(Comb_drug[,"CODE"]),] #remove duplicates
Comb_drug[,"CODE"] <- gsub("CODE_","",Comb_drug[,"CODE"])
Comb_drug_cleaned <- Comb_drug
View(Comb_drug_cleaned)
str_remove("00003011675", "^0+")
table(Comb_drug_cleaned[,"TYPE"])
source("Recapse_Ultility.R")
#######################################################################
##############              Data dir                     ##############
#######################################################################
data_dir <- "/recapse/intermediate_data/0_Codes/BeforeClean_UniqueCodes/"
drug_name_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
outdir   <- "/recapse/intermediate_data/0_Codes/AfterClean_UniqueCodes/"
# #local
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/BeforeClean_UniqueCodes/"
drug_name_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/Testing data for UH3 - Dec 16 2020/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/AfterClean_UniqueCodes/"
#######################################################################
Drug_code1 <- read.xlsx(paste0(data_dir, "0_unique_Drug_Codes_Medicaid.xlsx"),sheet = 1)
Drug_code2 <- read.xlsx(paste0(data_dir, "0_unique_Drug_Codes_Medicare.xlsx"),sheet = 1)
common_drug_codes <- intersect(Drug_code1[,"CODE"],Drug_code1[,"CODE"])
Comb_drug <- rbind(Drug_code1,Drug_code2)
Comb_drug[which(Comb_drug[,"CODE"] %in% common_drug_codes),"CLAIM"] <- "BOTH"
Comb_drug <- Comb_drug[!duplicated(Comb_drug[,"CODE"]),] #remove duplicates
Comb_drug[,"CODE"] <- gsub("CODE_","",Comb_drug[,"CODE"])
Comb_drug_cleaned <- Comb_drug
Comb_drug_cleaned[,"CODE"] <- clean_code_func2(Comb_drug_cleaned[,"CODE"],Comb_drug_cleaned[,"TYPE"])
Comb_drug_cleaned <- Comb_drug_cleaned[!duplicated(Comb_drug_cleaned[,"CODE"]),]
Comb_drug_cleaned <- Comb_drug_cleaned[-which(is.na(Comb_drug_cleaned[,"CODE"])==T | Comb_drug_cleaned[,"CODE"] ==""),]
#######################################################################
## Add Drug names
#######################################################################
#1. Get drung names
drug_name_df <- read.csv(paste0(drug_name_dir,"DrugList.csv"),stringsAsFactors = F,header = F)
drug_name_df$V1 <- as.character(drug_name_df$V1)
#2.clean code in drug name df
drug_name_df[,"V1"] <- clean_code_func2(drug_name_df[,"V1"],drug_name_df[,"V2"])
#3. Clean drug names
drug_name_df[,"V2"] <- gsub("[[:punct:]]","",drug_name_df[,"V2"])
drug_name_df[,"V2"] <- trimws(drug_name_df[,"V2"], which = c("both"), whitespace = "[ \t\r\n]")
#3.Filter out durg name df for code in claims
drug_name_df <- drug_name_df[which(drug_name_df[,"V1"] %in% Comb_drug_cleaned[,"CODE"]),]
#4. Add drug name to Comb_drug_cleaned
Comb_drug_cleaned$DRUG_NAME <- NA
for (i in 1:nrow(Comb_drug_cleaned)){
if (i %% 1000 == 0 ){print(i)}
curr_drug <- Comb_drug_cleaned[i,"CODE"]
curr_idxes <- which(drug_name_df[,"V1"] == curr_drug)
if (length(curr_idxes) > 0){
Comb_drug_cleaned[i,"DRUG_NAME"] <- drug_name_df[curr_idxes,"V2"]
}
}
#######################################################################
#Add GNN (Added Sep24 21)
#######################################################################
#1. Read Drug name list
options(scipen=999) #disable scientific numbers showing
drug_name_list1 <- read.csv(paste0(drug_name_dir,"NDC Drug List/Medicaid DrugList.csv"), stringsAsFactors = F)
colnames(drug_name_list1) <- c("CODE","GNN")
drug_name_list2 <- read.csv(paste0(drug_name_dir,"NDC Drug List/Medicare DrugList.csv"), stringsAsFactors = F)
colnames(drug_name_list2) <- c("CODE","BN","GNN")
drug_name_list_comb <- rbind(drug_name_list1, drug_name_list2[,c("CODE","GNN")]) #Comb two source
drug_name_list_comb_updated <- drug_name_list_comb[!duplicated(drug_name_list_comb[,"CODE"]),] #remove duplicates
drug_name_list_comb_updated[,"CODE"] <- str_remove(drug_name_list_comb_updated[,"CODE"], "^0+") #remove leading zeros
#2.Create a column for Code used for matching GNN data (remove leading zeros)
Comb_drug_cleaned$CODE_ForMatchGNNData<- str_remove(Comb_drug_cleaned$CODE, "^0+") #remove leading zeros
#3.Add GNN to cleaned unique drug codes
Comb_drug_cleaned$GNN <- NA
for (i in 1:nrow(Comb_drug_cleaned)){
if (i %% 1000 == 0){print(i)}
curr_code  <- Comb_drug_cleaned[i,"CODE_ForMatchGNNData"]
curr_index <- which(drug_name_list_comb_updated[,"CODE"] == curr_code)
if (length(curr_index) > 0 ){
Comb_drug_cleaned[i,"GNN"] <- drug_name_list_comb_updated[curr_index,"GNN"]
}
}
#4. Create short GNN     # This functions is from Teresa
#'@Question:  what is exclude list
get_first_word_of_name <- function(str_vec,exclude_list){
str_vec <- as.character(str_vec)
# get the first term or word of a multi-word generic name
str_pair <- str_split(trimws(str_vec, which='both'), ',', simplify=TRUE)
if (str_pair[,1] %in% exclude_list)
{
str_pair[,1] <- trimws(str_pair[,2], which='both')
}
str_pair <- str_split(str_pair[,1], ' ', simplify=TRUE)
if (ncol(str_pair) > 1 & (str_pair[,1] %in% exclude_list))
{
str_pair[,1] <- trimws(str_pair[,2], which='both')
}
str_pair <- str_split(str_pair[,1], '/', simplify=TRUE)
return (str_pair[,1])
}
exclude_list <- NULL
Comb_drug_cleaned$short_GNN <- NA
for (i in 1:nrow(Comb_drug_cleaned)){
if (i %% 1000 == 0){print(i)}
curr_gnn       <- Comb_drug_cleaned[i,"GNN"]
curr_short_gnn <- get_first_word_of_name(curr_gnn,exclude_list)
Comb_drug_cleaned[i,"short_GNN"] <- curr_short_gnn
}
View(Comb_drug_cleaned)
write.xlsx(Comb_drug_cleaned,paste0(outdir,"0_Cleaned_Unique_Drug_Codes.xlsx"))
outdir
write.xlsx(Comb_drug_cleaned,paste0(outdir,"0_Cleaned_Unique_Drug_Codes_V2.xlsx"))
write.xlsx(Comb_drug_cleaned,paste0(outdir,"0_Cleaned_Unique_Drug_Codes.xlsx"))
write.xlsx(Comb_drug_cleaned,paste0(outdir,"0_Cleaned_Unique_Drug_Codes.xlsx"), overwrite = TRUE)
source("Recapse_Ultility.R")
#######################################################################
##############              Data dir                     ##############
#######################################################################
code_data_dir <- "/recapse/intermediate_data/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/recapse/data/"
outdir   <- "/recapse/intermediate_data/0_Codes/Grouped_CleanUniqueCodes/"
#local
code_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/Grouped_CleanUniqueCodes/"
#5.Load DM3 drug group
DM3_df <- load_and_clean_DM3_data(grping_data_dir)
#6.Load Val drug groups
VAL_df <- load_and_clean_Val_data(grping_data_dir)
unique_drug_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Drug_Codes.xlsx"),sheet = 1)
#4.VAL drug grouping
grouped_unique_drug_df_VAL <- group_drugcodes_into_VAL_func(unique_drug_df,VAL_df) #use short GNN to group
View(VAL_df)
length(which(is.na(grouped_unique_drug_df_VAL$VAL_ROOT_group)==T))
7833/41271
#3. DM3 drug codes
#grouped_unique_drug_df <- group_drugcodes_into_DM3_func(unique_drug_df,DM3_df) #use drug_name to group
grouped_unique_drug_df <- group_drugcodes_into_DM3_funcV2(unique_drug_df,DM3_df) #use short GNN to group
#5.Combine DM3 and VAL drug groups into one file
#'@TODO:
comb_grp_drug_df <- merge(grouped_unique_drug_df, grouped_unique_drug_df_VAL, by = 'CODE')
View(comb_grp_drug_df)
colnames(grouped_unique_drug_df_VAL)
comb_grp_drug_df <- merge(grouped_unique_drug_df,
grouped_unique_drug_df_VAL[,c("CODE","VAL_ROOT_group","VAL_SECONDARY_group")], by = 'CODE')
View(comb_grp_drug_df)
View(VAL_df)
write.xlsx(comb_grp_drug_df,paste0(outdir,"Unique_Drug_And_Groups_inALLClaims.xlsx"))
write.xlsx(comb_grp_drug_df,paste0(outdir,"Unique_Drug_And_Groups_inALLClaims.xlsx"),overwrite = TRUE)
colnames(grouped_unique_drug_df)
colnames(comb_grp_drug_df)
DM3_stats1 <- report_code_grps_func(comb_grp_drug_df,"specific_group")
DM3_stats2 <- report_code_grps_func(comb_grp_drug_df,"general_group")
DM3_stats3 <- report_code_grps_func(comb_grp_drug_df,"VAL_ROOT_group")
DM3_stats4 <- report_code_grps_func(comb_grp_drug_df,"VAL_SECONDARY_group")
Drug_stats <- rbind(DM3_stats1,DM3_stats2,DM3_stats3,DM3_stats4)
rownames(Drug_stats) <- c("DM3_specific","DM3_general","VAL_ROOT_group","VAL_SECONDARY_group")
#Drug
DM3_stats1 <- report_code_grps_func(comb_grp_drug_df,"specific_group")
report_code_grps_func <- function(in_data, grp_name){
# in_data <- grouped_unique_diag_df
# grp_name <- "CCS_CATEGORY"
#Get total number of unique codes
n_codes <- nrow(in_data)
#Get number of codes have groups
has_grp_indexes <- which(is.na(in_data[,grp_name])==F)
n_codes_hasgrps <- length(has_grp_indexes)
#Number of codes have no groups
n_codes_NOgrps <-  n_codes - n_codes_hasgrps
#Number of groups
n_grps <-  length(unique(in_data[has_grp_indexes,grp_name]))
grp_stats <- cbind.data.frame(n_codes,n_codes_hasgrps,n_codes_NOgrps,n_grps)
return(grp_stats)
}
#Diag
CCS_stats <- report_code_grps_func(grouped_unique_diag_df,"CCS_CATEGORY")
Chubak_Type_stats <- report_code_grps_func(grouped_unique_diag_df,"Chubak_Type")
Chubak_Category_stats <- report_code_grps_func(grouped_unique_diag_df,"Chubak_Category")
Ritzwoller_Type_stats <- report_code_grps_func(grouped_unique_diag_df,"Ritzwoller_Type")
Ritzwoller_Category_stats <- report_code_grps_func(grouped_unique_diag_df,"Ritzwoller_Category")
Diag_stats <- rbind(CCS_stats,Chubak_Type_stats,Chubak_Category_stats,Ritzwoller_Type_stats,Ritzwoller_Category_stats)
rownames(Diag_stats) <- c("CCS","Chubak_Type","Chubak_Category","Ritzwoller_Type","Ritzwoller_Category")
rownames(Diag_stats) <- paste0("DIAG_",rownames(Diag_stats))
#Proc
CCS_stats <- report_code_grps_func(grouped_unique_proc_df,"CCS_CATEGORY")
Chubak_Type_stats <- report_code_grps_func(grouped_unique_proc_df,"Chubak_Type")
Chubak_Category_stats <- report_code_grps_func(grouped_unique_proc_df,"Chubak_Category")
Ritzwoller_Type_stats <- report_code_grps_func(grouped_unique_proc_df,"Ritzwoller_Type")
Ritzwoller_Category_stats <- report_code_grps_func(grouped_unique_proc_df,"Ritzwoller_Category")
Proc_stats <- rbind(CCS_stats,Chubak_Type_stats,Chubak_Category_stats,Ritzwoller_Type_stats,Ritzwoller_Category_stats)
rownames(Proc_stats) <- c("CCS","Chubak_Type","Chubak_Category","Ritzwoller_Type","Ritzwoller_Category")
rownames(Proc_stats) <- paste0("PROC_",rownames(Proc_stats))
#Drug
DM3_stats1 <- report_code_grps_func(comb_grp_drug_df,"specific_group")
DM3_stats2 <- report_code_grps_func(comb_grp_drug_df,"general_group")
DM3_stats3 <- report_code_grps_func(comb_grp_drug_df,"VAL_ROOT_group")
DM3_stats4 <- report_code_grps_func(comb_grp_drug_df,"VAL_SECONDARY_group")
Drug_stats <- rbind(DM3_stats1,DM3_stats2,DM3_stats3,DM3_stats4)
rownames(Drug_stats) <- c("DM3_specific","DM3_general","VAL_ROOT_group","VAL_SECONDARY_group")
#Check the intersection between DM3 short code and short GNN in claims data
length(intersect(DM3_df$short_code,grouped_unique_drug_df$short_GNN)) #359
length(unique(grouped_unique_drug_df$short_GNN))  #unique short_GNN: 4180
length(unique(DM3_df$short_code))                 #unique short_GNN: 420
#All stats
all_stats <- rbind(Diag_stats,Proc_stats,Drug_stats)
#Drug
DM3_stats1 <- report_code_grps_func(comb_grp_drug_df,"specific_group")
DM3_stats2 <- report_code_grps_func(comb_grp_drug_df,"general_group")
DM3_stats3 <- report_code_grps_func(comb_grp_drug_df,"VAL_ROOT_group")
DM3_stats4 <- report_code_grps_func(comb_grp_drug_df,"VAL_SECONDARY_group")
Drug_stats <- rbind(DM3_stats1,DM3_stats2,DM3_stats3,DM3_stats4)
rownames(Drug_stats) <- c("DM3_specific","DM3_general","VAL_ROOT_group","VAL_SECONDARY_group")
#Check the intersection between DM3 short code and short GNN in claims data
length(intersect(DM3_df$short_code,grouped_unique_drug_df$short_GNN)) #359
length(unique(grouped_unique_drug_df$short_GNN))  #unique short_GNN: 4180
length(unique(DM3_df$short_code))                 #unique short_GNN: 420
#All stats
all_stats <- rbind(Diag_stats,Proc_stats,Drug_stats)
View(Drug_stats)
#1. Load CCS Groups file:
CCS_df <- load_and_clean_CSS_data(grping_data_dir)
CCS_Diag_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Diag","ICD10_Diag")),]
CCS_Proc_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Proc","ICD10_Proc")),]
#2.Load CCS servis procedure group file
CCS_SProc_df <- load_and_clean_CSS_ServicesP_data(grping_data_dir)
#3. Load Chuback Groups file:
Chuback_df <- load_and_clean_Chubak_data(grping_data_dir)
Chuback_Diag_df <- Chuback_df[which(Chuback_df$Code.type %in% c("ICD-9 diagnosis")),]
Chuback_Proc_df <- Chuback_df[which(Chuback_df$Code.type %in% c("HCPC","ICD-9 procedure","CPT", "CPT category II","CPT category III")),]
#4. load Ritzwoller file:
Ritzwoller_df <- load_and_clean_Ritzwoller_data(grping_data_dir)
Ritzwoller_Diag_df <- Ritzwoller_df[which(Ritzwoller_df$D_or_P == "Diagnostic"),] #48
Ritzwoller_Proc_df <- Ritzwoller_df[which(Ritzwoller_df$D_or_P == "Procedure"),] #1008
#5.Load DM3 drug group
DM3_df <- load_and_clean_DM3_data(grping_data_dir)
#6.Load Val drug groups
VAL_df <- load_and_clean_Val_data(grping_data_dir)
################################################################################
#2. Load unique codes data
################################################################################
unique_diag_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Diag_Codes.xlsx"),sheet = 1)
unique_proc_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Proc_Codes.xlsx"),sheet = 1)
unique_drug_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Drug_Codes.xlsx"),sheet = 1)
################################################################################
#3. Code grouping
################################################################################
#1. diagnose codes
grouped_unique_diag_df <- group_codes_into_CCS_func(unique_diag_df,CCS_Diag_df,NULL) #add CCS
grouped_unique_diag_df <- group_codes_into_CCS_func(unique_diag_df,CCS_Diag_df,NULL) #add CCS
grouped_unique_diag_df <- group_codes_into_chubak_func(grouped_unique_diag_df,Chuback_Diag_df) #add chuback
grouped_unique_diag_df <- group_codes_into_Ritzwoller_func(grouped_unique_diag_df,Ritzwoller_Diag_df) #add ritzwoller
#write.xlsx(grouped_unique_diag_df,paste0(outdir,"Unique_Diag_And_Groups_inALLClaims.xlsx"))
#2. procedure codes
grouped_unique_proc_df <- group_codes_into_CCS_func(unique_proc_df,CCS_Proc_df,CCS_SProc_df) #add CCS
grouped_unique_proc_df <- group_codes_into_chubak_func(grouped_unique_proc_df,Chuback_Proc_df)  #add chuback
grouped_unique_proc_df <- group_codes_into_Ritzwoller_func(grouped_unique_proc_df,Ritzwoller_Proc_df)#add ritzwoller
#write.xlsx(grouped_unique_proc_df,paste0(outdir,"Unique_Proc_And_Groups_inALLClaims.xlsx"))
report_code_grps_func <- function(in_data, grp_name){
# in_data <- grouped_unique_diag_df
# grp_name <- "CCS_CATEGORY"
#Get total number of unique codes
n_codes <- nrow(in_data)
#Get number of codes have groups
has_grp_indexes <- which(is.na(in_data[,grp_name])==F)
n_codes_hasgrps <- length(has_grp_indexes)
#Number of codes have no groups
n_codes_NOgrps <-  n_codes - n_codes_hasgrps
#Number of groups
n_grps <-  length(unique(in_data[has_grp_indexes,grp_name]))
grp_stats <- cbind.data.frame(n_codes,n_codes_hasgrps,n_codes_NOgrps,n_grps)
return(grp_stats)
}
#Diag
CCS_stats <- report_code_grps_func(grouped_unique_diag_df,"CCS_CATEGORY")
Chubak_Type_stats <- report_code_grps_func(grouped_unique_diag_df,"Chubak_Type")
Chubak_Category_stats <- report_code_grps_func(grouped_unique_diag_df,"Chubak_Category")
Ritzwoller_Type_stats <- report_code_grps_func(grouped_unique_diag_df,"Ritzwoller_Type")
Ritzwoller_Category_stats <- report_code_grps_func(grouped_unique_diag_df,"Ritzwoller_Category")
Diag_stats <- rbind(CCS_stats,Chubak_Type_stats,Chubak_Category_stats,Ritzwoller_Type_stats,Ritzwoller_Category_stats)
rownames(Diag_stats) <- c("CCS","Chubak_Type","Chubak_Category","Ritzwoller_Type","Ritzwoller_Category")
rownames(Diag_stats) <- paste0("DIAG_",rownames(Diag_stats))
#Proc
CCS_stats <- report_code_grps_func(grouped_unique_proc_df,"CCS_CATEGORY")
Chubak_Type_stats <- report_code_grps_func(grouped_unique_proc_df,"Chubak_Type")
Chubak_Category_stats <- report_code_grps_func(grouped_unique_proc_df,"Chubak_Category")
Ritzwoller_Type_stats <- report_code_grps_func(grouped_unique_proc_df,"Ritzwoller_Type")
Ritzwoller_Category_stats <- report_code_grps_func(grouped_unique_proc_df,"Ritzwoller_Category")
Proc_stats <- rbind(CCS_stats,Chubak_Type_stats,Chubak_Category_stats,Ritzwoller_Type_stats,Ritzwoller_Category_stats)
rownames(Proc_stats) <- c("CCS","Chubak_Type","Chubak_Category","Ritzwoller_Type","Ritzwoller_Category")
rownames(Proc_stats) <- paste0("PROC_",rownames(Proc_stats))
#Drug
DM3_stats1 <- report_code_grps_func(comb_grp_drug_df,"specific_group")
DM3_stats2 <- report_code_grps_func(comb_grp_drug_df,"general_group")
DM3_stats3 <- report_code_grps_func(comb_grp_drug_df,"VAL_ROOT_group")
DM3_stats4 <- report_code_grps_func(comb_grp_drug_df,"VAL_SECONDARY_group")
Drug_stats <- rbind(DM3_stats1,DM3_stats2,DM3_stats3,DM3_stats4)
rownames(Drug_stats) <- c("DM3_specific","DM3_general","VAL_ROOT_group","VAL_SECONDARY_group")
#Check the intersection between DM3 short code and short GNN in claims data
length(intersect(DM3_df$short_code,grouped_unique_drug_df$short_GNN)) #359
length(unique(grouped_unique_drug_df$short_GNN))  #unique short_GNN: 4180
length(unique(DM3_df$short_code))                 #unique short_GNN: 420
#All stats
all_stats <- rbind(Diag_stats,Proc_stats,Drug_stats)
View(all_stats)
write.csv(all_stats,paste0(outdir,"Codes_Stats_inALLClaims_updated.csv"))
#local
data_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/Testing data for UH3 - Dec 16 2020/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/BeforeClean_UniqueCodes/"
data_df2 <- read.csv(paste0(data_dir,"KCR_MEDICAID_PHARMCLAIMS_FB0015.csv"),stringsAsFactors = F)
Drug_NDC_Code1  <- get_uniquecodes_onetype(data_df2,"DRUG_NDC",NDC_drug_cols,"Medicaid")
source("Recapse_Ultility.R")
Drug_NDC_Code1  <- get_uniquecodes_onetype(data_df2,"DRUG_NDC",NDC_drug_cols,"Medicaid")
ICD_diag_cols   <- c("CDE_DIAG_PRIM","CDE_DIAG_2","CDE_DIAG_3","CDE_DIAG_4") #ICD 9 or ICD10
HCPCS_proc_cols <- c("CDE_PROC_PRIM")                                        #HCPCS
AHFS_drug_cols  <- c("CDE_THERA_CLS_AHFS")
NDC_drug_cols   <- c("CDE_NDC")
Drug_NDC_Code1  <- get_uniquecodes_onetype(data_df2,"DRUG_NDC",NDC_drug_cols,"Medicaid")
View(Drug_NDC_Code1)
as.character(3011675)
View(Drug_NDC_Code1)
code_tyoe <- "DRUG_NDC"
in_data <- data_df2
code_tyoe <- "DRUG_NDC"
code_col <- NDC_drug_cols
#Read code columns
code_data      <-  data.frame(in_data[,code_col])
colnames(code_data) <- code_col #for data only has one column
i<-3
curr_col <- code_col[i]
code_data[,curr_col] <- as.character(code_data[,curr_col])
code_col
#Read code columns
code_data      <-  data.frame(in_data[,code_col])
colnames(code_data) <- code_col #for data only has one column
code_data
View(in_data)
View(in_data)
