scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
features <- all_tops_fs
for (i in 1:length(features)){
if (i %% 10 == 0){print(i)}
feature_col <- features[i]
p<-ggplot(plot_df, aes_string(x="Label", y=feature_col, color="Label")) +
geom_violin() +
#geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
features <- all_tops_fs
for (i in 1:length(features)){
if (i %% 10 == 0){print(i)}
feature_col <- features[i]
p<-ggplot(plot_df, aes_string(x="Label", y=feature_col, color="Label")) +
#geom_violin() +
geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
View(feature_contribution_PCA)
check_df <- plot_df[which(plot_df$months_since_dx<=48),]
table(check_df$Label)
check_df <- plot_df[which(plot_df$months_since_dx<=45),]
feature_col <- "months_since_dx"
p<-ggplot(plot_df, aes_string(x="Label", y=feature_col, color="Label")) +
geom_violin() +
#geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
print(p)
check_df <- plot_df[which(plot_df$months_since_dx<=45),]
features <- all_tops_fs
for (i in 1:length(features)){
if (i %% 10 == 0){print(i)}
feature_col <- features[i]
p<-ggplot(plot_df, aes_string(x="Label", y=feature_col, color="Label")) +
geom_violin() +
#geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Violin_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
########################################################################################################
#3.Obvous Pre samples by Most contributed feature on PCA Dim1 and 2 by examing boxplot
########################################################################################################
obs_sample1 <- which(plot_df$Label == "Pre" & plot_df$cumul_ratio_CCS_PROC_202 <0)
length(obs_sample1)
obs_sample2_idxes <- which(plot_df$Label == "Pre" & plot_df$months_since_dx < 48)
all_indxes <- unique(obs_sample1_idxes,obs_sample2_idxes)
########################################################################################################
#3.Obvous Pre samples by Most contributed feature on PCA Dim1 and 2 by examing boxplot
########################################################################################################
obs_sample1_idxes <- which(plot_df$Label == "Pre" & plot_df$cumul_ratio_CCS_PROC_202 <0)
obs_sample2_idxes <- which(plot_df$Label == "Pre" & plot_df$months_since_dx < 48)
all_indxes <- unique(obs_sample1_idxes,obs_sample2_idxes)
length(all_indxes)
colnames(plot_df)
obs_sample_IDs <- plot_df[all_indxes,"study_id"]
obs_sample_IDs <- unique(plot_df[all_indxes,"study_id"])
length(obs_sample_IDs)
obs_sample_IDs_df <-data.frame("Obs_Pre_study_id":obs_sample_IDs)
obs_sample_IDs_df <-data.frame(Obs_Pre_study_id = obs_sample_IDs)
View(obs_sample_IDs_df)
write.csv(obs_sample_IDs_df,paste0(outdir,"Obs_Pre_IDs.csv"))
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir           <- paste0(proj_dir, "12C_TrainTestIDs/")
################################################################################
#1. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir1,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
Final_ID    <- unique(Final_ID_df$study_id)
pts_level_char_df <- read.xlsx(paste0(data_dir1,"9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
pts_level_char_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% Final_ID),] #only keep char for final ID
print("Original non-SBCE vs SBCE : ")
table(pts_level_char_df$SBCE) #16917  1322
data_dir2        <- paste0(proj_dir, "12B_Boxplot/WithPossibleMonthsHasNoCodes/")
################################################################################
#2.Load obvious Pre IDs to remove
################################################################################
obs_Ids_df <- read.csv(paste0(data_dir2,"Obs_Pre_IDs.csv"),stringsAsFactors = F)
obs_Ids <- obs_Ids_df$Obs_Pre_study_id
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
data_dir2        <- paste0(proj_dir, "12B_Boxplot/WithPossibleMonthsHasNoCodes/")
outdir           <- paste0(proj_dir, "12C_TrainTestIDs/")
################################################################################
#1. Load analysis ID
################################################################################
Analysis_df <- read.xlsx(paste0(data_dir1,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_ID    <- unique(Analysis_df$study_id)
length(analysis_ID)
################################################################################
#2.Load obvious Pre IDs to remove
################################################################################
obs_Ids_df <- read.csv(paste0(data_dir2,"Obs_Pre_IDs.csv"),stringsAsFactors = F)
obs_Ids <- obs_Ids_df$Obs_Pre_study_id
Final_ID
analysis_ID
obs_Ids
obs_Ids <- gsub("ID","",obs_Ids_df$Obs_Pre_study_id)
################################################################################
#3.Update Final ID by removing obs IDs
################################################################################
Final_ID <- analysis_ID[-which(analysis_ID %in% obs_Ids)]
length(Final_ID)
11726 + length(obs_Ids)
################################################################################
#4. Pts char
################################################################################
pts_level_char_df <- read.xlsx(paste0(data_dir1,"9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
pts_level_char_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% Final_ID),] #only keep char for final ID
print("Original non-SBCE vs SBCE : ")
table(pts_level_char_df$SBCE) #16917  1322
################################################################################
#2. Get SBCE and non-SBCE IDs
################################################################################
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
original_noSBCE_toSBCEratio <- round(length(nosbce_pt_Ids)/length(sbce_pt_Ids)) #13: 1
original_noSBCE_toSBCEratio
total_n <- length(Final_ID)
set.seed(123)
test_ID   <- sample(Final_ID,0.2*total_n)
train_ID  <- Final_ID[-which(Final_ID %in% test_ID)]
test_ID_withLabel_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% test_ID),c("study_id" , "SBCE")]
train_ID_withLabel_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% train_ID),c("study_id" , "SBCE")]
write.xlsx(test_ID_withLabel_df, paste0(outdir,"test_ID_withLabel.xlsx"))
write.xlsx(train_ID_withLabel_df,paste0(outdir,"train_ID_withLabel.xlsx"))
source("Recapse_Ultility.R")
Data_Sampling_Func <- function(upsample_flag,train_data,label_col_name,seed_num,random_perc = 0.8){
# upsample_flag <- 0
# train_data <- train_data
# label_col_name <- "y_PRE_OR_POST_2ndEvent"
# seed_num <- 1
#Get label col index
label_col_index <- which(colnames(train_data) == label_col_name)
#Sampling
if(upsample_flag==1){ #upsampling
set.seed(seed_num)
up_train <- upSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- up_train
}else if(upsample_flag==0){ #downsample
set.seed(seed_num)
down_train <- downSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else if(upsample_flag==2){ #random sample 90% of orignal data
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
sampled_train_data <- train_data[sampled_indxes,]
}else if (upsample_flag == 3){ #random sample then down sample
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
randomsampled_train_data <- train_data[sampled_indxes,]
down_train <- downSample(x = randomsampled_train_data[, -label_col_index],
y = as.factor(randomsampled_train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else{
original_train <- train_data
sampled_train_data <- original_train
}
return(sampled_train_data)
}
print_n_prepostsamples_func <- function(in_data, data_name){
#in_data <- model_data
tb      <- table(in_data[,"y_PRE_OR_POST_2ndEvent"])
n_pre   <- as.numeric(tb[which(names(tb)==0)])
n_post  <- as.numeric(tb[which(names(tb)==1)])
print(paste0(data_name, "Pre:" , n_pre, " Post:",n_post))
}
get_SampleIDs_withDSLabels <-function(in_data,downsampled_sampleIDs,ds_index){
model_data_IDandLabels <- in_data[,c("study_id","sample_id","y_PRE_OR_POST_2ndEvent")]
#Add downsample train flag col
model_data_IDandLabels$DownSampled_Train <- NA
train_idxes2 <- which(model_data_IDandLabels[,"sample_id"] %in% downsampled_sampleIDs)
model_data_IDandLabels[train_idxes2,"DownSampled_Train"] <- ds_index
return(model_data_IDandLabels)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
#proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "12_TrainTestIDs/")
data_dir2        <- paste0(proj_dir, "11E_AllPTs_ModelReadyData/WithPossibleMonthsHasNoCodes/")
data_dir3        <- paste0(proj_dir, "12A_PCA_TSNE_Analysis/WithPossibleMonthsHasNoCodes/")
outdir           <- paste0(proj_dir, "15_XGB_Input/")
#User input
sampling_flag    <- "Down"
n_sampling       <- 10
################################################################################
#1. Load train and test IDs
################################################################################
train_ID_df <- read.xlsx(paste0(data_dir1,"train_ID_withLabel.xlsx"),sheet = 1)
test_ID_df  <- read.xlsx(paste0(data_dir1,"test_ID_withLabel.xlsx"),sheet = 1)
train_ID <- paste0("ID", train_ID_df$study_id)
test_ID  <- paste0("ID", test_ID_df$study_id)
########################################################################################################
#1. Load and combine all patient model ready data
########################################################################################################
load(file = paste0(data_dir2, "All_PTS_ModelReadyData.rda"))
#remove the const feature
read.csv(paste0(data_dir3,"ConstFeature_removed_ForPCAandtSNE.csv"),stringsAsFactors = F)
source("Recapse_Ultility.R")
Data_Sampling_Func <- function(upsample_flag,train_data,label_col_name,seed_num,random_perc = 0.8){
# upsample_flag <- 0
# train_data <- train_data
# label_col_name <- "y_PRE_OR_POST_2ndEvent"
# seed_num <- 1
#Get label col index
label_col_index <- which(colnames(train_data) == label_col_name)
#Sampling
if(upsample_flag==1){ #upsampling
set.seed(seed_num)
up_train <- upSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- up_train
}else if(upsample_flag==0){ #downsample
set.seed(seed_num)
down_train <- downSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else if(upsample_flag==2){ #random sample 90% of orignal data
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
sampled_train_data <- train_data[sampled_indxes,]
}else if (upsample_flag == 3){ #random sample then down sample
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
randomsampled_train_data <- train_data[sampled_indxes,]
down_train <- downSample(x = randomsampled_train_data[, -label_col_index],
y = as.factor(randomsampled_train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else{
original_train <- train_data
sampled_train_data <- original_train
}
return(sampled_train_data)
}
print_n_prepostsamples_func <- function(in_data, data_name){
#in_data <- model_data
tb      <- table(in_data[,"y_PRE_OR_POST_2ndEvent"])
n_pre   <- as.numeric(tb[which(names(tb)==0)])
n_post  <- as.numeric(tb[which(names(tb)==1)])
print(paste0(data_name, "Pre:" , n_pre, " Post:",n_post))
}
get_SampleIDs_withDSLabels <-function(in_data,downsampled_sampleIDs,ds_index){
model_data_IDandLabels <- in_data[,c("study_id","sample_id","y_PRE_OR_POST_2ndEvent")]
#Add downsample train flag col
model_data_IDandLabels$DownSampled_Train <- NA
train_idxes2 <- which(model_data_IDandLabels[,"sample_id"] %in% downsampled_sampleIDs)
model_data_IDandLabels[train_idxes2,"DownSampled_Train"] <- ds_index
return(model_data_IDandLabels)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "12_TrainTestIDs/")
data_dir2        <- paste0(proj_dir, "11E_AllPTs_ModelReadyData/WithPossibleMonthsHasNoCodes/")
data_dir3        <- paste0(proj_dir, "12A_PCA_TSNE_Analysis/WithPossibleMonthsHasNoCodes/")
outdir           <- paste0(proj_dir, "15_XGB_Input/")
#User input
sampling_flag    <- "Down"
n_sampling       <- 10
################################################################################
#1. Load train and test IDs
################################################################################
train_ID_df <- read.xlsx(paste0(data_dir1,"train_ID_withLabel.xlsx"),sheet = 1)
test_ID_df  <- read.xlsx(paste0(data_dir1,"test_ID_withLabel.xlsx"),sheet = 1)
train_ID <- paste0("ID", train_ID_df$study_id)
test_ID  <- paste0("ID", test_ID_df$study_id)
########################################################################################################
#1. Load and combine all patient model ready data
########################################################################################################
load(file = paste0(data_dir2, "All_PTS_ModelReadyData.rda"))
#remove the const feature
read.csv(paste0(data_dir3,"ConstFeature_removed_ForPCAandtSNE.csv"),stringsAsFactors = F)
#remove the const feature
const_fs <- read.csv(paste0(data_dir3,"ConstFeature_removed_ForPCAandtSNE.csv"),stringsAsFactors = F)
const_fs$colnames.PCA_df..to_remove_f_idxes.
const_fs[,2]
which(colnames(model_data) %in% const_fs[,2])
########################################################################################################
#1. Load and combine all patient model ready data
########################################################################################################
load(file = paste0(data_dir2, "All_PTS_ModelReadyData.rda"))
source("Recapse_Ultility.R")
Data_Sampling_Func <- function(upsample_flag,train_data,label_col_name,seed_num,random_perc = 0.8){
# upsample_flag <- 0
# train_data <- train_data
# label_col_name <- "y_PRE_OR_POST_2ndEvent"
# seed_num <- 1
#Get label col index
label_col_index <- which(colnames(train_data) == label_col_name)
#Sampling
if(upsample_flag==1){ #upsampling
set.seed(seed_num)
up_train <- upSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- up_train
}else if(upsample_flag==0){ #downsample
set.seed(seed_num)
down_train <- downSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else if(upsample_flag==2){ #random sample 90% of orignal data
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
sampled_train_data <- train_data[sampled_indxes,]
}else if (upsample_flag == 3){ #random sample then down sample
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
randomsampled_train_data <- train_data[sampled_indxes,]
down_train <- downSample(x = randomsampled_train_data[, -label_col_index],
y = as.factor(randomsampled_train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else{
original_train <- train_data
sampled_train_data <- original_train
}
return(sampled_train_data)
}
print_n_prepostsamples_func <- function(in_data, data_name){
#in_data <- model_data
tb      <- table(in_data[,"y_PRE_OR_POST_2ndEvent"])
n_pre   <- as.numeric(tb[which(names(tb)==0)])
n_post  <- as.numeric(tb[which(names(tb)==1)])
print(paste0(data_name, "Pre:" , n_pre, " Post:",n_post))
}
get_SampleIDs_withDSLabels <-function(in_data,downsampled_sampleIDs,ds_index){
model_data_IDandLabels <- in_data[,c("study_id","sample_id","y_PRE_OR_POST_2ndEvent")]
#Add downsample train flag col
model_data_IDandLabels$DownSampled_Train <- NA
train_idxes2 <- which(model_data_IDandLabels[,"sample_id"] %in% downsampled_sampleIDs)
model_data_IDandLabels[train_idxes2,"DownSampled_Train"] <- ds_index
return(model_data_IDandLabels)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
#proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "12_TrainTestIDs/")
data_dir2        <- paste0(proj_dir, "11E_AllPTs_ModelReadyData/WithPossibleMonthsHasNoCodes/")
data_dir3        <- paste0(proj_dir, "12A_PCA_TSNE_Analysis/WithPossibleMonthsHasNoCodes/")
outdir           <- paste0(proj_dir, "15_XGB_Input/")
#User input
sampling_flag    <- "Down"
n_sampling       <- 10
################################################################################
#1. Load train and test IDs
################################################################################
train_ID_df <- read.xlsx(paste0(data_dir1,"train_ID_withLabel.xlsx"),sheet = 1)
test_ID_df  <- read.xlsx(paste0(data_dir1,"test_ID_withLabel.xlsx"),sheet = 1)
train_ID <- paste0("ID", train_ID_df$study_id)
test_ID  <- paste0("ID", test_ID_df$study_id)
########################################################################################################
#1. Load and combine all patient model ready data
########################################################################################################
load(file = paste0(data_dir2, "All_PTS_ModelReadyData.rda"))
source("Recapse_Ultility.R")
Data_Sampling_Func <- function(upsample_flag,train_data,label_col_name,seed_num,random_perc = 0.8){
# upsample_flag <- 0
# train_data <- train_data
# label_col_name <- "y_PRE_OR_POST_2ndEvent"
# seed_num <- 1
#Get label col index
label_col_index <- which(colnames(train_data) == label_col_name)
#Sampling
if(upsample_flag==1){ #upsampling
set.seed(seed_num)
up_train <- upSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- up_train
}else if(upsample_flag==0){ #downsample
set.seed(seed_num)
down_train <- downSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else if(upsample_flag==2){ #random sample 90% of orignal data
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
sampled_train_data <- train_data[sampled_indxes,]
}else if (upsample_flag == 3){ #random sample then down sample
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
randomsampled_train_data <- train_data[sampled_indxes,]
down_train <- downSample(x = randomsampled_train_data[, -label_col_index],
y = as.factor(randomsampled_train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else{
original_train <- train_data
sampled_train_data <- original_train
}
return(sampled_train_data)
}
print_n_prepostsamples_func <- function(in_data, data_name){
#in_data <- model_data
tb      <- table(in_data[,"y_PRE_OR_POST_2ndEvent"])
n_pre   <- as.numeric(tb[which(names(tb)==0)])
n_post  <- as.numeric(tb[which(names(tb)==1)])
print(paste0(data_name, "Pre:" , n_pre, " Post:",n_post))
}
get_SampleIDs_withDSLabels <-function(in_data,downsampled_sampleIDs,ds_index){
model_data_IDandLabels <- in_data[,c("study_id","sample_id","y_PRE_OR_POST_2ndEvent")]
#Add downsample train flag col
model_data_IDandLabels$DownSampled_Train <- NA
train_idxes2 <- which(model_data_IDandLabels[,"sample_id"] %in% downsampled_sampleIDs)
model_data_IDandLabels[train_idxes2,"DownSampled_Train"] <- ds_index
return(model_data_IDandLabels)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "12_TrainTestIDs/")
data_dir2        <- paste0(proj_dir, "11E_AllPTs_ModelReadyData/WithPossibleMonthsHasNoCodes/")
data_dir3        <- paste0(proj_dir, "12A_PCA_TSNE_Analysis/WithPossibleMonthsHasNoCodes/")
outdir           <- paste0(proj_dir, "15_XGB_Input/")
#User input
sampling_flag    <- "Down"
n_sampling       <- 10
################################################################################
#1. Load train and test IDs
################################################################################
train_ID_df <- read.xlsx(paste0(data_dir1,"train_ID_withLabel.xlsx"),sheet = 1)
test_ID_df  <- read.xlsx(paste0(data_dir1,"test_ID_withLabel.xlsx"),sheet = 1)
train_ID <- paste0("ID", train_ID_df$study_id)
test_ID  <- paste0("ID", test_ID_df$study_id)
########################################################################################################
#1. Load and combine all patient model ready data
########################################################################################################
load(file = paste0(data_dir2, "All_PTS_ModelReadyData.rda"))
