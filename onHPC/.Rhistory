scale_fill_manual(values=c("steelblue",
"lightpink1","darkslategray1")) +
theme(legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"jp_highlight_region_map")
p3
p2
p2 <- ggplot() +
geom_polygon(data = japan_df,
aes(x=long, y = lat, group = group),
fill = "steelblue3", color = "steelblue3",
size = 0)  +
coord_fixed(1.3) +  #fixed the ratio of x and y
p3 <- ggplot(data = comb_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count), color = "steelblue3",size = 0)+
coord_fixed(1.3) +
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank()) +
theme(text = element_blank()) +
scale_fill_manual(values=c("steelblue",
"lightpink1","darkslategray1")) +
theme(legend.position = 'none',
legend.title = element_blank())
p3 <- ggplot(data = comb_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count), color = "steelblue3",size = 0)+
coord_fixed(1.3) +
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank()) +
theme(text = element_blank()) +
scale_fill_manual(values=c("steelblue",
"lightpink1","darkslategray1")) +
theme(legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"jp_highlight_region_map")
p1 <- ggplot(data = comb_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count), color = "steelblue3",size = 0)+
coord_fixed(1.3) +
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank()) +
theme(text = element_blank()) +
scale_fill_manual(values=c("steelblue", "darkseagreen1",
"darkorange","burlywood1")) +
theme(legend.position = 'none',
legend.title = element_blank())
source("~/Desktop/Personal/Min_Stuff/Map_Bar_Cloud_Plot.R", echo=TRUE)
source("~/Desktop/Personal/Min_Stuff/Map_Bar_Cloud_Plot.R", echo=TRUE)
#devtools::install_github("UrbanInstitute/urbnmapr")
#A.Get us and Ky map data
us_df <- left_join(countydata, counties, by = "county_fips")
ky_df <- us_df[which(us_df[,"state_name"] == "Kentucky"),]
#B. Get county count
#Create toy numbers
ky_region_count_df <- data.frame(county_name = unique(ky_df[,"county_name"]),
count= 0)
ky_region_count_df[,"county_name"] <- as.character(ky_region_count_df[,"county_name"]) # reformat
#Assign numbers
idxes <- which(ky_region_count_df[,"county_name"] == "Fayette County")
ky_region_count_df[idxes,"count"] <- 5
idxes <- which(ky_region_count_df[,"county_name"] == "Jefferson County")
ky_region_count_df[idxes,"count"] <- 10
idxes <- which(ky_region_count_df[,"county_name"] == "Warren County")
ky_region_count_df[idxes,"count"] <- 20
#reformat count
ky_region_count_df[,"count"] <- as.factor(ky_region_count_df[,"count"])
#Combine with the map data
comb_df <- left_join(x= ky_df, y= ky_region_count_df,
by= "county_name")
p1 <- ggplot(data = comb_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count), color = "steelblue3",size = 0)+
coord_fixed(1.3) +
scale_fill_manual(values=c("steelblue", "darkseagreen1",
"darkorange","burlywood1")) +
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"ky_highlight_region_map")
source("~/Desktop/Personal/Min_Stuff/Map_Bar_Cloud_Plot.R", echo=TRUE)
source("~/Desktop/Personal/Min_Stuff/Map_Bar_Cloud_Plot.R", echo=TRUE)
################################################
#1.Load dataset
################################################
#A.Load real dataset here
#student_data <- read.csv()
#B.Create toy data
N_stu <- 100
student_data <- as.data.frame(matrix(NA, nrow = N_stu, ncol = 5))
colnames(student_data) <- c("ID","Location","AnswerToQuestion1","Statement","Recoded_Statement")
student_data[,"ID"] <- seq(1,N_stu,1)
student_data[,"Location"] <- sample(c("Lexington","Louisville","Japan"), size = N_stu, replace = T)
student_data[,"AnswerToQuestion1"] <- sample(c("A,B","A,B,C","B","B,C","D","D,E"), size = N_stu, replace = T)
student_data[,"Recoded_Statement"] <- sample(c("Long hours,less hours",
"Short hours,Random",
"Random,IDC","IDC",
"Another random,Awesome",
"Weird","Awesome"), size = N_stu, replace = T)
################################################
#2.Create word cloud
################################################
#A.Separate multiple answers
stu_statement <- student_data[,"Recoded_Statement"]
stu_statement <- unlist(strsplit(stu_statement,split = ","))
#B.Count
word_count_df <- as.data.frame(table(stu_statement))
#C.Plot
set.seed(1234) # for reproducibility
backgrd_shape_file <- paste0(outdir,"shape.png")
p <- wordcloud2(data=word_count_df, size=1,
color = brewer.pal(8, "Dark2"),
backgroundColor = "white",
fontFamily = 'Arial',
#figPath = backgrd_shape_file,
shape = 'circle')
#minRotation = -30,
#maxRotation = -30,
#rotateRatio = 1)
print(p)
table(student_data$Location)
get_state_county_data <- function(state_name){
#A. Get us and state map data
us_df <- left_join(countydata, counties, by = "county_fips")
state_df <- us_df[which(us_df[,"state_name"] == state_name),]
#B. Initial county count
state_count_df <- data.frame(county_name = unique(ky_df[,"county_name"]),
count= 0)
state_count_df[,"county_name"] <- as.character(state_count_df[,"county_name"]) # reformat
return(state_count_df)
}
get_state_county_data(state_name)
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
state_name <- "Kentucky"
get_state_county_data(state_name)
ky_df <- get_state_county_data(state_name)
View(ky_df)
get_state_county_data <- function(state_name){
#A. Get us and state map data
us_map_df <- left_join(countydata, counties, by = "county_fips")
state_map_df <- us_df[which(us_df[,"state_name"] == state_name),]
#B. Initial county count
state_count_df <- data.frame(county_name = unique(ky_df[,"county_name"]),
count= 0)
state_count_df[,"county_name"] <- as.character(state_count_df[,"county_name"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= state_map_df, y= state_count_df, by= "county_name")
return(comb_df)
}
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
state_name <- "Kentucky"
ky_df <- get_state_county_data(state_name)
View(ky_df)
colnames(ky_df)
get_state_county_data <- function(state_name){
#A. Get us and state map data
us_map_df <- left_join(countydata, counties, by = "county_fips")
state_map_df <- us_df[which(us_df[,"state_name"] == state_name),]
#B. Initial county count
state_count_df <- data.frame(county_name = unique(ky_df[,"county_name"]),
count = 0)
state_count_df[,"county_name"] <- as.character(state_count_df[,"county_name"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= state_map_df, y= state_count_df, by= "county_name")
#D.Keep useful col
comb_df <- comb_df[,c("long","lat","group","state_abbv","state_name","county_name","count")]
return(comb_df)
}
ky_df <- get_state_county_data(state_name)
View(ky_df)
get_US_state_county_data <- function(state_name){
#A. Get us and state map data
us_map_df <- left_join(countydata, counties, by = "county_fips")
state_map_df <- us_df[which(us_df[,"state_name"] == state_name),]
#B. Initial county count
state_count_df <- data.frame(county_name = unique(ky_df[,"county_name"]),
count = 0)
state_count_df[,"county_name"] <- as.character(state_count_df[,"county_name"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= state_map_df, y= state_count_df, by= "county_name")
#D.Keep useful col
comb_df <- comb_df[,c("long","lat","group","state_abbv","state_name","county_name","count")]
return(comb_df)
}
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
#A. Get Kentucky Map Data and Student count
ky_df <- get_US_state_county_data("Kentucky")
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
ky_df[idxes,"count"] <- 5
idxes <- which(ky_df[,"county_name"] == "Jefferson County")
ky_df[idxes,"count"] <- 10
idxes <- which(ky_df[,"county_name"] == "Warren County")
ky_df[idxes,"count"] <- 20
#reformat count
ky_df[,"count"] <- as.factor(ky_df[,"count"])
p1 <- ggplot(data = ky_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count), color = "steelblue3",size = 0)+
coord_fixed(1.3) +
scale_fill_manual(values=c("steelblue", "darkseagreen1",
"darkorange","burlywood1")) +
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"ky_highlight_region_map")
ky_df$count
table(ky_df$count)
View(ky_df)
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
idxes
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
ky_df[idxes,"count"] <- 5
idxes <- which(ky_df[,"county_name"] == "Jefferson County")
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
idxes
ky_df[idxes,"count"] <- 5
ky_df$count
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
#A. Get Kentucky Map Data and Student count
ky_df <- get_US_state_county_data("Kentucky")
ky_df$count
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
ky_df[idxes,"count"] <- 5
idxes <- which(ky_df[,"county_name"] == "Jefferson County")
ky_df[idxes,"count"] <- 10
idxes <- which(ky_df[,"county_name"] == "Warren County")
ky_df[idxes,"count"] <- 20
#reformat count
ky_df[,"count"] <- as.factor(ky_df[,"count"])
table(ky_df$count)
ky_df[,"count"]
View(ky_df)
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
#A. Get Kentucky Map Data and Student count
ky_df <- get_US_state_county_data("Kentucky")
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
ky_df[idxes,"count"]
get_US_state_county_data <- function(state_name){
#A. Get us and state map data
us_map_df <- left_join(countydata, counties, by = "county_fips")
state_map_df <- us_df[which(us_df[,"state_name"] == state_name),]
#B. Initial county count
state_count_df <- data.frame(county_name = unique(ky_df[,"county_name"]),
count = 0)
state_count_df[,"county_name"] <- as.character(state_count_df[,"county_name"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= state_map_df, y= state_count_df, by= "county_name")
#D.Keep useful col
comb_df <- as.data.frame(comb_df[,c("long","lat","group","state_abbv","state_name","county_name","count")])
return(comb_df)
}
################################################
#3. US map
################################################
#devtools::install_github("UrbanInstitute/urbnmapr")
#A. Get Kentucky Map Data and Student count
ky_df <- get_US_state_county_data("Kentucky")
View(ky_df)
#Assign numbers
idxes <- which(ky_df[,"county_name"] == "Fayette County")
ky_df[idxes,"count"] <- 5
idxes <- which(ky_df[,"county_name"] == "Jefferson County")
ky_df[idxes,"count"] <- 10
idxes <- which(ky_df[,"county_name"] == "Warren County")
ky_df[idxes,"count"] <- 20
#reformat count
ky_df[,"count"] <- as.factor(ky_df[,"count"])
table(ky_df$count)
p1 <- ggplot(data = ky_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count), color = "steelblue3",size = 0)+
coord_fixed(1.3) +
scale_fill_manual(values=c("steelblue", "darkseagreen1",
"darkorange","burlywood1")) +
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"ky_highlight_region_map")
################################################
#4. Japan map
################################################
#https://rpubs.com/Ndee/499439
#A.Get japan map data
japan_map_df <- map_data("japan")
#B. Whole map
#1.Create the plot
p2 <- ggplot() +
geom_polygon(data = japan_map_df,
aes(x=long, y = lat, group = group),
fill = "steelblue3", color = "steelblue3",
size = 0)  +
coord_fixed(1.3) +  #fixed the ratio of x and y
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"jp_map")
#A.Get japan map data
japan_map_df <- map_data("japan")
#B. Initial region count
region_count_df <- data.frame(region = unique(japan_map_df[,"region"]),
count= 0)
region_count_df[,"region"] <- as.character(region_count_df[,"region"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= japan_map_df, y= region_count_df, by= "region")
View(comb_df)
colnames(comb_df)
################################################
#4. Japan map
################################################
#https://rpubs.com/Ndee/499439
get_JP_region_data <- function(){
#A.Get japan map data
japan_map_df <- map_data("japan")
#B. Initial region count
region_count_df <- data.frame(region = unique(japan_map_df[,"region"]),
count= 0)
region_count_df[,"region"] <- as.character(region_count_df[,"region"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= japan_map_df, y= region_count_df, by= "region")
#D.Keep useful col
comb_df <- as.data.frame(comb_df[,c("long","lat","group","region","count")])
return(comb_df)
}
################################################
#4. Japan map
################################################
#https://rpubs.com/Ndee/499439
get_JP_region_data <- function(){
#A.Get japan map data
japan_map_df <- map_data("japan")
#B. Initial region count
region_count_df <- data.frame(region = unique(japan_map_df[,"region"]),
count= 0)
region_count_df[,"region"] <- as.character(region_count_df[,"region"]) # reformat
#C.Combine with the map data
comb_df <- left_join(x= japan_map_df, y= region_count_df, by= "region")
#D.Keep useful col
comb_df <- as.data.frame(comb_df[,c("long","lat","group","region","count")])
return(comb_df)
}
################################################
#4. Japan map
################################################
#https://rpubs.com/Ndee/499439
jp_df <- get_JP_region_data()
View(jp_df)
################################################
#4. Japan map
################################################
#https://rpubs.com/Ndee/499439
#A. Get Japan Map Data and Student count
jp_df <- get_JP_region_data()
#B. plot whole map (no highlight on region)
p2 <- ggplot() +
geom_polygon(data = jp_df,
aes(x=long, y = lat, group = group),
fill = "steelblue3", color = "steelblue3",
size = 0)  +
coord_fixed(1.3) +  #fixed the ratio of x and y
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"jp_map")
#D. plot highlight on region map
#Assign numbers
idxes <- which(jp_df[,"region"] == "Tokyo")
jp_df[idxes,"count"] <- 1
idxes <- which(jp_df[,"region"] == "Osaka")
jp_df[idxes,"count"] <- 10
#reformat count
jp_df[,"count"] <- as.factor(jp_df[,"count"])
p3 <- ggplot(data = jp_df, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = count), color = "steelblue3",size = 0)+
coord_fixed(1.3) +
scale_fill_manual(values=c("steelblue",
"lightpink1","darkslategray1")) +
theme(panel.grid.major = element_blank(), #Grid line color1
panel.grid.minor = element_blank(), #Grid line color2
panel.background = element_blank(), #background color
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
text = element_blank(),
legend.position = 'none',
legend.title = element_blank())
#2.Output plot to png
output_plot(outdir,"jp_highlight_region_map")
################################################
#5.Combine KY and JP in one plot
################################################
#1.Combine
figure <- ggarrange(p1, p3,
ncol = 2,
nrow = 1)
#2.Output plot to png
output_plot(outdir,"KYandJP_highlight_region_map",
width = 10, height = 6)
source("Recapse_Ultility.R")
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
exclusion_func <- function(in_data){
exclusion1_indxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
exclusion2_indxes <- which(in_data[,"Stage"]  %in% c(0,4) |
is.na(in_data[,"Stage"])==T) #3491
exclusion3_indxes <- which(in_data[,"Comb_SEERSummStg"]  %in% c(0,7,9) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
exclusion4_indxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
all_exc_indexes <- unique(c(exclusion1_indxes,exclusion2_indxes,exclusion3_indxes,exclusion4_indxes))
updated_in_data <- in_data[-all_exc_indexes,]
return(updated_in_data)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
outdir   <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
################################################################################
#1. Load pts level char
################################################################################
patient_level_char_df1 <- read.xlsx(paste0(data_dir1,"8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
#patient_level_char_df2 <- read.xlsx(paste0(data_dir1,"8_PatientLevel_char_WithEveryMonthsHasCodes.xlsx"),sheet = 1)
indata <- patient_level_char_df1
exclusion1_indxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
in_data <- patient_level_char_df1
exclusion2_indxes <- which(in_data[,"Stage"]  %in% c(0,4) |
is.na(in_data[,"Stage"])==T) #3491
exclusion4_indxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
all_exc_indexes <- c(exclusion2_indxes,exclusion4_indxes)
updated_in_data <- in_data[-all_exc_indexes,]
exclusion2_indxes <- which(in_data[,"Stage"]  %in% c(0,4) |
is.na(in_data[,"Stage"])==T) #3491
length(exclusion3_indxes)
exclusion3_indxes <- which(in_data[,"Comb_SEERSummStg"]  %in% c(0,7,9) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
length(exclusion3_indxes)
in_data <- in_data[-all_exc_indexes,]
exclusion3_indxes <- which(in_data[,"Comb_SEERSummStg"]  %in% c(0,7,9) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
length(exclusion3_indxes)
