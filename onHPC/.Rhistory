curr_f <- features[i]
p <- plot_func(data_df,curr_f,"Record_Time","Time","NATAL")
png(paste0(outdir,curr_f,".png"),height = 600,width = 2000,res = 200)
print(p)
dev.off()
}
for (i in 1:length(features)){
curr_f <- features[i]
p <- plot_func(data_df,curr_f,"Record_Time","Time","NATAL")
png(paste0(outdir,curr_f,".png"),height = 600,width = 2000,res = 120)
print(p)
dev.off()
}
plot_func <-function(df, y_var, x_var, xlabel,plot_data){
# df <- data_df
# y_var <- "SBP"
# x_var <- "Record_Time"
# xlabel <- "Hour"
if(plot_data == "KGDAL"){
p <- ggplot(df[!is.na(df[,y_var]),],aes_string(x= x_var, y=y_var, group = 1))+
geom_point(col = "Darkred",size = 2) +
geom_line(col = "Darkred", size = 1) +
labs(title="",x =xlabel, y = y_var) +
theme(axis.text = element_text(size = 15),
axis.title = element_text(size = 20)) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
scale_x_continuous(breaks=seq(0, nrow(df), 5))
}else if (plot_data == "NATAL"){
p <- ggplot(df,aes_string(x= x_var, y=y_var, group = 1))+
geom_point(col = "Darkred",size = 5) +
#geom_line(col = "Darkred", size = 1) +
#geom_path() +
labs(title="",x =xlabel, y = y_var) +
theme(axis.text = element_text(size = 30),
axis.title = element_text(size = 30)) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
#scale_x_datetime(breaks=seq(min(df$Record_Time), max(df$Record_Time), "1 hour")) +
theme(axis.text.x = element_text(angle = 0, vjust = 1, hjust=1))
}
return(p)
}
####NATAL INPUT
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092721/onRRT_analysis/sample_level_data/raw_features/"
file <- "X1739895299_SP1_onRRT.csv"
outdir <- "/Users/lucasliu/Desktop/Data_Example/NATAL/"
data_df <- read.csv(paste0(data_dir, file), stringsAsFactors = F)
features <- colnames(data_df)[-1]
data_df$Record_Time <- ymd_hms(data_df$Record_Time)
#data_df <- data_df[3:30,]
for (i in 1:length(features)){
curr_f <- features[i]
p <- plot_func(data_df,curr_f,"Record_Time","Time","NATAL")
png(paste0(outdir,curr_f,".png"),height = 600,width = 2000,res = 120)
print(p)
dev.off()
}
View(data_df)
data_df <- read.csv(paste0(data_dir, file), stringsAsFactors = F)
features <- colnames(data_df)[-1]
data_df$Record_Time <- ymd_hms(data_df$Record_Time)
data_df <- data_df[1:116,]
for (i in 1:length(features)){
curr_f <- features[i]
p <- plot_func(data_df,curr_f,"Record_Time","Time","NATAL")
png(paste0(outdir,curr_f,".png"),height = 600,width = 2000,res = 120)
print(p)
dev.off()
}
for (i in 1:length(features)){
curr_f <- features[i]
p <- plot_func(data_df,curr_f,"Record_Time","Time","NATAL")
png(paste0(outdir,curr_f,".png"),height = 400,width = 1600,res = 100)
print(p)
dev.off()
}
for (i in 1:length(features)){
curr_f <- features[i]
p <- plot_func(data_df,curr_f,"Record_Time","Time","NATAL")
png(paste0(outdir,curr_f,".png"),height = 200,width = 1000,res = 80)
print(p)
dev.off()
}
for (i in 1:length(features)){
curr_f <- features[i]
p <- plot_func(data_df,curr_f,"Record_Time","Time","NATAL")
png(paste0(outdir,curr_f,".png"),height = 300,width = 1000,res = 80)
print(p)
dev.off()
}
library(openxlsx)
library(lubridate)
library(openxlsx)
proj_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/UTSW_Data/"
data_dir     <- paste0( proj_dir, "UTSW_RawDynamic_Data/")
new_data_dir <- paste0( proj_dir, "UTSW_RawDynamic_Data/UTSW_Data_092321/")
HospICUTime_df_new2 <- read.xlsx(paste0(new_data_dir,"req1242_all_disch_disp_exported by Xl 11082021.xlsx"), sheet = 1)
min(dmy_hms(HospICUTime_df_new2$HOSP_ADMSN_TIME)) #1997
HospICUTime_df_new2$HOSP_ADMSN_TIME[1]
HospICUTime_df_new2 <- read.xlsx(paste0(new_data_dir,"req1242_all_disch_disp_exported by Xl 11082021.xlsx"), sheet = 1, detectDates = TRUE)
min(dmy_hms(HospICUTime_df_new2$HOSP_ADMSN_TIME)) #1997
HospICUTime_df_new2$HOSP_ADMSN_TIME[1]
View(HospICUTime_df_new2)
library(rhdf5)
install.packages("rhdf5")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rhdf5")
library(rhdf5)
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092721/onRRT_analysis/Model_Ready_data/NATAL/valid_data.h5"
data <- h5read(data_dir,"x1")
data <- h5read(data_dir,"valid_X1")
library(rhdf5)
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092721/onRRT_analysis/Model_Ready_data/NATAL/valid_data.h5"
data <- h5read(data_dir,"valid_X1")
data_column_names <- data[[5]]
data_column_names <- unlist(data_column_names)
data_matrix <- data[[6]]
data_matrix <- t(data_matrix)
colnames(data_matrix) <- data_column_names
library(data.table)
valid_d <- data.table(data_matrix)
data[[1]]
data[[2]]
h5ls(data_dir)
data <- h5read(data_dir,"valid_X1")
length(data[[1]])
length(data[[2]])
length(data[[3]])
length(data[[4]])
length(data[[5]])
length(data[[10]])
colnames(train_data_part)
################################################################################
#SHAP for Train
################################################################################
check <- as.matrix(train_data_part)
library("SHAPforxgboost")
library("ggplot2")
library("xgboost")
library("data.table")
library("here")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1111updated/")
data_dir2        <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1111updated/Use_ImportantFs_Performance/")
outdir           <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1_1111updated/SHAP/")
#my_model <- readRDS("model1.rds")source("Recapse_Ultility.R")
#Downsampled index
ds_index <- 1
################################################################################
#Load train and test
################################################################################
load(file = paste0(data_dir1, "XGB_Input/train_data_DS", ds_index, ".rda"))
load(file = paste0(data_dir1, "XGB_Input/test_data.rda"))
################################################################################
#Load important features for each DS
################################################################################
important_f_df <- read.csv(paste0(data_dir1,"All_DS_Performance/train_DS",ds_index,"/BeforeSmoothed/16_importance_matrix_DS", ds_index ,"_posweight0.5.csv"), stringsAsFactors = F)
important_f_df <- important_f_df[order(important_f_df[,"Gain"],decreasing = T),]
top_fs <- important_f_df[1:50,"Feature"]
################################################################################
#Create xgb input
################################################################################
train_label      <- as.numeric(train_data[,"y_PRE_OR_POST_2ndEvent"])
train_data_part  <- train_data[,top_fs] #top 50 features
################################################################################
#SHAP for Train
################################################################################
check <- as.matrix(train_data_part)
coln
colnames(check)
################################################################################
#SHAP for Train
################################################################################
check <- as.matrix(train_data_part[1:500,1:10])
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = check)
#Load Optimal model
mod_optimal <- readRDS(paste0(data_dir2,"train_DS",ds_index, "/BeforeSmoothed/model", ds_index, ".rds"))
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = check)
################################################################################
#SHAP for Train
################################################################################
check <- as.matrix(train_data_part[1:500,])
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = check)
#Plot
outfile_name <- paste0(outdir, "train_DS",ds_index,"/","SHAP_train.png")
png(outfile_name)
print(shap.plot.summary.wrap1(model = mod_optimal, X = as.matrix(train_data_part),top_n = 10))
dev.off()
#Plot
outfile_name <- paste0(outdir, "train_DS",ds_index,"/","SHAP_train.png")
png(outfile_name)
print(shap.plot.summary.wrap1(model = mod_optimal, X = as.matrix(train_data_part[1:500,]),top_n = 10))
dev.off()
outfile_name <- paste0(outdir, "train_DS",ds_index,"/","SHAP_train.png")
png(outfile_name)
print(shap.plot.summary.wrap1(model = mod_optimal, X = as.matrix(train_data_part[1:1000,]),top_n = 10))
dev.off()
outfile_name <- paste0(outdir, "train_DS",ds_index,"/","SHAP_train.png")
png(outfile_name)
print(shap.plot.summary.wrap1(model = mod_optimal, X = as.matrix(train_data_part[1:200,]),top_n = 10))
dev.off()
2.576* sqrt(0.21(1-0.21)/200)
2.576* sqrt(0.21*(1-0.21)/200)
sqrt(0.21*(1-0.21) /sqrt(200)
)
sqrt(0.21*(1-0.21) /sqrt(200))
2.576 * sqrt(0.21*(1-0.21) /sqrt(200))
2.576 * (sqrt(0.21*(1-0.21) /sqrt(200)))
2.576* sqrt(0.21*(1-0.21)/200)
2.576 * (sqrt(0.21*(1-0.21)) /sqrt(200))
numeritor <- 0.21*(1-0.21)
denuminator <- 200
numeritor
denuminator
2.576 * (sqrt(numeritor) /sqrt(denuminator))
sqrt(numeritor)
numeritor
sqrt(numeritor)
2.576 * (round(sqrt(numeritor),1) /sqrt(denuminator))
sqrt(denuminator)
2.576 * (round(sqrt(numeritor),1) /round(sqrt(denuminator),1))
4263 + 3988
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir  <- paste0(proj_dir, "11E_AllPTs_ModelReadyData/WithPossibleMonthsHasNoCodes/")
data_dir2 <- paste0(proj_dir, "12B_Boxplot_AndAfterRemovalPCA/WithPossibleMonthsHasNoCodes/")
outdir2   <- paste0(proj_dir, "12B_Boxplot_AndAfterRemovalPCA/WithPossibleMonthsHasNoCodes/AfterRemovalPCA/")
########################################################################################################
#1. Load all pts model data
########################################################################################################
#1A. Load data
load(file = paste0(data_dir, "All_PTS_ModelReadyData.rda"))
label_col   <- "y_PRE_OR_POST_2ndEvent"
#1B. Change the label value from 0,1 to Pre,Post
pre_idxes  <- which(model_data[,label_col] == 0)
post_idxes <- which(model_data[,label_col] == 1)
model_data[pre_idxes,label_col] <- "Pre"
model_data[post_idxes,label_col] <- "Post"
#1C.Factorize the label col
model_data[,label_col] <- factor(model_data[,label_col],levels = c("Pre", "Post"))
#1D.Change label name
colnames(model_data)[which(colnames(model_data) == label_col)] <- "Label" #Change label col name for plot
colnames(model_data)[1]
model_data_2f <- model_data[,c("sample_id","cumul_ratio_CCS_PROC_202",
"cumul_ratio_CCS_PROC_227",
"months_since_dx",
"Label")]
outdir
outdir2   <- paste0(proj_dir, "12B_Boxplot_AndAfterRemovalPCA/WithPossibleMonthsHasNoCodes/AfterRemovalPCA/")
save(model_data_2f, file=paste0(outdir2, "3f_ModelReadyData.rda"))
source("Recapse_Ultility.R")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir  <- paste0(proj_dir, "11E_AllPTs_ModelReadyData/WithPossibleMonthsHasNoCodes/")
data_dir2 <- paste0(proj_dir, "12B_Boxplot_AndAfterRemovalPCA/WithPossibleMonthsHasNoCodes/")
outdir2   <- paste0(proj_dir, "12B_Boxplot_AndAfterRemovalPCA/WithPossibleMonthsHasNoCodes/AfterRemovalPCA/")
########################################################################################################
#4.Find samples < threshold OR > threshold by Most contributed feature on PCA Dim1 by examing boxplot
########################################################################################################
# model_data_2f <- model_data[,c("sample_id","cumul_ratio_CCS_PROC_202",
#                                "cumul_ratio_CCS_PROC_227",
#                                "months_since_dx",
#                                "Label")]
#save(model_data_2f, file=paste0(outdir2, "3f_ModelReadyData.rda"))
model_data <- load(file = paste0(outdir2, "3f_ModelReadyData.rda"))
thres1 <- 7.5
thres2 <- 48
sample1_idxes <- which(model_data[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data[,"months_since_dx"] < thres2 )
sample1_data  <- model_data[sample1_idxes,]
label_tb <- table(sample1_data[,"Label"]) #Pre: 346296, Post : 6364
print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
thres1 <- 7.5
thres2 <- 48
sample1_idxes <- which(model_data[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data[,"months_since_dx"] < thres2 )
colnames(model_data)
########################################################################################################
#4.Find samples < threshold OR > threshold by Most contributed feature on PCA Dim1 by examing boxplot
########################################################################################################
# model_data_2f <- model_data[,c("sample_id","cumul_ratio_CCS_PROC_202",
#                                "cumul_ratio_CCS_PROC_227",
#                                "months_since_dx",
#                                "Label")]
#save(model_data_2f, file=paste0(outdir2, "3f_ModelReadyData.rda"))
model_data_2f <- load(file = paste0(outdir2, "3f_ModelReadyData.rda"))
thres1 <- 7.5
thres2 <- 48
sample1_idxes <- which(model_data_2f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_2f[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data_2f[,"months_since_dx"] < thres2 )
colnames(model_data_2f)
load(file = paste0(outdir2, "3f_ModelReadyData.rda"))
thres1 <- 7.5
thres2 <- 48
sample1_idxes <- which(model_data_2f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_2f[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data_2f[,"months_since_dx"] < thres2 )
sample1_data  <- model_data_2f[sample1_idxes,]
label_tb <- table(sample1_data[,"Label"]) #Pre: 346296, Post : 6364
print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
print(label_tb["Pre"]/label_tb["Post"])
label_tb["Pre"]
label_tb["Pre"]/label_tb["Post"]
print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
724693/(nrow(sample1_data))
label_tb["Pre"]/(nrow(sample1_data))
#after
data_after <- model_data_2f[-sample1_idxes,]
label_tb <- table(data_after[,"Label"]) #Pre: 346296, Post : 6364
print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
482058/25915
y <- label_tb["Pre"]/(nrow(data_after))
x
x <- label_tb["Pre"]/(nrow(sample1_data))
y <- label_tb["Pre"]/(nrow(data_after))
thres1_list <- seq(5,7.5,0.1)
thres2_list <- seq(48,60,1)
x_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
y_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
for (i in 1:length(thres1_list)){
thres1 <- thres1_list[i]
for (j in 1:length(thres2_list)){
thres2 <- thres2_list[j]
sample1_idxes <- which(model_data_2f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_2f[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data_2f[,"months_since_dx"] < thres2 )
sample1_data  <- model_data_2f[sample1_idxes,]
label_tb <- table(sample1_data[,"Label"])
print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
x_list[i,j] <- label_tb["Pre"]/(nrow(sample1_data))
#after
data_after <- model_data_2f[-sample1_idxes,]
label_tb <- table(data_after[,"Label"])
print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
y_list[i,j] <- label_tb["Pre"]/(nrow(data_after))
}
}
length(thres1_list)
length(thres2_list)
thres1_list <- seq(5,7.5,0.1)
thres2_list <- seq(48,60,1)
x_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
y_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
for (i in 1:length(thres1_list)){
if(i %% 10 == 0){print(i)}
thres1 <- thres1_list[i]
for (j in 1:length(thres2_list)){
thres2 <- thres2_list[j]
sample1_idxes <- which(model_data_2f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_2f[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data_2f[,"months_since_dx"] < thres2 )
sample1_data  <- model_data_2f[sample1_idxes,]
label_tb <- table(sample1_data[,"Label"])
#print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
x_list[i,j] <- label_tb["Pre"]/(nrow(sample1_data))
#after
data_after <- model_data_2f[-sample1_idxes,]
label_tb <- table(data_after[,"Label"])
#print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
y_list[i,j] <- label_tb["Pre"]/(nrow(data_after))
}
}
View(x_list)
View(y_list)
thres1_list <- seq(5,7.5,0.1)
thres2_list <- seq(48,60,1)
x_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
y_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
i < -1
if(i %% 10 == 0){print(i)}
thres1 <- thres1_list[i]
for (j in 1:length(thres2_list)){
thres2 <- thres2_list[j]
sample1_idxes <- which(model_data_2f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_2f[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data_2f[,"months_since_dx"] < thres2 )
sample1_data  <- model_data_2f[sample1_idxes,]
label_tb <- table(sample1_data[,"Label"])
#print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
x_list[i,j] <- label_tb["Pre"]/(nrow(sample1_data))
#after
data_after <- model_data_2f[-sample1_idxes,]
label_tb <- table(data_after[,"Label"])
#print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
y_list[i,j] <- label_tb["Pre"]/label_tb["Post"]
}
thres1_list <- seq(5,7.5,0.1)
thres2_list <- seq(48,60,1)
x_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
y_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
for (i in 1:length(thres1_list)){
i <- 1
if(i %% 10 == 0){print(i)}
thres1 <- thres1_list[i]
for (j in 1:length(thres2_list)){
thres2 <- thres2_list[j]
sample1_idxes <- which(model_data_2f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_2f[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data_2f[,"months_since_dx"] < thres2 )
sample1_data  <- model_data_2f[sample1_idxes,]
label_tb <- table(sample1_data[,"Label"])
#print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
x_list[i,j] <- label_tb["Pre"]/(nrow(sample1_data))
#after
data_after <- model_data_2f[-sample1_idxes,]
label_tb <- table(data_after[,"Label"])
#print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
y_list[i,j] <- label_tb["Pre"]/label_tb["Post"]
}
}
View(y_list)
thres1_list <- seq(5,7.5,0.1)
thres2_list <- seq(48,60,1)
x_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
y_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
for (i in 1:length(thres1_list)){
if(i %% 10 == 0){print(i)}
thres1 <- thres1_list[i]
for (j in 1:length(thres2_list)){
thres2 <- thres2_list[j]
sample1_idxes <- which(model_data_2f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_2f[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data_2f[,"months_since_dx"] < thres2 )
sample1_data  <- model_data_2f[sample1_idxes,]
label_tb <- table(sample1_data[,"Label"])
#print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
x_list[i,j] <- label_tb["Pre"]/(nrow(sample1_data))
#after
data_after <- model_data_2f[-sample1_idxes,]
label_tb <- table(data_after[,"Label"])
#print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
y_list[i,j] <- label_tb["Pre"]/label_tb["Post"]
}
}
View(x_list)
x_list_flat <- unlist(x_list)
y_list_flat <- unlist(y_list)
plot(x_list_flat,y_list_flat)
length(x_list_flat)
thres1_list <- seq(5,7.5,0.1)
thres2_list <- 48
x_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list)))
y_list <- as.data.frame(matrix(NA, nrow = length(thres1_list), ncol = length(thres2_list))) #Ratio after removal
for (i in 1:length(thres1_list)){
if(i %% 10 == 0){print(i)}
thres1 <- thres1_list[i]
for (j in 1:length(thres2_list)){
thres2 <- thres2_list[j]
sample1_idxes <- which(model_data_2f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_2f[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data_2f[,"months_since_dx"] < thres2 )
sample1_data  <- model_data_2f[sample1_idxes,]
label_tb <- table(sample1_data[,"Label"])
#print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
x_list[i,j] <- label_tb["Pre"]/(nrow(sample1_data))
#after
data_after <- model_data_2f[-sample1_idxes,]
label_tb <- table(data_after[,"Label"])
#print(paste("Labels (Sample1 to be treated as negtives):","Pre:",label_tb["Pre"],"Post:",label_tb["Post"]))
y_list[i,j] <- label_tb["Pre"]/label_tb["Post"]
}
}
x_list_flat <- unlist(x_list)
y_list_flat <- unlist(y_list)
plot(x_list_flat,y_list_flat)
