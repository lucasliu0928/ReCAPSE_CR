########################################################################################################
#Load labels
########################################################################################################
label_df <- read.csv(paste0(proj_dir,"FinalIDs_spOutcome.csv"),stringsAsFactors = F)
match_order2 <- match(label_df[,"SAMPLE_ID"],comb_df[,"SAMPLE_ID"])
label_df$SAMPLE_ID
comb_df[,"SAMPLE_ID"]
match_order2 <- match(label_df[,"SAMPLE_ID"],rownames(comb_df))
match_order2
match_order2[1:10]
comb_df_withLabel <- cbind(comb_df,label_df[,c("sample_death_in24h")])
View(comb_df_withLabel)
which(colnames(comb_df_withLabel)=="sample_death_in24h")
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)]
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)] <- "sample_death_in24h"
#Run PCA
res.pca <- PCA(comb_df_withLabel[,-ncol(comb_df_withLabel)], graph = FALSE)
eig.val <- get_eigenvalue(res.pca)
#Perc of explained Variation
p <- fviz_eig(res.pca, ncp = 10, addlabels = TRUE, ylim = c(0, max(eig.val[,2] + eig.val[,2]/5)))
#png(paste0(outdir,"PCA_Explained_Var.png"),res = 150,width = 1800,height = 1200)
print(p)
#Get varaible contribution
var <- get_pca_var(res.pca)
var_contribution <- var$contrib
#plot
p <- fviz_pca_ind(res.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = as.factor(comb_df_withLabel$sample_death_in24h), # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups")
print(p)
#Input df
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
tsne_out <- Rtsne(input_df,pca=TRUE,perplexity=50) # Run TSNE
summary(input_df)
which(is.na(input_df)==T)
which(is.na(input_df)==T,arr.ind = T)
colnames(static_df)
j<-4
curr_col <- static_df[,j]
curr_col
which(is.na(curr_col)==T)
colnames(static_df)
curr_col[which(is.na(curr_col)==T)]
j<-5
curr_col <- static_df[,j]
curr_col[which(is.na(curr_col)==T)]
j<-5
curr_col <- static_df[,j]
curr_col[which(is.na(curr_col)==T)]
j<-6
curr_col <- static_df[,j]
curr_col[which(is.na(curr_col)==T)]
curr_col
colnames(comb_df_withLabel)
colnames(comb_df_withLabel)[4]
colnames(static_df)
na_indxes <- which(is.na(curr_col)==T)
curr_col[na_indxes]
#Inpute static with median
for (j in 3:ncol(static_df)){
curr_col <- static_df[,j]
na_indxes <- which(is.na(curr_col)==T)
if (length(na_indxes) > 0){
static_df[na_indxes,j] <- median(static_df[,j],na.rm = T)
}
}
#MAtch ID order
match_order <- match(avg_max_min_df[,"SAMPLE_ID"],static_df[,"SAMPLE_ID"])
comb_df <- cbind(static_df[match_order,-1],avg_max_min_df[,-1])
rownames(comb_df) <- comb_df$SAMPLE_ID
comb_df <- comb_df[,-1]
match_order2 <- match(label_df[,"SAMPLE_ID"],rownames(comb_df))
comb_df_withLabel <- cbind(comb_df,label_df[,c("sample_death_in24h")])
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)] <- "sample_death_in24h"
#Input df
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
#Run PCA
res.pca <- PCA(input_df, graph = FALSE)
eig.val <- get_eigenvalue(res.pca)
#Perc of explained Variation
p <- fviz_eig(res.pca, ncp = 10, addlabels = TRUE, ylim = c(0, max(eig.val[,2] + eig.val[,2]/5)))
#png(paste0(outdir,"PCA_Explained_Var.png"),res = 150,width = 1800,height = 1200)
print(p)
#Get varaible contribution
var <- get_pca_var(res.pca)
var_contribution <- var$contrib
#plot
p <- fviz_pca_ind(res.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = as.factor(comb_df_withLabel$sample_death_in24h), # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups")
#png(paste0(outdir,"PCA_2DPlot.png"),res = 150,width = 1800,height = 1200)
print(p)
####################################################################################################
# Run tsne
####################################################################################################
set.seed(42)
tsne_out <- Rtsne(input_df,pca=TRUE,perplexity=50) # Run TSNE
tsne_out <- Rtsne(input_df,pca=TRUE,perplexity=30) # Run TSNE
duplicated(input_df)
which(duplicated(input_df)==T)
library(Rtsne)
library("FactoMineR")
library("factoextra")
################################################################################
#Data dir
################################################################################
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092721/onRRT_analysis/sample_level_data/"
#data dir
data_dir1  <- paste0(proj_dir, "AVG_MAX_MIN_Feature/")
data_dir2  <- paste0(proj_dir, "static_features/")
########################################################################################################
#Load labels
########################################################################################################
label_df <- read.csv(paste0(proj_dir,"FinalIDs_spOutcome.csv"),stringsAsFactors = F)
########################################################################################################
#1. Load all stationary feature data
########################################################################################################
avg_max_min_df <- read.csv(paste0(data_dir1,"All_AVGMAXMIN_onRRT_Imputed.csv"),stringsAsFactors = F)
static_df      <- read.csv(paste0(data_dir2,"samples_static_features_onRRT.csv"),stringsAsFactors = F)
#Inpute static with median
for (j in 3:ncol(static_df)){
curr_col <- static_df[,j]
na_indxes <- which(is.na(curr_col)==T)
if (length(na_indxes) > 0){
static_df[na_indxes,j] <- median(static_df[,j],na.rm = T)
}
}
#MAtch ID order
match_order <- match(avg_max_min_df[,"SAMPLE_ID"],static_df[,"SAMPLE_ID"])
comb_df <- cbind(static_df[match_order,-1],avg_max_min_df[,-1])
rownames(comb_df) <- comb_df$SAMPLE_ID
comb_df <- comb_df[,-1]
match_order2 <- match(label_df[,"SAMPLE_ID"],rownames(comb_df))
comb_df_withLabel <- cbind(comb_df,label_df[,c("sample_death_in24h")])
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)] <- "sample_death_in24h"
#Input df
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
#remove duplicated rows for tSNE
input_df <- input_df[!duplicated(input_df)]
#remove duplicated rows for tSNE
input_df <- input_df[!duplicated(input_df)]
duplicated(input_df)
#remove duplicated rows for tSNE
input_df <- input_df[!duplicated(input_df),]
library(Rtsne)
library("FactoMineR")
library("factoextra")
################################################################################
#Data dir
################################################################################
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092721/onRRT_analysis/sample_level_data/"
#data dir
data_dir1  <- paste0(proj_dir, "AVG_MAX_MIN_Feature/")
data_dir2  <- paste0(proj_dir, "static_features/")
########################################################################################################
#Load labels
########################################################################################################
label_df <- read.csv(paste0(proj_dir,"FinalIDs_spOutcome.csv"),stringsAsFactors = F)
########################################################################################################
#1. Load all stationary feature data
########################################################################################################
avg_max_min_df <- read.csv(paste0(data_dir1,"All_AVGMAXMIN_onRRT_Imputed.csv"),stringsAsFactors = F)
static_df      <- read.csv(paste0(data_dir2,"samples_static_features_onRRT.csv"),stringsAsFactors = F)
#Inpute static with median
for (j in 3:ncol(static_df)){
curr_col <- static_df[,j]
na_indxes <- which(is.na(curr_col)==T)
if (length(na_indxes) > 0){
static_df[na_indxes,j] <- median(static_df[,j],na.rm = T)
}
}
#MAtch ID order
match_order <- match(avg_max_min_df[,"SAMPLE_ID"],static_df[,"SAMPLE_ID"])
comb_df <- cbind(static_df[match_order,-1],avg_max_min_df[,-1])
rownames(comb_df) <- comb_df$SAMPLE_ID
comb_df <- comb_df[,-1]
match_order2 <- match(label_df[,"SAMPLE_ID"],rownames(comb_df))
comb_df_withLabel <- cbind(comb_df,label_df[,c("sample_death_in24h")])
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)] <- "sample_death_in24h"
#########################################################
#Input df, remove duplicated rows
#########################################################
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
#remove duplicated rows for tSNE
input_df <- input_df[!duplicated(input_df),]
#Run PCA
res.pca <- PCA(input_df, graph = FALSE)
eig.val <- get_eigenvalue(res.pca)
#write.csv(eig.val,paste0(outdir,"PCA_Eigenvalues.csv"))
#Perc of explained Variation
p <- fviz_eig(res.pca, ncp = 10, addlabels = TRUE, ylim = c(0, max(eig.val[,2] + eig.val[,2]/5)))
#png(paste0(outdir,"PCA_Explained_Var.png"),res = 150,width = 1800,height = 1200)
print(p)
#dev.off()
#Get varaible contribution
var <- get_pca_var(res.pca)
var_contribution <- var$contrib
#write.csv(var_contribution,paste0(outdir,"PCA_Variable_Contribution.csv"))
#plot
p <- fviz_pca_ind(res.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = as.factor(comb_df_withLabel$sample_death_in24h), # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups")
#png(paste0(outdir,"PCA_2DPlot.png"),res = 150,width = 1800,height = 1200)
print(p)
#dev.off()
####################################################################################################
# Run tsne
####################################################################################################
set.seed(42)
tsne_out <- Rtsne(input_df,pca=TRUE,perplexity=30) # Run TSNE
View(var_contribution)
outdir
source('~/Desktop/tSNE_PCA_NATAL.R', echo=TRUE)
#Perc of explained Variation
p <- fviz_eig(res.pca, ncp = 10, addlabels = TRUE, ylim = c(0, max(eig.val[,2] + eig.val[,2]/5)))
png(paste0(outdir,"PCA_Explained_Var.png"),res = 150,width = 1800,height = 1200)
print(p)
dev.off()
#Get varaible contribution
var <- get_pca_var(res.pca)
var_contribution <- var$contrib
write.csv(var_contribution,paste0(outdir,"PCA_Variable_Contribution.csv"))
#plot
p <- fviz_pca_ind(res.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = as.factor(comb_df_withLabel$sample_death_in24h), # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups")
library(Rtsne)
library("FactoMineR")
library("factoextra")
################################################################################
#Data dir
################################################################################
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092721/onRRT_analysis/sample_level_data/"
#data dir
data_dir1  <- paste0(proj_dir, "AVG_MAX_MIN_Feature/")
data_dir2  <- paste0(proj_dir, "static_features/")
outdir <- "/Users/lucasliu/Desktop/NATAL_PCA/"
########################################################################################################
#Load labels
########################################################################################################
label_df <- read.csv(paste0(proj_dir,"FinalIDs_spOutcome.csv"),stringsAsFactors = F)
########################################################################################################
#1. Load all stationary feature data
########################################################################################################
avg_max_min_df <- read.csv(paste0(data_dir1,"All_AVGMAXMIN_onRRT_Imputed.csv"),stringsAsFactors = F)
static_df      <- read.csv(paste0(data_dir2,"samples_static_features_onRRT.csv"),stringsAsFactors = F)
#Inpute static with median
for (j in 3:ncol(static_df)){
curr_col <- static_df[,j]
na_indxes <- which(is.na(curr_col)==T)
if (length(na_indxes) > 0){
static_df[na_indxes,j] <- median(static_df[,j],na.rm = T)
}
}
#MAtch ID order
match_order <- match(avg_max_min_df[,"SAMPLE_ID"],static_df[,"SAMPLE_ID"])
comb_df <- cbind(static_df[match_order,-1],avg_max_min_df[,-1])
rownames(comb_df) <- comb_df$SAMPLE_ID
comb_df <- comb_df[,-1]
match_order2 <- match(label_df[,"SAMPLE_ID"],rownames(comb_df))
comb_df_withLabel <- cbind(comb_df,label_df[,c("sample_death_in24h")])
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)] <- "sample_death_in24h"
#########################################################
#Input df, remove duplicated rows
#########################################################
#remove duplicated rows for tSNE
input_df <- input_df[!duplicated(input_df),]
#########################################################
#Input df, remove duplicated rows
#########################################################
#remove duplicated rows for tSNE
comb_df_withLabel <- comb_df_withLabel[!duplicated(comb_df_withLabel),]
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
#Run PCA
res.pca <- PCA(input_df, graph = FALSE)
eig.val <- get_eigenvalue(res.pca)
write.csv(eig.val,paste0(outdir,"PCA_Eigenvalues.csv"))
#Perc of explained Variation
p <- fviz_eig(res.pca, ncp = 10, addlabels = TRUE, ylim = c(0, max(eig.val[,2] + eig.val[,2]/5)))
png(paste0(outdir,"PCA_Explained_Var.png"),res = 150,width = 1800,height = 1200)
print(p)
dev.off()
#Get varaible contribution
var <- get_pca_var(res.pca)
var_contribution <- var$contrib
write.csv(var_contribution,paste0(outdir,"PCA_Variable_Contribution.csv"))
#plot
p <- fviz_pca_ind(res.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = as.factor(comb_df_withLabel$sample_death_in24h), # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups")
png(paste0(outdir,"PCA_2DPlot.png"),res = 150,width = 1800,height = 1200)
print(p)
dev.off()
tsne_out <- Rtsne(input_df,pca=TRUE,perplexity=30) # Run TSNE
#########################################################
#Input df, remove duplicated rows
#########################################################
#remove duplicated rows for tSNE
comb_df_withLabel <- comb_df_withLabel[!duplicated(comb_df_withLabel[,-ncol(comb_df_withLabel)]),]
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
source('~/Desktop/tSNE_PCA_NATAL.R', echo=TRUE)
tsne_out_df <- data.frame(Y = tsne_out$Y,
Class_label = comb_df_withLabel$sample_death_in24h,
ID = rownames(input_df))
p <- ggplot(tsne_out_df, aes(x=Y.1, y=Y.2,color = Class_label)) +
geom_point(size = 5) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="none",legend.title = element_blank(),legend.text=element_text(size=20)) +
theme(axis.text = element_text(size = 20),axis.title=element_text(size=20,face="bold")) +
guides(color = guide_legend(nrow = 3, byrow = TRUE)) +
scale_x_continuous(name ="Tsne Dim1",limits = c(min(tsne_out_df$Y.1),max(tsne_out_df$Y.1))) +
scale_y_continuous(name ="Tsne Dim2",limits = c(min(tsne_out_df$Y.2),max(tsne_out_df$Y.2)))
png(paste0(outdir,"tSNE_2DPlot.png"),res = 150,width = 1800,height = 1200)
print(p)
dev.off()
View(input_df)
colnames(comb_df_withLabel)
View(var_contribution)
feature_col1 <- "MIN_Scr"
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col1, color=outcome_col)) +
geom_violin() +
#geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
####################################################################################################
#Boxplot most contributed feature
####################################################################################################
outcome_col <- "sample_death_in24h"
feature_col1 <- "MIN_Scr"
feature_col2 <- "AVG_Bicarbonate"
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col1, color=outcome_col)) +
geom_violin() +
#geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
p
as.factor(comb_df_withLabel$sample_death_in24h)
comb_df_withLabel$sample_death_in24h
comb_df_withLabel[,outcome_col] <- as.factor(comb_df_withLabel[,outcome_col]h)
comb_df_withLabel[,outcome_col] <- as.factor(comb_df_withLabel[,outcome_col])
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col1, color=outcome_col)) +
geom_violin() +
#geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
p
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col1, color=outcome_col)) +
#geom_violin() +
geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
p
check <- comb_df_withLabel[which(comb_df_withLabel[,feature_col1]>4),]
table(check[,outcome_col])
check <- comb_df_withLabel[which(comb_df_withLabel[,feature_col1]>3),]
table(check[,outcome_col])
check <- comb_df_withLabel[which(comb_df_withLabel[,feature_col1]>0),]
table(check[,outcome_col])
check <- comb_df_withLabel[which(comb_df_withLabel[,feature_col1]>3),]
table(check[,outcome_col])
check <- comb_df_withLabel[which(comb_df_withLabel[,feature_col1]>2),]
table(check[,outcome_col])
####################################################################################################
#Boxplot most contributed feature
####################################################################################################
outcome_col <- "sample_death_in24h"
feature_col1 <- "MIN_Scr"
feature_col2 <- "AVG_Bicarbonate"
comb_df_withLabel[,outcome_col] <- as.factor(comb_df_withLabel[,outcome_col])
top_fs <- c(feature_col1,feature_col2)
for (i in 1:length(top_fs)){
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
#geom_violin() +
geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Box_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
check <- comb_df_withLabel[which(comb_df_withLabel[,feature_col1]>2),]
for (i in 1:length(top_fs)){
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
#geom_violin() +
geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Box_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
####################################################################################################
#Boxplot most contributed feature
####################################################################################################
outcome_col <- "sample_death_in24h"
feature_col1 <- "MIN_Scr"
feature_col2 <- "AVG_Bicarbonate"
feature_col3 <- "AVG_RR"
comb_df_withLabel[,outcome_col] <- as.factor(comb_df_withLabel[,outcome_col])
top_fs <- c(feature_col1,feature_col2,feature_col3)
for (i in 1:length(top_fs)){
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
#geom_violin() +
geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Box_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
View(label_df)
####################################################################################################
##Get sample IDs of obvious negtives samples on MIN_Scr and AVG_Bicarbonate
####################################################################################################
check <- comb_df_withLabel[which(comb_df_withLabel[,feature_col1]>2),]
table(check[,outcome_col])
####################################################################################################
##Get sample IDs of obvious negtives samples on MIN_Scr and AVG_Bicarbonate
####################################################################################################
check <- comb_df_withLabel[which(comb_df_withLabel[,feature_col1]>3),]
table(check[,outcome_col])
rownames(comb_df_withLabel)
####################################################################################################
##Get sample IDs of obvious negtives samples on MIN_Scr and AVG_Bicarbonate
####################################################################################################
obv_neg_IDs <- rownames(comb_df_withLabel)[which(comb_df_withLabel[,feature_col1]>3)] # 0:4263,1:186
obv_neg_IDs
table(comb_df_withLabel[which(rownames(comb_df_withLabel) %in% obv_neg_IDs),outcome_col])
####################################################################################################
##Get sample IDs of obvious negtives samples on MIN_Scr and AVG_Bicarbonate
####################################################################################################
obv_neg_IDs <- rownames(comb_df_withLabel)[which(comb_df_withLabel[,"MIN_Scr"]>3)] # 0:4263,1:186
table(comb_df_withLabel[which(rownames(comb_df_withLabel) %in% obv_neg_IDs),outcome_col])
quantile(comb_df_withLabel[which(rownames(comb_df_withLabel) %in% obv_neg_IDs),"MIN_Scr"])
####################################################################################################
##Get sample IDs of obvious negtives samples on MIN_Scr and AVG_Bicarbonate
####################################################################################################
min_scrGT3_df<- rownames(comb_df_withLabel)[which(comb_df_withLabel[,"MIN_Scr"]>3)]  #whn min_scr > 3,  NEG:4263,POS:186
####################################################################################################
##Get sample IDs of obvious negtives samples on MIN_Scr and AVG_Bicarbonate
####################################################################################################
min_scrGT3_df <- comb_df_withLabel[which(comb_df_withLabel[,"MIN_Scr"]>3),]  #whn min_scr > 3,  NEG:4263,POS:186
table(min_scrGT3_df$sample_death_in24h)
obv_neg_IDs1  <- rownames(min_scrGT3_df)[which(min_scrGT3_df[,"sample_death_in24h"]==0)]
length(obv_neg_IDs1)
avg_bicar_GT26_df <- comb_df_withLabel[which(comb_df_withLabel[,"AVG_Bicarbonate"]>26),]  #whn min_scr > 3,  NEG:4263,POS:186
obv_neg_IDs2  <- rownames(avg_bicar_GT26_df)[which(avg_bicar_GT26_df[,"sample_death_in24h"]==0)]
table(avg_bicar_GT26_df$sample_death_in24h)
obv_neg_IDs2  <- rownames(avg_bicar_GT26_df)[which(avg_bicar_GT26_df[,"sample_death_in24h"]==0)]
quantile(avg_bicar_GT26_df,"MIN_Scr"])
quantile(avg_bicar_GT26_df,"MIN_Scr")
quantile(avg_bicar_GT26_df[],"MIN_Scr"])
quantile(avg_bicar_GT26_df[,"MIN_Scr"])
quantile(avg_bicar_GT26_df[,"AVG_Bicarbonate"])
final_obv_neg_IDs <- unique(c(obv_neg_IDs1,obv_neg_IDs2))
length(final_obv_neg_IDs)
final_obv_neg_IDs <- data.frame(unique(c(obv_neg_IDs1,obv_neg_IDs2))) #7661
View(final_obv_neg_IDs)
colnames(final_obv_neg_IDs) <- "OBV_NEG_SampleIDs"
strsplit(final_obv_neg_IDs$OBV_NEG_SampleIDs)
strsplit(final_obv_neg_IDs$OBV_NEG_SampleIDs,split = "-")
strsplit(final_obv_neg_IDs$OBV_NEG_SampleIDs,split = "_")
strsplit(final_obv_neg_IDs$OBV_NEG_SampleIDs[1],split = "_")
final_obv_neg_IDs$OBV_NEG_SampleIDs[1]
strsplit(as.character(final_obv_neg_IDs$OBV_NEG_SampleIDs[1]),split = "_")
strsplit(as.character(final_obv_neg_IDs$OBV_NEG_SampleIDs),split = "_")
sapply(strsplit(as.character(final_obv_neg_IDs$OBV_NEG_SampleIDs),split = "_"), "[[", 2)
sapply(strsplit(as.character(final_obv_neg_IDs$OBV_NEG_SampleIDs),split = "_"), "[[", 1)
final_obv_neg_pt_IDs <- sapply(strsplit(as.character(final_obv_neg_IDs$OBV_NEG_SampleIDs),split = "_"), "[[", 1)
final_obv_neg_pt_IDs <- unique(sapply(strsplit(as.character(final_obv_neg_IDs$OBV_NEG_SampleIDs),split = "_"), "[[", 1))
final_obv_neg_pt_IDs
length(final_obv_neg_pt_IDs)
min_scrGT3_df <- comb_df_withLabel[which(comb_df_withLabel[,"MIN_Scr"]>3),]  #when min_scr > 3,  NEG:4263,POS:186
obv_neg_IDs1  <- rownames(min_scrGT3_df)[which(min_scrGT3_df[,"sample_death_in24h"]==0)]
avg_bicar_GT26_df <- comb_df_withLabel[which(comb_df_withLabel[,"AVG_Bicarbonate"]>26),]  ##when avg_bica > 26,  NEG:3988,POS:254
obv_neg_IDs2  <- rownames(avg_bicar_GT26_df)[which(avg_bicar_GT26_df[,"sample_death_in24h"]==0)]
final_obv_neg_IDs_df <- data.frame(unique(c(obv_neg_IDs1,obv_neg_IDs2))) #7661
colnames(final_obv_neg_IDs_df) <- "OBV_NEG_SampleIDs"
View(final_obv_neg_IDs_df)
write.csv(final_obv_neg_IDs_df,paste0(outdir,"OBV_NEG_SAMPLE_IDs.csv"))
