CodeCount_file <- paste0(codeCount_feature_dir,"/CCS/Diag/","ID",curr_id,"_CCS_diag_feature_df.xlsx")
CodeCount_df <- read.xlsx(CodeCount_file,sheet = 1)
View(CodeCount_df)
#2.CodeTrans feature
CodeCount_file <- paste0(codeTransf_feature_dir,"ID",curr_id,"_SelectedGrps_transf_df.xlsx")
#2.CodeTrans feature
CodeTrans_file <- paste0(codeTransf_feature_dir,"ID",curr_id,"_SelectedGrps_transf_df.xlsx")
CodeTrans_df <- read.xlsx(CodeTrans_file,sheet = 1)
View(CodeTrans_df)
#3.BinaryChar feature
BinaryChar_df <- All_binary_char_features[which(All_binary_char_features[,"study_id"] == curr_id),]
View(BinaryChar_df)
#Reoder to match row
identical(CodeCount_df$Month_Start,CodeTrans_df$Month_Start)
#Reoder to match row
identical(CodeCount_df$Month_Start,BinaryChar_df$Month_Start)
BinaryChar_df$Month_Start[1:5]
CodeCount_df$Month_Start[1:5]
#Reoder to match row
match(CodeTrans_df[,"Month_Start"], CodeCount_df[,"Month_Start"])
match(c("B","C","A"),c("A","B","C"))
c("B","C","A")[match(c("B","C","A"),c("A","B","C"))]
match(c("A","B","C"),c("B","C","A"))
c("B","C","A")[match(c("A","B","C"),c("B","C","A"))]
#Reoder to match row
match(CodeCount_df[,"Month_Start"],CodeTrans_df[,"Month_Start"])
#Reoder to match row
reorder_indxes <- match(CodeCount_df[,"Month_Start"],CodeTrans_df[,"Month_Start"])
CodeTrans_df <- CodeTrans_df[reorder_indxes,]
reorder_indxes <- match(CodeCount_df[,"Month_Start"],BinaryChar_df[,"Month_Start"])
reorder_indxes
CodeCount_df[,"Month_Start"]
BinaryChar_df[,"Month_Start"]
as.character(CodeCount_df[,"Month_Start"])[1:5]
as.character(BinaryChar_df[,"Month_Start"])[1:5]
as.character(BinaryChar_df[,"Month_Start"])[1:5] == as.character(CodeCount_df[,"Month_Start"])[1:5]
typeof(BinaryChar_df[,"Month_Start"])
typeof(CodeCount_df[,"Month_Start"])
reorder_indxes <- match(CodeCount_df[,"Month_Start"],as.character(BinaryChar_df[,"Month_Start"]))
BinaryChar_df <- BinaryChar_df[reorder_indxes,]
BinaryChar_df
reorder_indxes <- match(CodeCount_df[,"Month_Start"],as.character(BinaryChar_df[,"Month_Start"]))
reorder_indxes
curr_id <- 10000
#1.CodeCount feature
CodeCount_file <- paste0(codeCount_feature_dir,"/CCS/Diag/","ID",curr_id,"_CCS_diag_feature_df.xlsx")
CodeCount_df <- read.xlsx(CodeCount_file,sheet = 1)
#2.CodeTrans feature
CodeTrans_file <- paste0(codeTransf_feature_dir,"ID",curr_id,"_SelectedGrps_transf_df.xlsx")
CodeTrans_df <- read.xlsx(CodeTrans_file,sheet = 1)
#3.BinaryChar feature
BinaryChar_df <- All_binary_char_features[which(All_binary_char_features[,"study_id"] == curr_id),]
#Reoder rows in Codetrans and binaryChar to CodeCount
reorder_indxes <- match(CodeCount_df[,"Month_Start"],CodeTrans_df[,"Month_Start"])
CodeTrans_df <- CodeTrans_df[reorder_indxes,]
reorder_indxes <- match(CodeCount_df[,"Month_Start"],as.character(BinaryChar_df[,"Month_Start"]))
BinaryChar_df <- BinaryChar_df[reorder_indxes,]
identical(CodeCount_df$Month_Start,BinaryChar_df$Month_Start)
BinaryChar_df[,"Month_Start"] <- as.character(BinaryChar_df[,"Month_Start"])
#1.CodeCount feature
CodeCount_file <- paste0(codeCount_feature_dir,"/CCS/Diag/","ID",curr_id,"_CCS_diag_feature_df.xlsx")
CodeCount_df <- read.xlsx(CodeCount_file,sheet = 1)
#2.CodeTrans feature
CodeTrans_file <- paste0(codeTransf_feature_dir,"ID",curr_id,"_SelectedGrps_transf_df.xlsx")
CodeTrans_df <- read.xlsx(CodeTrans_file,sheet = 1)
#3.BinaryChar feature
BinaryChar_df <- All_binary_char_features[which(All_binary_char_features[,"study_id"] == curr_id),]
BinaryChar_df[,"Month_Start"] <- as.character(BinaryChar_df[,"Month_Start"])
#Reoder rows in Codetrans and binaryChar to CodeCount
reorder_indxes <- match(CodeCount_df[,"Month_Start"],CodeTrans_df[,"Month_Start"])
CodeTrans_df <- CodeTrans_df[reorder_indxes,]
reorder_indxes <- match(CodeCount_df[,"Month_Start"],BinaryChar_df[,"Month_Start"])
BinaryChar_df <- BinaryChar_df[reorder_indxes,]
identical(CodeCount_df$Month_Start,BinaryChar_df$Month_Start)
identical(CodeCount_df$Month_Start,CodeTrans_df$Month_Start)
#1.CodeCount feature
#CCS Diag
CodeCount_file1 <- paste0(codeCount_feature_dir,"/CCS/Diag/","ID",curr_id,"_CCS_diag_feature_df.xlsx")
CodeCount_df1 <- read.xlsx(CodeCount_file1,sheet = 1)
#CCS Proc
CodeCount_file2 <- paste0(codeCount_feature_dir,"/CCS/Proc/","ID",curr_id,"_CCS_proc_feature_df.xlsx")
CodeCount_df2 <- read.xlsx(CodeCount_file2,sheet = 1)
CodeCount_df <- rbind(CodeCount_df1,CodeCount_df2)
CodeCount_df <- cbind(CodeCount_df1,CodeCount_df2)
View(CodeCount_df)
#DM3 Specific Drug
CodeCount_file2 <- paste0(codeCount_feature_dir,"/DM3/Specific/","ID",curr_id,"_specific_drug_feature_df.xlsx")
#DM3 Specific Drug
CodeCount_file3 <- paste0(codeCount_feature_dir,"/DM3/Specific/","ID",curr_id,"_specific_drug_feature_df.xlsx")
CodeCount_df3 <- read.xlsx(CodeCount_file2,sheet = 1)
CodeCount_df <- cbind(CodeCount_df1,CodeCount_df2,CodeCount_df3)
#Reoder rows in other df to CodeCount1
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],CodeCount_df2[,"Month_Start"])
reorder_indxes
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],CodeCount_df3[,"Month_Start"])
CodeCount_df3 <- CodeCount_df3[reorder_indxes,]
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],CodeTrans_df[,"Month_Start"])
CodeTrans_df <- CodeTrans_df[reorder_indxes,]
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],BinaryChar_df[,"Month_Start"])
BinaryChar_df <- BinaryChar_df[reorder_indxes,]
#combine 3 df
comb_df <- rbind(CodeCount_df1,CodeCount_df2,CodeCount_df3,CodeTrans_df,BinaryChar_df)
#combine
comb_df <- cbind(CodeCount_df1,CodeCount_df2,CodeCount_df3,CodeTrans_df,BinaryChar_df)
colnames(comb_df)
colnames(comb_df)[1:10]
#remove duplicated ID columns
which(colnames(comb_df) %in% c("study_id","Month_Start"))
#remove duplicated ID columns
ID_month_col <- which(colnames(comb_df) %in% c("study_id","Month_Start"))
dup_ID_month_col <- ID_month_col[,3:length(ID_month_col)]
dup_ID_month_col <- ID_month_col[3:length(ID_month_col)]
dup_ID_month_col
comb_df <- comb_df[,-dup_ID_month_col]
which(colnames(comb_df) %in% c("study_id","Month_Start"))
selected_CCS
colnames(CodeCount_df1)
which(CodeCount_df1 %in% selected_CCS) #Only Keep selected features
selected_CCS
which(colnames(CodeCount_df1) %in% selected_CCS) #Only Keep selected features
length(which(colnames(CodeCount_df1) %in% selected_CCS)) #Only Keep selected features
CodeCount_df1 <- CodeCount_df1[,c("study_id","Month_Start",selected_CCS)] ##Only Keep selected features  and IDs
selected_CCS
c("study_id","Month_Start",selected_CCS)
keep_indxes <- which(colnames(CodeCount_df1) %in% c("study_id","Month_Start",selected_CCS)) ###Only Keep selected features  and IDs
keep_indxes
CodeCount_df1 <- CodeCount_df1[,keep_indxes]
View(CodeCount_df1)
keep_indxes <- which(colnames(CodeCount_df2) %in% c("study_id","Month_Start",selected_CCS)) ###Only Keep selected features  and IDs
CodeCount_df2 <- CodeCount_df2[,keep_indxes]  #12
keep_indxes <- which(colnames(CodeCount_df3) %in% c("study_id","Month_Start",selected_DM3)) ###Only Keep selected features  and IDs
CodeCount_df3 <- CodeCount_df3[,keep_indxes]  #1
selected_DM3
colnames(CodeTrans_df)
#2.CodeTrans feature
selected_CCS_DM3 <- c(selected_CCS,selected_DM3)
selected_CCS_DM3
colnames(CodeTrans_df)
gsub("time_since_|time_until_|cumul_ratio_",colnames(CodeTrans_df))
gsub("time_since_|time_until_|cumul_ratio_","",colnames(CodeTrans_df))
simp_colnames <- gsub("time_since_|time_until_|cumul_ratio_","",colnames(CodeTrans_df))
keep_indxes <- which(simp_colnames %in% c("study_id","Month_Start",selected_CCS_DM3)) ###Only Keep selected features  and IDs
keep_indxes
CodeTrans_df <- CodeTrans_df[,keep_indxes]  #11
View(CodeTrans_df)
96/3
13+11
selected_DM3_SPE <- selected_Features_df[which(grepl("DM3_SPE",selected_Features_df$Code_Group)==T),"Code_Group"] #19
length(selected_DM3_SPE)
selected_DM3_GEN <- selected_Features_df[which(grepl("DM3_GEN",selected_Features_df$Code_Group)==T),"Code_Group"] #19
length(selected_DM3_GEN)
selected_CCS_D <- selected_Features_df[which(grepl("CCS_D",selected_Features_df$Code_Group)==T),"Code_Group"] #13
selected_CCS_P <- selected_Features_df[which(grepl("CCS_P",selected_Features_df$Code_Group)==T),"Code_Group"] #13
selected_CCS_D
12+1+8
12+1+11
selected_Features_df <- read.csv(paste0(selected_feature_dir,"11D_Selcted_CodeGroups_freqGT005_tb.csv"),stringsAsFactors = F)
selected_Features <- selected_Features_df$Code_Group #51
selected_CCS_D <- selected_Features_df[which(grepl("CCS_D",selected_Features_df$Code_Group)==T),"Code_Group"] #12
selected_CCS_P <- selected_Features_df[which(grepl("CCS_P",selected_Features_df$Code_Group)==T),"Code_Group"] #1
selected_DM3_SPE <- selected_Features_df[which(grepl("DM3_SPE",selected_Features_df$Code_Group)==T),"Code_Group"] #11
################################################################################
#2. Load All binary char feature
################################################################################
All_binary_char_features <- as.data.frame(fread(paste0(binarychar_feature_dir,"11_All_PerMonthData_WithBinaryChar.csv")))
length(unique(All_binary_char_features$study_id)) # 23378
curr_id <- 10000
#1.CodeCount feature
#CCS Diag
CodeCount_file1 <- paste0(codeCount_feature_dir,"/CCS/Diag/","ID",curr_id,"_CCS_diag_feature_df.xlsx")
CodeCount_df1 <- read.xlsx(CodeCount_file1,sheet = 1)
keep_indxes <- which(colnames(CodeCount_df1) %in% c("study_id","Month_Start",selected_CCS_D)) ###Only Keep selected features  and IDs
CodeCount_df1 <- CodeCount_df1[,keep_indxes]  #12
length(keep_indxes)
#CCS Proc
CodeCount_file2 <- paste0(codeCount_feature_dir,"/CCS/Proc/","ID",curr_id,"_CCS_proc_feature_df.xlsx")
CodeCount_df2 <- read.xlsx(CodeCount_file2,sheet = 1)
keep_indxes <- which(colnames(CodeCount_df2) %in% c("study_id","Month_Start",selected_CCS_P)) ###Only Keep selected features  and IDs
CodeCount_df2 <- CodeCount_df2[,keep_indxes]  #1
#DM3 Specific Drug
CodeCount_file3 <- paste0(codeCount_feature_dir,"/DM3/Specific/","ID",curr_id,"_specific_drug_feature_df.xlsx")
CodeCount_df3 <- read.xlsx(CodeCount_file2,sheet = 1)
#DM3 Specific Drug
CodeCount_file3 <- paste0(codeCount_feature_dir,"/DM3/Specific/","ID",curr_id,"_specific_drug_feature_df.xlsx")
CodeCount_df3 <- read.xlsx(CodeCount_file2,sheet = 1)
keep_indxes <- which(colnames(CodeCount_df3) %in% c("study_id","Month_Start",selected_DM3_SPE)) ###Only Keep selected features  and IDs
CodeCount_df3 <- CodeCount_df3[,keep_indxes]  #11
ncol(CodeCount_df3)
CodeCount_df3
#DM3 Specific Drug
CodeCount_file3 <- paste0(codeCount_feature_dir,"/DM3/Specific/","ID",curr_id,"_specific_drug_feature_df.xlsx")
CodeCount_df3 <- read.xlsx(CodeCount_file2,sheet = 1)
keep_indxes <- which(colnames(CodeCount_df3) %in% c("study_id","Month_Start",selected_DM3_SPE)) ###Only Keep selected features  and IDs
selected_DM3_SPE
keep_indxes
colnames(CodeCount_df3
)
#DM3 Specific Drug
CodeCount_file3 <- paste0(codeCount_feature_dir,"/DM3/Specific/","ID",curr_id,"_specific_drug_feature_df.xlsx")
CodeCount_df3 <- read.xlsx(CodeCount_file2,sheet = 1)
colnames(CodeCount_df3)
#DM3 Specific Drug
CodeCount_file3 <- paste0(codeCount_feature_dir,"/DM3/Specific/","ID",curr_id,"_specific_drug_feature_df.xlsx")
CodeCount_df3 <- read.xlsx(CodeCount_file3,sheet = 1)
keep_indxes <- which(colnames(CodeCount_df3) %in% c("study_id","Month_Start",selected_DM3_SPE)) ###Only Keep selected features  and IDs
CodeCount_df3 <- CodeCount_df3[,keep_indxes]  #11
ncol(CodeCount_df3)
CodeCount_df3
colnames(CodeCount_df3)
colnames(CodeCount_df2)
colnames(CodeCount_df1)
#2.CodeTrans feature
CodeTrans_file <- paste0(codeTransf_feature_dir,"ID",curr_id,"_SelectedGrps_transf_df.xlsx")
CodeTrans_df <- read.xlsx(CodeTrans_file,sheet = 1)
simp_colnames <- gsub("time_since_|time_until_|cumul_ratio_","",colnames(CodeTrans_df))
keep_indxes <- which(simp_colnames %in% c("study_id","Month_Start",selected_CCS_D,selected_CCS_P,selected_DM3_SPE)) ###Only Keep selected features  and IDs
length(keep_indxes)
CodeTrans_df <- CodeTrans_df[,keep_indxes]  #96
72/3
#3.BinaryChar feature
BinaryChar_df <- All_binary_char_features[which(All_binary_char_features[,"study_id"] == curr_id),]
BinaryChar_df[,"Month_Start"] <- as.character(BinaryChar_df[,"Month_Start"])
#Reoder rows in other df to CodeCount1
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],CodeCount_df2[,"Month_Start"])
CodeCount_df2 <- CodeCount_df2[reorder_indxes,]
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],CodeCount_df3[,"Month_Start"])
CodeCount_df3 <- CodeCount_df3[reorder_indxes,]
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],CodeTrans_df[,"Month_Start"])
CodeTrans_df <- CodeTrans_df[reorder_indxes,]
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],BinaryChar_df[,"Month_Start"])
BinaryChar_df <- BinaryChar_df[reorder_indxes,]
#combine
comb_df <- cbind(CodeCount_df1,CodeCount_df2,CodeCount_df3,CodeTrans_df,BinaryChar_df)
#remove duplicated ID columns
ID_month_col <- which(colnames(comb_df) %in% c("study_id","Month_Start"))
dup_ID_month_col <- ID_month_col[3:length(ID_month_col)]
comb_df <- comb_df[,-dup_ID_month_col]
View(comb_df)
24+24*3
colnames(BinaryChar_df)
exclude_indxes <- which(colnames(BinaryChar_df) %in% c("Diag_Codes","Proc_Codes","Drug_Codes",
"has_second_event","months_to_second_event")) ###excluded char features
BinaryChar_df <- BinaryChar_df[,-exclude_indxes]  #
View(BinaryChar_df)
BinaryChar_df$cs_tum_ext
colnames(BinaryChar_df)
source("Recapse_Ultility.R")
#This script:
#for each patient for selected features(By freq) combines:
#1.CodeCount feature
#2.CodeTrans feature
#3.BinaryChar feature
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
#onHPC
project_dir <- "/recapse/intermediate_data/"
codeCount_feature_dir  <- paste0(project_dir,"11B_CodeCount_Features/")
codeTransf_feature_dir <- paste0(project_dir,"11E_CodeTransform_Features/")
binarychar_feature_dir <- project_dir
selected_feature_dir   <- project_dir
outdir                 <- paste0(project_dir,"12_ModelReadyData/")
# #local
project_dir            <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
codeCount_feature_dir  <- paste0(project_dir,"11B_CodeCount_Features/")
codeTransf_feature_dir <- paste0(project_dir,"11E_CodeTransform_Features/")
binarychar_feature_dir <- project_dir
selected_feature_dir   <- project_dir
outdir                 <- paste0(project_dir,"12_ModelReadyData/")
################################################################################
#1. Load Anlaysis ID
################################################################################
FinalID_df <- read.xlsx(paste0(project_dir,"9_Final_Analysis_ID.xlsx"),sheet = 1)
Final_IDs <- unique(FinalID_df$study_id) #23378
#########################################################################################################
#3. Load selected feature groups
#########################################################################################################
selected_Features_df <- read.csv(paste0(selected_feature_dir,"11D_Selcted_CodeGroups_freqGT005_tb.csv"),stringsAsFactors = F)
selected_Features <- selected_Features_df$Code_Group #51
selected_CCS_D <- selected_Features_df[which(grepl("CCS_D",selected_Features_df$Code_Group)==T),"Code_Group"] #12
selected_CCS_P <- selected_Features_df[which(grepl("CCS_P",selected_Features_df$Code_Group)==T),"Code_Group"] #1
selected_DM3_SPE <- selected_Features_df[which(grepl("DM3_SPE",selected_Features_df$Code_Group)==T),"Code_Group"] #11
# selected_DM3_GEN <- selected_Features_df[which(grepl("DM3_GEN",selected_Features_df$Code_Group)==T),"Code_Group"] #8
# selected_Chubak <- selected_Features_df[which(grepl("Chubak",selected_Features_df$Code_Group)==T),"Code_Group"] #17
# selected_Ritzw <- selected_Features_df[which(grepl("Ritzw",selected_Features_df$Code_Group)==T),"Code_Group"] #2 (unkown grp)
################################################################################
#2. Load All binary char feature
################################################################################
All_binary_char_features <- as.data.frame(fread(paste0(binarychar_feature_dir,"11_All_PerMonthData_WithBinaryChar.csv")))
length(unique(All_binary_char_features$study_id)) # 23378
curr_id <- 10000
#1.CodeCount feature
#CCS Diag
CodeCount_file1 <- paste0(codeCount_feature_dir,"/CCS/Diag/","ID",curr_id,"_CCS_diag_feature_df.xlsx")
CodeCount_df1 <- read.xlsx(CodeCount_file1,sheet = 1)
keep_indxes <- which(colnames(CodeCount_df1) %in% c("study_id","Month_Start",selected_CCS_D)) ###Only Keep selected features  and IDs
CodeCount_df1 <- CodeCount_df1[,keep_indxes]  #12
#CCS Proc
CodeCount_file2 <- paste0(codeCount_feature_dir,"/CCS/Proc/","ID",curr_id,"_CCS_proc_feature_df.xlsx")
CodeCount_df2 <- read.xlsx(CodeCount_file2,sheet = 1)
keep_indxes <- which(colnames(CodeCount_df2) %in% c("study_id","Month_Start",selected_CCS_P)) ###Only Keep selected features  and IDs
CodeCount_df2 <- CodeCount_df2[,keep_indxes]  #1
#DM3 Specific Drug
CodeCount_file3 <- paste0(codeCount_feature_dir,"/DM3/Specific/","ID",curr_id,"_specific_drug_feature_df.xlsx")
CodeCount_df3 <- read.xlsx(CodeCount_file3,sheet = 1)
keep_indxes <- which(colnames(CodeCount_df3) %in% c("study_id","Month_Start",selected_DM3_SPE)) ###Only Keep selected features  and IDs
CodeCount_df3 <- CodeCount_df3[,keep_indxes]  #11
#2.CodeTrans feature
CodeTrans_file <- paste0(codeTransf_feature_dir,"ID",curr_id,"_SelectedGrps_transf_df.xlsx")
CodeTrans_df <- read.xlsx(CodeTrans_file,sheet = 1)
simp_colnames <- gsub("time_since_|time_until_|cumul_ratio_","",colnames(CodeTrans_df))
keep_indxes <- which(simp_colnames %in% c("study_id","Month_Start",selected_CCS_D,selected_CCS_P,selected_DM3_SPE)) ###Only Keep selected features  and IDs
CodeTrans_df <- CodeTrans_df[,keep_indxes]  #72
#3.BinaryChar feature
BinaryChar_df <- All_binary_char_features[which(All_binary_char_features[,"study_id"] == curr_id),]
BinaryChar_df[,"Month_Start"] <- as.character(BinaryChar_df[,"Month_Start"])
exclude_indxes <- which(colnames(BinaryChar_df) %in% c("Diag_Codes","Proc_Codes","Drug_Codes",
"has_second_event","months_to_second_event")) ###excluded char features
BinaryChar_df <- BinaryChar_df[,-exclude_indxes]  #
#Reoder rows in other df to CodeCount1
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],CodeCount_df2[,"Month_Start"])
CodeCount_df2 <- CodeCount_df2[reorder_indxes,]
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],CodeCount_df3[,"Month_Start"])
CodeCount_df3 <- CodeCount_df3[reorder_indxes,]
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],CodeTrans_df[,"Month_Start"])
CodeTrans_df <- CodeTrans_df[reorder_indxes,]
reorder_indxes <- match(CodeCount_df1[,"Month_Start"],BinaryChar_df[,"Month_Start"])
BinaryChar_df <- BinaryChar_df[reorder_indxes,]
ncol(BinaryChar_df)
181-2
#combine
comb_df <- cbind(CodeCount_df1,CodeCount_df2,CodeCount_df3,CodeTrans_df,BinaryChar_df)
#remove duplicated ID columns
ID_month_col <- which(colnames(comb_df) %in% c("study_id","Month_Start"))
dup_ID_month_col <- ID_month_col[3:length(ID_month_col)]
ID_month_col
comb_df <- comb_df[,-dup_ID_month_col]
179+24+24*3
outdir
write.xlsx(comb_df,paste0(outdir,"ID",curr_id,"_ModelReady_df.xlsx"))
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
source("Recapse_Ultility.R")
#This script:
#for each patient for selected features(By freq) combines:
#1.CodeCount feature
#2.CodeTrans feature
#3.BinaryChar feature
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
source("Recapse_Ultility.R")
#This script:
#for each patient for selected features(By freq) combines:
#1.CodeCount feature
#2.CodeTrans feature
#3.BinaryChar feature
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
#onHPC
project_dir            <- "/recapse/intermediate_data/"
modelReady_dir         <- paste0(project_dir,"12_ModelReadyData/")
outdir                 <- paste0(project_dir,"12_ModelReadyData/")
#local
project_dir            <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
modelReady_dir         <- paste0(project_dir,"12_ModelReadyData/")
outdir                 <- paste0(project_dir,"12_ModelReadyData/")
########################################################################################################
#load and combine all patient data
########################################################################################################
pt_files <-list.files(modelReady_dir,full.names = T)
pt_files
########################################################################################################
#load and combine all patient data
########################################################################################################
pt_files <-list.files(modelReady_dir,full.names = T)
pt_files
model_data <- do.call(rbind, lapply(pt_files,read.xlsx))
View(model_data)
colnames(model_data)
#statitiscs
pre_recurrence_indxes <- which(model_data$y_PRE_OR_POST_2ndEvent==0)
post_recurrence_indxes <- which(model_data$y_PRE_OR_POST_2ndEvent==1)
features_tocompute <- c("months_since_dx","reg_age_at_dx","reg_nodes_exam","Age","reg_nodes_pos","CCS_D_42","CCS_D_24","C504","surg_prim_site_23","Laterality_1")
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
avg0 <- round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
sd0 <- round(sd(model_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
avg1 <- round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),1)
sd1  <- round(sd(model_data[post_recurrence_indxes,curr_f],na.rm = T),1)
stat_tb[i,"Stats_Pre"] <-  paste0(avg0," (",sd0,")")
stat_tb[i,"Stats_Post"] <- paste0(avg1," (",sd1,")")
}else{
n0 <- length(which(model_data[pre_recurrence_indxes,curr_f] == 1))
p0 <- round(n0/length(pre_recurrence_indxes)*100,1)
n1 <- length(which(model_data[post_recurrence_indxes,curr_f] == 1))
p1 <- round(n1/length(post_recurrence_indxes)*100,1)
stat_tb[i,"Stats_Pre"] <-  paste0(n0," (",p0,"%)")
stat_tb[i,"Stats_Post"] <- paste0(n1," (",p1,"%)")
}
}
View(stat_tb)
################################################################################
#2. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
pts_level_char_df <- read.xlsx(paste0(project_dir,"/8_PatientLevel_charecteristics.xlsx"),sheet = 1)
table(model_data$y_PRE_OR_POST_2ndEvent)
final_ID <- unique(model_data$study_id)
length(final_ID)
source("Recapse_Ultility.R")
#This script:
#for each patient for selected features(By freq) combines:
#1.CodeCount feature
#2.CodeTrans feature
#3.BinaryChar feature
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
#onHPC
project_dir            <- "/recapse/intermediate_data/"
modelReady_dir         <- paste0(project_dir,"12_ModelReadyData/")
outdir                 <- paste0(project_dir,"12_ModelReadyData/")
#local
project_dir            <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
modelReady_dir         <- paste0(project_dir,"12_ModelReadyData/")
outdir                 <- paste0(project_dir,"12_ModelReadyData/")
########################################################################################################
#1. Load and combine all patient data
########################################################################################################
pt_files <-list.files(modelReady_dir,full.names = T)
model_data <- do.call(rbind, lapply(pt_files,read.xlsx))
Final_ID <- unique(model_data$study_id)
table(model_data$y_PRE_OR_POST_2ndEvent)
################################################################################
#2. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
pts_level_char_df <- read.xlsx(paste0(project_dir,"/8_PatientLevel_charecteristics.xlsx"),sheet = 1)
which(pts_level_char_df$SBCE==1)
which(pts_level_char_df$SBCE==1)[1:10]
pts_level_char_df$study_id[17]
check <- pts_level_char_df[which(pts_level_char_df$SBCE==1),]
View(check)
pt_files <-list.files(modelReady_dir,full.names = T)
model_data <- do.call(rbind, lapply(pt_files,read.xlsx))
Final_ID <- unique(model_data$study_id)
table(model_data$y_PRE_OR_POST_2ndEvent)
################################################################################
#2. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
pts_level_char_df <- read.xlsx(paste0(project_dir,"/8_PatientLevel_charecteristics.xlsx"),sheet = 1)
pts_level_char_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% Final_ID),] #only keep char for final ID
################################################################################
#3. Get SBCE and non-SBCE IDs
################################################################################
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
original_noSBCE_toSBCEratio <- round(length(nosbce_pt_Ids)/length(sbce_pt_Ids))
original_noSBCE_toSBCEratio
table(pts_level_char_df$SBCE)
16/3
16/5
print("Original non-SBCE vs SBCE : ",table(pts_level_char_df$SBCE))
table(pts_level_char_df$SBCE)
print("Original non-SBCE vs SBCE : ")
table(pts_level_char_df$SBCE)
model_data$y_PRE_OR_POST_2ndEvent
table(model_data$y_PRE_OR_POST_2ndEvent)
################################################################################
#3. Get SBCE and non-SBCE IDs
################################################################################
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
original_noSBCE_toSBCEratio <- round(length(nosbce_pt_Ids)/length(sbce_pt_Ids))
##########START HERE##########
########################################################################################################
#### Data reprocessing 0521
### make sure no overlapping in original Ids in train,validation and test
########################################################################################################
nonrecurrent_pts_data <- model_data[which(model_data$study_id %in% nosbce_pt_Ids),]
n_no <- nrow(nonrecurrent_pts_data) #619991
n_no
recurrent_pts_data <- model_data[which(model_data$study_id %in% sbce_pt_Ids),]
n_yes<- nrow(recurrent_pts_data) # 72670
n_yes
original_noSBCE_toSBCEratio
#1.Testing : Randomly choose 100 SBCE original pts data, and 100*8 noSBCE original pt Data
set.seed(123)
test_ID_SBCE <- sample(sbce_pt_Ids,100)
sbce_pt_Ids
colnames(model_data)
20954/2424
