numCores
source("Recapse_Ultility.R")
Data_Sampling_Func <- function(upsample_flag,train_data,label_col_name,seed_num,random_perc = 0.8){
# upsample_flag <- 0
# train_data <- train_data
# label_col_name <- "y_PRE_OR_POST_2ndEvent"
# seed_num <- 1
#Get label col index
label_col_index <- which(colnames(train_data) == label_col_name)
#Sampling
if(upsample_flag==1){ #upsampling
set.seed(seed_num)
up_train <- upSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- up_train
}else if(upsample_flag==0){ #downsample
set.seed(seed_num)
down_train <- downSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else if(upsample_flag==2){ #random sample 90% of orignal data
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
sampled_train_data <- train_data[sampled_indxes,]
}else if (upsample_flag == 3){ #random sample then down sample
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
randomsampled_train_data <- train_data[sampled_indxes,]
down_train <- downSample(x = randomsampled_train_data[, -label_col_index],
y = as.factor(randomsampled_train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else{
original_train <- train_data
sampled_train_data <- original_train
}
return(sampled_train_data)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "12_TrainTestIDs/")
data_dir2        <- paste0(proj_dir, "11D_ModelReady_CombFatures/WithPossibleMonthsHasNoCodes/")
outdir           <- paste0(proj_dir, "16_Performance/")
#User input
sampling_flag    <- "Down"
########################################################################################################
#1. Load and combine all patient model ready data
########################################################################################################
pt_files <-list.files(data_dir2,full.names = T)
#model_data <- do.call(rbind, lapply(pt_files,read.xlsx))
model_data <- do.call(rbind,mclapply(pt_files, mc.cores= numCores, function(z){read.xlsx(z, sheet = 1)}))
print("Original pre vs post samples: ")
table(model_data$y_PRE_OR_POST_2ndEvent)
#Add a column for original study ID
original_IDs <- strsplit(model_data$sample_id,split = "@")
model_data$study_id <- sapply(original_IDs, "[[", 1)
################################################################################
#2. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
train_ID_df <- read.xlsx(paste0(data_dir1,"train_ID_withLabel.xlsx"),sheet = 1)
test_ID_df  <- read.xlsx(paste0(data_dir1,"test_ID_withLabel.xlsx"),sheet = 1)
print("Train non-SBCE vs SBCE : ")
table(train_ID_df$SBCE) #13542  1049
print("Test non-SBCE vs SBCE : ")
table(test_ID_df$SBCE)  #3362  285
train_ID <- paste0("ID", train_ID_df$study_id)
test_ID  <- paste0("ID", test_ID_df$study_id)
########################################################################################################
#3.Get model data for train and test
########################################################################################################
#I. Get data
#1. Train
if (sampling_flag ==  "None"){
#1. Train data without down sampling
train_data <- model_data[which(model_data[,"study_id"] %in% train_ID),]
print("Training Pre vs Post:")
table(train_data$y_PRE_OR_POST_2ndEvent)
}else if (sampling_flag ==  "Down"){
#2. Train data with down sampling
seed_num <- 123
train_data <- Data_Sampling_Func(0,train_data,"y_PRE_OR_POST_2ndEvent",seed_num)
train_data$y_PRE_OR_POST_2ndEvent <- as.numeric(train_data$y_PRE_OR_POST_2ndEvent) -1
print("Training DownSampled Pre vs Post:")
table(train_data$y_PRE_OR_POST_2ndEvent)
}
#2. Test
test_data <- model_data[which(model_data[,"study_id"] %in% test_ID),]
print("Test: Pre vs Post:")
table(test_data$y_PRE_OR_POST_2ndEvent)
#II. Create xgb input
train_label      <- as.numeric(train_data[,"y_PRE_OR_POST_2ndEvent"])
train_data_part  <- train_data[,!(names(train_data) %in% c("study_id","sample_id","y_PRE_OR_POST_2ndEvent"))]
dtrain           <- xgb.DMatrix(data = as.matrix(train_data_part), label = train_label)
test_label       <- as.numeric(test_data[,"y_PRE_OR_POST_2ndEvent"])
test_data_part   <- test_data[,!(names(test_data) %in% c("study_id","sample_id","y_PRE_OR_POST_2ndEvent"))]
dtest            <- xgb.DMatrix(data = as.matrix(test_data_part), label = test_label)
# ########################################################################################################
#           Teresa's code
# ########################################################################################################
optimal_results <- BayesianOptimization(xgb_cv_bayes,
bounds=list(eta=c(0.001, 0.3),
max_depth=c(3L, 10L),
min_child_weight=c(0L, 20L),
subsample=c(0.3, 0.9), colsample_by_tree=c(0.2, 0.8)),
init_points=10,
n_iter=10)
#II. Create xgb input
train_label      <- as.numeric(train_data[,"y_PRE_OR_POST_2ndEvent"])
########################################################################################################
#3.Get model data for train and test
########################################################################################################
#I. Get data
#1. Train
if (sampling_flag ==  "None"){
#1. Train data without down sampling
train_data <- model_data[which(model_data[,"study_id"] %in% train_ID),]
print("Training Pre vs Post:")
table(train_data$y_PRE_OR_POST_2ndEvent)
}else if (sampling_flag ==  "Down"){
#2. Train data with down sampling
seed_num <- 123
train_data <- Data_Sampling_Func(0,train_data,"y_PRE_OR_POST_2ndEvent",seed_num)
train_data$y_PRE_OR_POST_2ndEvent <- as.numeric(train_data$y_PRE_OR_POST_2ndEvent) -1
print("Training DownSampled Pre vs Post:")
table(train_data$y_PRE_OR_POST_2ndEvent)
}
################################################################################
#2. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
train_ID_df <- read.xlsx(paste0(data_dir1,"train_ID_withLabel.xlsx"),sheet = 1)
test_ID_df  <- read.xlsx(paste0(data_dir1,"test_ID_withLabel.xlsx"),sheet = 1)
print("Train non-SBCE vs SBCE : ")
table(train_ID_df$SBCE) #13542  1049
print("Test non-SBCE vs SBCE : ")
table(test_ID_df$SBCE)  #3362  285
train_ID <- paste0("ID", train_ID_df$study_id)
test_ID  <- paste0("ID", test_ID_df$study_id)
########################################################################################################
#3.Get model data for train and test
########################################################################################################
#I. Get data
#1. Train
if (sampling_flag ==  "None"){
#1. Train data without down sampling
train_data <- model_data[which(model_data[,"study_id"] %in% train_ID),]
print("Training Pre vs Post:")
table(train_data$y_PRE_OR_POST_2ndEvent)
}else if (sampling_flag ==  "Down"){
#2. Train data with down sampling
seed_num <- 123
train_data <- Data_Sampling_Func(0,train_data,"y_PRE_OR_POST_2ndEvent",seed_num)
train_data$y_PRE_OR_POST_2ndEvent <- as.numeric(train_data$y_PRE_OR_POST_2ndEvent) -1
print("Training DownSampled Pre vs Post:")
table(train_data$y_PRE_OR_POST_2ndEvent)
}
sampling_flag
sampling_flag ==  "Down"
#2. Train data with down sampling
seed_num <- 123
train_data <- Data_Sampling_Func(0,train_data,"y_PRE_OR_POST_2ndEvent",seed_num)
source("Recapse_Ultility.R")
Data_Sampling_Func <- function(upsample_flag,train_data,label_col_name,seed_num,random_perc = 0.8){
# upsample_flag <- 0
# train_data <- train_data
# label_col_name <- "y_PRE_OR_POST_2ndEvent"
# seed_num <- 1
#Get label col index
label_col_index <- which(colnames(train_data) == label_col_name)
#Sampling
if(upsample_flag==1){ #upsampling
set.seed(seed_num)
up_train <- upSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- up_train
}else if(upsample_flag==0){ #downsample
set.seed(seed_num)
down_train <- downSample(x = train_data[, -label_col_index],
y = as.factor(train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else if(upsample_flag==2){ #random sample 90% of orignal data
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
sampled_train_data <- train_data[sampled_indxes,]
}else if (upsample_flag == 3){ #random sample then down sample
set.seed(seed_num)
sampled_indxes <- sample(nrow(train_data), nrow(train_data)*random_perc, replace = TRUE, prob = NULL)
randomsampled_train_data <- train_data[sampled_indxes,]
down_train <- downSample(x = randomsampled_train_data[, -label_col_index],
y = as.factor(randomsampled_train_data[,label_col_name]), yname = label_col_name)
sampled_train_data <- down_train
}else{
original_train <- train_data
sampled_train_data <- original_train
}
return(sampled_train_data)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "12_TrainTestIDs/")
data_dir2        <- paste0(proj_dir, "11D_ModelReady_CombFatures/WithPossibleMonthsHasNoCodes/")
outdir           <- paste0(proj_dir, "16_Performance/")
#User input
sampling_flag    <- "Down"
########################################################################################################
#1. Load and combine all patient model ready data
########################################################################################################
pt_files <-list.files(data_dir2,full.names = T)
#model_data <- do.call(rbind, lapply(pt_files,read.xlsx))
model_data <- do.call(rbind,mclapply(pt_files, mc.cores= numCores, function(z){read.xlsx(z, sheet = 1)}))
print("Original pre vs post samples: ")
table(model_data$y_PRE_OR_POST_2ndEvent)
#Add a column for original study ID
original_IDs <- strsplit(model_data$sample_id,split = "@")
model_data$study_id <- sapply(original_IDs, "[[", 1)
################################################################################
#2. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
train_ID_df <- read.xlsx(paste0(data_dir1,"train_ID_withLabel.xlsx"),sheet = 1)
test_ID_df  <- read.xlsx(paste0(data_dir1,"test_ID_withLabel.xlsx"),sheet = 1)
print("Train non-SBCE vs SBCE : ")
table(train_ID_df$SBCE) #13542  1049
print("Test non-SBCE vs SBCE : ")
table(test_ID_df$SBCE)  #3362  285
train_ID <- paste0("ID", train_ID_df$study_id)
test_ID  <- paste0("ID", test_ID_df$study_id)
########################################################################################################
#3.Get model data for train and test
########################################################################################################
#I. Get data
#1. Train
if (sampling_flag ==  "None"){
#1. Train data without down sampling
train_data <- model_data[which(model_data[,"study_id"] %in% train_ID),]
print("Training Pre vs Post:")
table(train_data$y_PRE_OR_POST_2ndEvent)
}else if (sampling_flag ==  "Down"){
#2. Train data with down sampling
seed_num <- 123
train_data <- model_data[which(model_data[,"study_id"] %in% train_ID),]
train_data <- Data_Sampling_Func(0,train_data,"y_PRE_OR_POST_2ndEvent",seed_num)
train_data$y_PRE_OR_POST_2ndEvent <- as.numeric(train_data$y_PRE_OR_POST_2ndEvent) -1
print("Training DownSampled Pre vs Post:")
table(train_data$y_PRE_OR_POST_2ndEvent)
}
#2. Test
test_data <- model_data[which(model_data[,"study_id"] %in% test_ID),]
print("Test: Pre vs Post:")
table(test_data$y_PRE_OR_POST_2ndEvent)
#II. Create xgb input
train_label      <- as.numeric(train_data[,"y_PRE_OR_POST_2ndEvent"])
train_data_part  <- train_data[,!(names(train_data) %in% c("study_id","sample_id","y_PRE_OR_POST_2ndEvent"))]
dtrain           <- xgb.DMatrix(data = as.matrix(train_data_part), label = train_label)
test_label       <- as.numeric(test_data[,"y_PRE_OR_POST_2ndEvent"])
test_data_part   <- test_data[,!(names(test_data) %in% c("study_id","sample_id","y_PRE_OR_POST_2ndEvent"))]
dtest            <- xgb.DMatrix(data = as.matrix(test_data_part), label = test_label)
# ########################################################################################################
#           Teresa's code
# ########################################################################################################
optimal_results <- BayesianOptimization(xgb_cv_bayes,
bounds=list(eta=c(0.001, 0.3),
max_depth=c(3L, 10L),
min_child_weight=c(0L, 20L),
subsample=c(0.3, 0.9), colsample_by_tree=c(0.2, 0.8)),
init_points=10,
n_iter=10)
source("Recapse_Ultility.R")
#This script compute perfoermance for test data for different NEG:POS ratio
#1)POS: NEG = 1:1
#2)POS: NEG = 1:2
#3)POS: NEG = 1:5
add_predicted_class_byThreshold <- function(prediction_df,thres_list){
predicted_class_df <- as.data.frame(matrix(NA, nrow = nrow(prediction_df),ncol = length(thres_list)))
colnames(predicted_class_df) <- gsub("\\.","", paste0("PredictedClass_Thres_",thres_list))
for (j in 1:length(thres_list)){
curr_thres <- thres_list[j]
curr_col_name <- gsub("\\.","",paste0("PredictedClass_Thres_",curr_thres))
predicted_class_df[,curr_col_name] <- convert_prediction_function(prediction_df[,"pred"],curr_thres)
}
#Add predicted classes to prediction df
comb_df <- cbind(prediction_df,predicted_class_df)
return(comb_df)
}
get_SampledPrediction_byPOSvsNEG_Ratio <- function(predition_df, acutal_label_col,NEGtoPOS_Ratio){
#Get pos and neg indexes
pos_idxes <- which(predition_df[,acutal_label_col] == 1)
neg_idxes <- which(predition_df[,acutal_label_col] == 0)
n_pos <- length(pos_idxes)
n_neg_samples <- n_pos*NEGtoPOS_Ratio
#Random sample N = n_pos *NEGtoPOS_Ratio  negative samples
sampled_neg_indexes <- sample(neg_idxes,n_neg_samples)
sampled_pred_df <- predition_df[c(pos_idxes,sampled_neg_indexes),]
return(sampled_pred_df)
}
compute_binaryclass_perf_func2 <- function(prediction_df,thresholdClass_col){
predicted_prob  <- prediction_df[,"pred"]
predicted_class <- prediction_df[,thresholdClass_col]
actual_label    <- prediction_df[,"actual"]
#compute ROC-AUC
auc_res <- compute_auc_func(predicted_prob,actual_label)
auc_score <- as.numeric(auc_res[[1]])
#Match label factor levels
matched_res   <- match_label_levels_func(predicted_class,actual_label)
final_pred    <- matched_res[[1]]
final_actual  <- matched_res[[2]]
cm<-confusionMatrix(final_pred, final_actual, positive = "1", dnn = c("Prediction", "TrueLabels"),mode = "everything")
#Manually get TN, FP, TP, FN
cm_tb <- cm$table
TN <- cm_tb[2,2]
FP <- cm_tb[1,2]
TP <- cm_tb[1,1]
FN <- cm_tb[2,1]
#class 1
performance_table <- cm$byClass[c("Sensitivity","Specificity",
"Pos Pred Value","Neg Pred Value",
"Precision", "Recall","F1")]
performance_table["Accuracy"] <- cm$overall[1]
performance_table["AUC"]      <- auc_score
performance_table["TNR_Specificity"] <- TN/(TN + FP) #True negative rate = specificity
performance_table["FPR"] <- FP/(TN + FP) #False postive rate
performance_table["TPR_Sensitivity_Recall"] <- TP/(TP + FN) #True postive rate = sensitivity = recall
performance_table["FNR"] <- FN/(TP + FN) #False negative rate
performance_table <- round(performance_table,2)
return(performance_table)
}
get_perf_table_func<- function(analysis_df,pts_level_char_df){
#Get pre or post numbers
n_pre               <- length(which(analysis_df[,"actual"]==0))
n_post              <- length(which(analysis_df[,"actual"]==1))
#Get SBCE or not patient IDs
analysis_char_df    <- pts_level_char_df[which(pts_level_char_df[,"study_id"] %in% analysis_df[,"study_id"]),]
n_nonrecurrent_pt   <- length(which(analysis_char_df[,"SBCE"]==0))
n_recurrent_pt      <- length(which(analysis_char_df[,"SBCE"]==1))
#Get performance for each threshold
thres_class_cols <- colnames(analysis_df)[which(grepl("Thres",colnames(analysis_df))==T)]
final_perf_df<- as.data.frame(matrix(NA, nrow = length(thres_class_cols),ncol = 14))
colnames(final_perf_df) <- c("Threshold","N_NonRecurrent","N_Recurrent","N_Pre","N_Post",
"AUC","Accuracy","Recall/Sensitivity/TPR",
"Specificity/TNR",
"Precision/PPV","F1",
"NPV","FPR","FNR")
for (i in 1:length(thres_class_cols)){
final_perf_df[i,"Threshold"]          <- thres_class_cols[i]
final_perf_df[i,"N_NonRecurrent"]     <- n_nonrecurrent_pt
final_perf_df[i,"N_Recurrent"]        <- n_recurrent_pt
final_perf_df[i,"N_Pre"]              <- n_pre
final_perf_df[i,"N_Post"]             <- n_post
curr_perf <- compute_binaryclass_perf_func2(analysis_df,thres_class_cols[i])
final_perf_df[i,"AUC"]                    <- curr_perf["AUC"]
final_perf_df[i,"Accuracy"]               <- curr_perf["Accuracy"]
final_perf_df[i,"Recall/Sensitivity/TPR"] <- curr_perf["Recall"]
final_perf_df[i,"Specificity/TNR"]        <- curr_perf["Specificity"]
final_perf_df[i,"Precision/PPV"]          <- curr_perf["Precision"]
final_perf_df[i,"F1"]                     <- curr_perf["F1"]
final_perf_df[i,"NPV"]                    <- curr_perf["Neg Pred Value"]
final_perf_df[i,"FPR"]                    <- curr_perf["FPR"]
final_perf_df[i,"FNR"]                    <- curr_perf["FNR"]
}
return(final_perf_df)
}
get_avg_perf_5times_sampling_func <-function(predition_df,NEGtoPOS_ratio,pts_level_char_df,threshold_list){
# predition_df <- test_prediction_df
# NEGtoPOS_ratio <- 1
# threshold_list <- ths
#
perf_list <- list(NA)
for (i in 1:5){#random saple 5 times and compute perforamcne
set.seed(i)
pred_df <- get_SampledPrediction_byPOSvsNEG_Ratio(predition_df,"actual",NEGtoPOS_ratio)
perf_list[[i]] <- get_perf_table_func(pred_df,pts_level_char_df)
}
perf_tb <- do.call(rbind,perf_list)
threholds_names <- gsub("\\.","",paste0("PredictedClass_Thres_",threshold_list))
avg_perf_list <- list(NA)
for (i in 1: length(threholds_names)){ #averg 5 times performance for each threshold
curr_th <- threholds_names[i]
curr_th_indexes <- which(perf_tb[,"Threshold"] == curr_th)
curr_th_pref <- perf_tb[curr_th_indexes,]
avg_perf_list[[i]] <- colMeans(curr_th_pref[,2:ncol(curr_th_pref)])
}
avg_perf <- round(do.call(rbind,avg_perf_list),2)
rownames(avg_perf) <- threholds_names
return(avg_perf)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
#proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "16_Performance/")
outdir           <- paste0(proj_dir, "16_Performance/")
########################################################################################################
#1.Load predictions
########################################################################################################
#Load prediction data
test_prediction_df <- read.csv(paste0(perfdir,"16_Prediction_Table.csv"))
########################################################################################################
#1.Load predictions
########################################################################################################
#Load prediction data
test_prediction_df <- read.csv(paste0(data_dir1,"16_Prediction_Table.csv"))
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
########################################################################################################
#1.Load predictions
########################################################################################################
#Load prediction data
test_prediction_df <- read.csv(paste0(data_dir1,"16_Prediction_Table.csv"))
#data dir
data_dir1        <- paste0(proj_dir, "16_Performance/")
outdir           <- paste0(proj_dir, "16_Performance/")
########################################################################################################
#1.Load predictions
########################################################################################################
#Load prediction data
test_prediction_df <- read.csv(paste0(data_dir1,"16_Prediction_Table.csv"))
#Get predicted Class by different threshold
ths <- seq(0.1,0.8,0.1)
test_prediction_df <- add_predicted_class_byThreshold(test_prediction_df,ths)
View(test_prediction_df)
################################################################################
#3. Load patient level char to get SBCE or not
################################################################################
pts_level_char_df <- read.xlsx(paste0(project_dir,"/8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
################################################################################
#3. Load patient level char to get SBCE or not
################################################################################
pts_level_char_df <- read.xlsx(paste0(proj_dir,"/8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
data_dir2        <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
################################################################################
#3. Load patient level char to get SBCE or not
################################################################################
pts_level_char_df <- read.xlsx(paste0(data_dir2,"/8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
########################################################################################################
#Compute performance 5 timmes sampling for each
# POS:NEG = 1:1
# POS:NEG = 1:2
# POS:NEG = 1:5
########################################################################################################
#random sample 5 times
perf_tb_pos1_neg1 <-  get_avg_perf_5times_sampling_func(test_prediction_df,1,pts_level_char_df,ths)
#Add study_id and month start
test_prediction_df$sample_id
#Add study_id and month start
original_IDs <- strsplit(test_prediction_df$sample_id,split = "@")
#Add study_id and month start
original_IDs <- strsplit(as.character(test_prediction_df$sample_id),split = "@")
test_prediction_df$study_id <- sapply(original_IDs, "[[", 1)
#Add study_id and month start
original_IDs <- strsplit(as.character(test_prediction_df$sample_id),split = "@")
test_prediction_df$study_id <- sapply(original_IDs, "[[", 1)
test_prediction_df$month_start <- sapply(original_IDs, "[[", 2)
test_prediction_df$month_start
########################################################################################################
#Compute performance 5 timmes sampling for each
# POS:NEG = 1:1
# POS:NEG = 1:2
# POS:NEG = 1:5
########################################################################################################
#random sample 5 times
perf_tb_pos1_neg1 <-  get_avg_perf_5times_sampling_func(test_prediction_df,1,pts_level_char_df,ths)
perf_tb_pos1_neg2 <-  get_avg_perf_5times_sampling_func(test_prediction_df,2,pts_level_char_df,ths)
perf_tb_pos1_neg5 <-  get_avg_perf_5times_sampling_func(test_prediction_df,5,pts_level_char_df,ths)
View(perf_tb_pos1_neg1)
analysis_df <- test_prediction_df
#Get pre or post numbers
n_pre               <- length(which(analysis_df[,"actual"]==0))
n_post              <- length(which(analysis_df[,"actual"]==1))
n_pre
n_post
#Get SBCE or not patient IDs
analysis_char_df    <- pts_level_char_df[which(pts_level_char_df[,"study_id"] %in% analysis_df[,"study_id"]),]
analysis_char_df
pts_level_char_df[,"study_id"]
test_prediction_df$study_id
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
write.csv(perf_tb_pos1_neg1,paste0(outdir,"perf_tb_pos1_neg1",".csv"),row.names = T)
write.csv(perf_tb_pos1_neg2,paste0(outdir,"perf_tb_pos1_neg2",".csv"),row.names = T)
write.csv(perf_tb_pos1_neg5,paste0(outdir,"perf_tb_pos1_neg5",".csv"),row.names = T)
View(perf_tb_pos1_neg1)
View(perf_tb_pos1_neg2)
write.csv(perf_tb_pos1_neg5,paste0(outdir,"perf_tb_pos1_neg5",".csv"),row.names = T)
View(perf_tb_pos1_neg5)
paste0(outdir,"16_Prediction_Table","_posweight",pos_weight,".csv")
pos_weight<-5
paste0(outdir,"16_Prediction_Table","_posweight",pos_weight,".csv")
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
