colnames(plot_data) <- c("month_start","Acutal","Predicted")
reshaped_plot_data <- melt(plot_data,id.vars="month_start") #reshape
p <- ggplot(reshaped_plot_data, aes(x= month_start, y= value,color = variable, linetype = variable,shape = variable)) +
geom_point(size=5) +
geom_line(size=1)+
scale_linetype_manual("variable",values=c(0,1)) +
scale_color_manual("variable",
values = c("Acutal" = "darkblue",
"Predicted" = "darkred"))+
scale_shape_manual("variable",values=c(16,NA)) +
ylim(c(0,1)) +
xlab("Year") +
ylab("Predicted Probability")+
theme_bw() +  theme(legend.position="top", legend.title = element_blank()) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=14))
p
curr_pred_month
pred_month <- curr_pred_month
p <- p + geom_vline(xintercept = pred_month, linetype="dotted", color = "darkorange", size=1.5) +
geom_text(aes(x=pred_month, label="Pred_Month", y=1), colour="darkorange", angle=0)
p
p <- p + geom_vline(xintercept = pred_month, linetype="dotted",
color = "darkorange", size=1.5) +
geom_text(aes(x=pred_month, label="Predicted Month", y=1),
colour="darkorange", angle=0)
p
acutal_pre_post_label_col
paste0(outdir, ds_out , model)
paste0(outdir, ds_out , model,"_",method)
################################################################################
#2.Get data for plot
################################################################################
#Create out dir for each ds
ds_out <- paste0("DS",ds_index,"/Z_Predicted_Trajectory/",model,"_",method,"/")
dir.create(file.path(outdir, ds_out), recursive = TRUE)
################################################################################
#2.Get data for plot
################################################################################
#Create out dir for each ds
ds_out <- paste0("DS",ds_index,"/Z_Predicted_Trajectory/",model,"_",method,"/")
dir.create(file.path(outdir, ds_out), recursive = TRUE)
paste0(outdir, ds_out)
i <- 1
if(i %% 100 == 0){print(i)}
curr_id <- test_ID[i]
#get prediction df
curr_df <- sp_pred_df[which(sp_pred_df[,"study_id"] == curr_id),]
#get label and predicted month
curr_indxes <- which(pt_pred_df[,"study_id"] == curr_id)
curr_label <- pt_pred_df[curr_indxes,"SBCE"]
curr_pred_month <- pt_pred_df[curr_indxes,pt_predmonth_col]
p <- plot_individual_prediction(curr_df,curr_pred_month,TRUE)
plot_individual_prediction(curr_df, "y_PRE_OR_POST_2ndEvent", sp_predprob_col,curr_pred_month, plot_pm = FALSE)
png(paste0(outdir, ds_out,"SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
source("Recapse_Ultility.R")
library(reshape2)
plot_individual_prediction <- function(pt_prediction_df, acutal_pre_post_label_col, pred_prob_col,pred_month, plot_pm = FALSE){
# pt_prediction_df <- curr_df
# acutal_pre_post_label_col <- "y_PRE_OR_POST_2ndEvent"
# pred_prob_col <- sp_predprob_col
# pred_month <- curr_pred_month
plot_data           <- curr_df[,c("month_start",acutal_pre_post_label_col,pred_prob_col)]
colnames(plot_data) <- c("month_start","Acutal","Predicted")
reshaped_plot_data <- melt(plot_data,id.vars="month_start") #reshape
p <- ggplot(reshaped_plot_data, aes(x= month_start, y= value,color = variable, linetype = variable,shape = variable)) +
geom_point(size=5) +
geom_line(size=1)+
scale_linetype_manual("variable",values=c(0,1)) +
scale_color_manual("variable",
values = c("Acutal" = "darkblue",
"Predicted" = "darkred"))+
scale_shape_manual("variable",values=c(16,NA)) +
ylim(c(0,1)) +
xlab("Year") +
ylab("Predicted Probability")+
theme_bw() +  theme(legend.position="top", legend.title = element_blank()) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=14))
if (plot_pm == T){
p <- p + geom_vline(xintercept = pred_month, linetype="dotted",
color = "darkorange", size=1.5) +
geom_text(aes(x=pred_month, label="Predicted Month", y=1),
colour="darkorange", angle=0)
}
return(p)
}
i <- 1
if(i %% 100 == 0){print(i)}
curr_id <- test_ID[i]
#get prediction df
curr_df <- sp_pred_df[which(sp_pred_df[,"study_id"] == curr_id),]
#get label and predicted month
curr_indxes <- which(pt_pred_df[,"study_id"] == curr_id)
curr_label <- pt_pred_df[curr_indxes,"SBCE"]
curr_pred_month <- pt_pred_df[curr_indxes,pt_predmonth_col]
p <- plot_individual_prediction(curr_df,curr_pred_month,TRUE)
plot_individual_prediction(curr_df, "y_PRE_OR_POST_2ndEvent", sp_predprob_col,curr_pred_month, plot_pm = FALSE)
png(paste0(outdir, ds_out,"SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
source("Recapse_Ultility.R")
library(reshape2)
plot_individual_prediction <- function(pt_prediction_df, acutal_pre_post_label_col, pred_prob_col,pred_month, plot_pm = FALSE){
# pt_prediction_df <- curr_df
# acutal_pre_post_label_col <- "y_PRE_OR_POST_2ndEvent"
# pred_prob_col <- sp_predprob_col
# pred_month <- curr_pred_month
plot_data           <- curr_df[,c("month_start",acutal_pre_post_label_col,pred_prob_col)]
colnames(plot_data) <- c("month_start","Acutal","Predicted")
reshaped_plot_data <- melt(plot_data,id.vars="month_start") #reshape
p <- ggplot(reshaped_plot_data, aes(x= month_start, y= value,color = variable, linetype = variable,shape = variable)) +
geom_point(size=5) +
geom_line(size=1)+
scale_linetype_manual("variable",values=c(0,1)) +
scale_color_manual("variable",
values = c("Acutal" = "darkblue",
"Predicted" = "darkred"))+
scale_shape_manual("variable",values=c(16,NA)) +
ylim(c(0,1)) +
xlab("Year") +
ylab("Predicted Probability")+
theme_bw() +  theme(legend.position="top", legend.title = element_blank()) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=14,face="bold"),
legend.text=element_text(size=14))
if (plot_pm == T){
p <- p + geom_vline(xintercept = pred_month, linetype="dotted",
color = "darkorange", size=1.5) +
geom_text(aes(x=pred_month, label="Predicted Month", y=1),
colour="darkorange", angle=0)
}
return(p)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1 <- paste0(proj_dir, "16C_Predictions/Test/")
outdir <- paste0(proj_dir, "17_Performance/")
################################################################################
#User input
################################################################################
model <- "AI"                            #c("Hybrid","AI","HybridCurveFit","AICurveFit")
method <- "Persis3Month_GT_Threshold"    #c("BinSeg","OneMonth_GT_Threshold","Persis3Month_GT_Threshold")
ths <- seq(1,9,1)
samplelabel_col <- "y_PRE_OR_POST_2ndEvent"
ds_index <- 3
################################################################################
#2.Get data for plot
################################################################################
#Create out dir for each ds
ds_out <- paste0("DS",ds_index,"/Z_Predicted_Trajectory/",model,"_",method,"/")
dir.create(file.path(outdir, ds_out), recursive = TRUE)
#1. Load all sample prediction table
sample_pred_dir  <- paste0(data_dir1,"DS",ds_index,"/Sample_Prediction_Table/")
sample_pred_file <- paste0("pred_tb_",model,".csv")
sp_pred_df <- read.csv(paste0(sample_pred_dir,sample_pred_file),stringsAsFactors = F)
sp_pred_df[,"month_start"] <- ymd(sp_pred_df[,"month_start"])
sp_predprob_col <- paste0("pred_Method_", model)
#2. Load all patient prediction table
pt_pred_dir  <- paste0(data_dir1,"DS",ds_index,"/Patient_Prediction_Table/")
pt_pred_file <- paste0(model, "_", method,"_patientlevel_pred_tb.csv")
pt_pred_df <- read.csv(paste0(pt_pred_dir,pt_pred_file),stringsAsFactors = F)
pt_predmonth_col <- "Pred_SBCEMon_Thres_05"
pt_pred_df[,"Acutal_SBCEMonth"] <- ymd(pt_pred_df[,"Acutal_SBCEMonth"])
pt_pred_df[,pt_predmonth_col] <- ymd(pt_pred_df[,pt_predmonth_col])
################################################################################
#Plot
#'@TODO: Maybe add event date Later
################################################################################
test_ID <- unique(pt_pred_df$study_id)
################################################################################
#Plot
#'@TODO: Maybe add event date Later
################################################################################
test_ID <- unique(pt_pred_df$study_id)
i <- 1
if(i %% 100 == 0){print(i)}
curr_id <- test_ID[i]
#get prediction df
curr_df <- sp_pred_df[which(sp_pred_df[,"study_id"] == curr_id),]
#get label and predicted month
curr_indxes <- which(pt_pred_df[,"study_id"] == curr_id)
curr_label <- pt_pred_df[curr_indxes,"SBCE"]
curr_pred_month <- pt_pred_df[curr_indxes,pt_predmonth_col]
p <- plot_individual_prediction(curr_df,curr_pred_month,TRUE)
plot_individual_prediction(curr_df, "y_PRE_OR_POST_2ndEvent", sp_predprob_col,curr_pred_month, plot_pm = FALSE)
png(paste0(outdir, ds_out,"SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
i <- 1
if(i %% 100 == 0){print(i)}
curr_id <- test_ID[i]
#get prediction df
curr_df <- sp_pred_df[which(sp_pred_df[,"study_id"] == curr_id),]
#get label and predicted month
curr_indxes <- which(pt_pred_df[,"study_id"] == curr_id)
curr_label <- pt_pred_df[curr_indxes,"SBCE"]
curr_pred_month <- pt_pred_df[curr_indxes,pt_predmonth_col]
p <- plot_individual_prediction(curr_df, "y_PRE_OR_POST_2ndEvent", sp_predprob_col,curr_pred_month, plot_pm = FALSE)
png(paste0(outdir, ds_out,"SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
curr_pred_month
p <- plot_individual_prediction(curr_df, "y_PRE_OR_POST_2ndEvent",
sp_predprob_col,curr_pred_month, plot_pm = TRUE)
png(paste0(outdir, ds_out,"SBCE",curr_label,"_ID",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/17C_PlotPredictions.R')
curr_id <- "ID14404"
#get prediction df
curr_df <- sp_pred_df[which(sp_pred_df[,"study_id"] == curr_id),]
#get label and predicted month
curr_indxes <- which(pt_pred_df[,"study_id"] == curr_id)
curr_label <- pt_pred_df[curr_indxes,"SBCE"]
curr_pred_month <- pt_pred_df[curr_indxes,pt_predmonth_col]
curr_indxes
curr_label
curr_pred_month
View(pt_pred_df)
View(curr_df)
#get prediction df
curr_df <- sp_pred_df[which(sp_pred_df[,"study_id"] == curr_id),]
#get label and predicted month
curr_indxes <- which(pt_pred_df[,"study_id"] == curr_id)
curr_label <- pt_pred_df[curr_indxes,"SBCE"]
curr_pred_month <- pt_pred_df[curr_indxes,pt_predmonth_col]
p <- plot_individual_prediction(curr_df, "y_PRE_OR_POST_2ndEvent",
sp_predprob_col,curr_pred_month, plot_pm = TRUE)
png(paste0(outdir, ds_out,"SBCE",curr_label,"_",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
for (i in 1:length(test_ID)){
if(i %% 100 == 0){print(i)}
curr_id <- test_ID[i]
#get prediction df
curr_df <- sp_pred_df[which(sp_pred_df[,"study_id"] == curr_id),]
#get label and predicted month
curr_indxes <- which(pt_pred_df[,"study_id"] == curr_id)
curr_label <- pt_pred_df[curr_indxes,"SBCE"]
curr_pred_month <- pt_pred_df[curr_indxes,pt_predmonth_col]
p <- plot_individual_prediction(curr_df, "y_PRE_OR_POST_2ndEvent",
sp_predprob_col,curr_pred_month, plot_pm = TRUE)
png(paste0(outdir, ds_out,"SBCE",curr_label,"_",curr_id,".png"),res=150,width = 700,height = 700)
print(p)
dev.off()
}
curr_id <- "ID1159"
#get prediction df
curr_df <- sp_pred_df[which(sp_pred_df[,"study_id"] == curr_id),]
View(curr_df)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/17C_PlotPredictions.R')
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/17C_PlotPredictions.R')
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/17B_Compute_Perf_PatientLevel.R')
source("Recapse_Ultility.R")
library("SHAPforxgboost")
library("ggplot2")
library("xgboost")
library("data.table")
library("here")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1 <- paste0(proj_dir, "15_XGB_Input/")
################################################################################
#Load train and test
################################################################################
load(file = paste0(data_dir1, "Train/train_nonobv_DS3.rda", ds_index, ".rda"))
################################################################################
#User input
################################################################################
model <- "AI"                            #c("Hybrid","AI","HybridCurveFit","AICurveFit")
method <- "Persis3Month_GT_Threshold"    #c("BinSeg","OneMonth_GT_Threshold","Persis3Month_GT_Threshold")
ths <- seq(1,9,1)
samplelabel_col <- "y_PRE_OR_POST_2ndEvent"
ds_index <- 3
################################################################################
#Load train and test
################################################################################
load(file = paste0(data_dir1, "Train/train_nonobv_DS3.rda", ds_index, ".rda"))
load(file = paste0(data_dir1, "Test/test_pos_data.rda"))
################################################################################
#Load train and test
################################################################################
load(file = paste0(data_dir1, "Train/train_nonobv_DS", ds_index, ".rda"))
load(file = paste0(data_dir1, "Test/test_pos_data.rda"))
load(file = paste0(data_dir1, "Test/test_neg_data.rda"))
load(file = paste0(data_dir1, "Test/test_nonobv_data.rda"))
data_dir2 <- paste0(proj_dir, "16B_Trained_ImportantFeatureModel/")
################################################################################
#Load important features for each DS
################################################################################
important_f_df <- read.csv(paste0(data_dir2,"importance_matrix_DS",ds_index,"_topf.csv"), stringsAsFactors = F)
top_fs <- important_f_df[,"Feature"]
top_fs
################################################################################
#Create xgb input
################################################################################
train_label      <- as.numeric(train_data[,"y_PRE_OR_POST_2ndEvent"])
################################################################################
#Create xgb input
################################################################################
train_data <- train_nonobv_ds_df
train_label      <- as.numeric(train_data[,"y_PRE_OR_POST_2ndEvent"])
train_data_part  <- train_data[,top_fs] #top 50 features
dtrain           <- xgb.DMatrix(data = as.matrix(train_data_part), label = train_label)
test_label       <- as.numeric(test_data[,"y_PRE_OR_POST_2ndEvent"])
test_data <- rbind(test_pos_df,test_neg_df,test_nonobv_df)
nrow(test_data)
train_label      <- as.numeric(train_data[,"y_PRE_OR_POST_2ndEvent"])
train_data_part  <- train_data[,top_fs] #top 50 features
dtrain           <- xgb.DMatrix(data = as.matrix(train_data_part), label = train_label)
test_label       <- as.numeric(test_data[,"y_PRE_OR_POST_2ndEvent"])
test_data_part   <- test_data[,top_fs] #top 50 features
dtest            <- xgb.DMatrix(data = as.matrix(test_data_part), label = test_label)
test_data_neg <- test_data[which(test_data[,"sample_id"] %in% test_sampleID_obvNeg),]
test_data_neg <- test_data[which(test_data[,"sample_id"] %in% test_pos_df$sample_id),]
test_data_neg <- test_data[which(test_data[,"sample_id"] %in% test_neg_df$sample_id),]
test_data_pos <- test_data[which(test_data[,"sample_id"] %in% test_pos_df$sample_id),]
test_data_nonobv <- test_data[which(test_data[,"sample_id"] %in% test_nonobv_df$sample_id),]
#Load Optimal model
mod_optimal <- xgb.load(paste0(data_dir2,"train_DS",ds_index,"_topf",".model"))
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/19_SHAP.R')
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/19_SHAP.R')
source("Recapse_Ultility.R")
library("SHAPforxgboost")
library("ggplot2")
library("xgboost")
library("data.table")
library("here")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1 <- paste0(proj_dir, "15_XGB_Input/")
data_dir2 <- paste0(proj_dir, "16B_Trained_ImportantFeatureModel/")
outdir <- paste0(proj_dir, "17_Performance/")
################################################################################
#User input
################################################################################
ds_index <- 3
#Create directory
ds_out <- paste0("DS",ds_index,"/SHAP/")
dir.create(file.path(outdir, ds_out), recursive = TRUE)
################################################################################
#Load train and test
################################################################################
load(file = paste0(data_dir1, "Train/train_nonobv_DS", ds_index, ".rda"))
load(file = paste0(data_dir1, "Test/test_pos_data.rda"))
load(file = paste0(data_dir1, "Test/test_neg_data.rda"))
load(file = paste0(data_dir1, "Test/test_nonobv_data.rda"))
################################################################################
#Load important features for each DS and optimal model
################################################################################
important_f_df <- read.csv(paste0(data_dir2,"importance_matrix_DS",ds_index,"_topf.csv"), stringsAsFactors = F)
top_fs <- important_f_df[,"Feature"]
#Load Optimal model
mod_optimal <- xgb.load(paste0(data_dir2,"train_DS",ds_index,"_topf",".model"))
################################################################################
#Create xgb input
################################################################################
train_data <- train_nonobv_ds_df
test_data <- rbind(test_pos_df,test_neg_df,test_nonobv_df)
train_label      <- as.numeric(train_data[,"y_PRE_OR_POST_2ndEvent"])
train_data_part  <- train_data[,top_fs] #top 50 features
dtrain           <- xgb.DMatrix(data = as.matrix(train_data_part), label = train_label)
test_label       <- as.numeric(test_data[,"y_PRE_OR_POST_2ndEvent"])
test_data_part   <- test_data[,top_fs] #top 50 features
dtest            <- xgb.DMatrix(data = as.matrix(test_data_part), label = test_label)
test_data_neg <- test_data[which(test_data[,"sample_id"] %in% test_neg_df$sample_id),]
test_data_pos <- test_data[which(test_data[,"sample_id"] %in% test_pos_df$sample_id),]
test_data_nonobv <- test_data[which(test_data[,"sample_id"] %in% test_nonobv_df$sample_id),]
shap_input_df <- as.matrix(train_data_part[,mod_optimal$feature_names]) ##make sure the feature is the same order as the ones in the model
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = shap_input_df)
# The ranked features by mean |SHAP|
shap_values$mean_shap_score
#Plot
outfile_name <- paste0(outdir, ds_out,"SHAP_train.png")
png(outfile_name)
print(shap.plot.summary.wrap1(model = mod_optimal, X = shap_input_df,top_n = 10))
dev.off()
################################################################################
#SHAP for Train
################################################################################
shap_input_df <- as.matrix(train_data_part[,mod_optimal$feature_names]) ##make sure the feature is the same order as the ones in the model
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = shap_input_df)
View(shap_input_df)
mod_optimal
mod_optimal
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = train_data_part)
train_data_part
View(train_data_part)
################################################################################
#SHAP for Train
################################################################################
shap_input_df <- as.matrix(train_data_part) ##make sure the feature is the same order as the ones in the model
################################################################################
#SHAP for Train
################################################################################
shap_input_df <- as.matrix(train_data_part)
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = shap_input_df)
# The ranked features by mean |SHAP|
shap_values$mean_shap_score
#Plot
outfile_name <- paste0(outdir, ds_out,"SHAP_train.png")
png(outfile_name)
print(shap.plot.summary.wrap1(model = mod_optimal, X = train_data_part,top_n = 10))
print(shap.plot.summary.wrap1(model = mod_optimal, X = shap_input_df,top_n = 10))
dev.off()
#Plot
p <- shap.plot.summary.wrap1(model = mod_optimal, X = shap_input_df,top_n = 10)
outfile_name <- paste0(outdir, ds_out,"SHAP_train.png")
png(outfile_name,width = 200,height = 500)
print(p)
dev.off()
outfile_name <- paste0(outdir, ds_out,"SHAP_train.png")
png(outfile_name,width = 800,height = 500)
print(p)
dev.off()
outfile_name <- paste0(outdir, ds_out,"SHAP_train.png")
png(outfile_name,width = 800,height = 500,res=200)
print(p)
dev.off()
################################################################################
#SHAP for Test
################################################################################
shap_input_df <- as.matrix(test_data_part) ##make sure the feature is the same order as the ones in the model
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = shap_input_df)
# The ranked features by mean |SHAP|
shap_values$mean_shap_score
p <- shap.plot.summary.wrap1(model = mod_optimal, X = shap_input_df,top_n = 10)
outfile_name <- paste0(outdir, ds_out,"SHAP_test.png")
png(outfile_name)
print(p)
dev.off()
png(outfile_name,width = 800,height = 500,res=100)
print(p)
dev.off()
source("Recapse_Ultility.R")
library("SHAPforxgboost")
library("ggplot2")
library("xgboost")
library("data.table")
library("here")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1 <- paste0(proj_dir, "15_XGB_Input/")
data_dir2 <- paste0(proj_dir, "16B_Trained_ImportantFeatureModel/")
outdir <- paste0(proj_dir, "17_Performance/")
################################################################################
#User input
################################################################################
ds_index <- 3
#Create directory
ds_out <- paste0("DS",ds_index,"/SHAP/")
dir.create(file.path(outdir, ds_out), recursive = TRUE)
################################################################################
#Load train and test
################################################################################
load(file = paste0(data_dir1, "Train/train_nonobv_DS", ds_index, ".rda"))
load(file = paste0(data_dir1, "Test/test_pos_data.rda"))
load(file = paste0(data_dir1, "Test/test_neg_data.rda"))
load(file = paste0(data_dir1, "Test/test_nonobv_data.rda"))
table(train_nonobv_ds_df$DAJCC_N)
