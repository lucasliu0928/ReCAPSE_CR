setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
#######################################################################
##############              Data dir                     ##############
#######################################################################
data_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
outdir   <- "/recapse/intermediate_data/0_Codes/BeforeClean_UniqueCodes/"
#local
data_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/Testing data for UH3 - Dec 16 2020/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/BeforeClean_UniqueCodes/"
#######################################################################
############################## Medicaid  ##############################
#######################################################################
#Data
data_df1 <- read.csv(paste0(data_dir,"kcr_medicaid_healthclaims_fb0015.csv"),stringsAsFactors = F)
data_df2 <- read.csv(paste0(data_dir,"KCR_MEDICAID_PHARMCLAIMS_FB0015.csv"),stringsAsFactors = F)
check_df <- data_df1[,HCPCS_proc_cols]
#Codes columns
ICD_diag_cols   <- c("CDE_DIAG_PRIM","CDE_DIAG_2","CDE_DIAG_3","CDE_DIAG_4") #ICD 9 or ICD10
HCPCS_proc_cols <- c("CDE_PROC_PRIM")                                        #HCPCS
AHFS_drug_cols  <- c("CDE_THERA_CLS_AHFS")
NDC_drug_cols   <- c("CDE_NDC")
#PROC: HCPC
check_df <- data_df1[,HCPCS_proc_cols]
colnames(data_df1)
#PROC: HCPC
check_df <- data_df1[,c("study_id",HCPCS_proc_cols]
#PROC: HCPC
check_df <- data_df1[,c("study_id",HCPCS_proc_cols)]
View(check_df)
#PROC: HCPC
HCPC_df_medicaid <- data_df1[,c("study_id",HCPCS_proc_cols)]
#PROC: HCPC
HCPC_df_medicaid <- data_df1[,c("study_id",HCPCS_proc_cols)]
indexes <- which(HCPC_df_medicaid$CDE_PROC_PRIM == "J9355")
Code_check <- HCPC_df_medicaid[indexes,]
#PROC: HCPC
HCPC_df_medicare <- data_df[,c("study_id",HCPCS_proc_cols)]
#Data (Do not use fread, it converts large interge to scitific notation )
data_df <- read.csv(paste0(data_dir,"kcr_medicare_claims_fb0015.csv"),stringsAsFactors = F)
#Code cols
ICD_diag_cols <- paste0("DGNS_CD",seq(1,25))             #ICD9 or ICD10
HCPCS_proc_cols     <- "HCPCS_CD"                        #HCPCS
ICD_procedure_cols <- paste0("PRCDRCD", seq(1,25,1))     #ICD9 or ICD10
NDC_drug_cols <- c("NDC_CD","PROD_SRVC_ID")              #NDC
ICD_diag_cols
length(unique(Code_check$study_id))
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
#######################################################################
##############              Data dir                     ##############
#######################################################################
code_data_dir <- "/recapse/intermediate_data/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/recapse/data/"
outdir   <- "/recapse/intermediate_data/0_Codes/Grouped_CleanUniqueCodes/"
#local
code_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/Grouped_CleanUniqueCodes/"
################################################################################
#1. Load grping data
################################################################################
#1. Load CCS Groups file:
CCS_df <- load_and_clean_CSS_data(grping_data_dir)
CCS_Diag_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Diag","ICD10_Diag")),]
CCS_Proc_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Proc","ICD10_Proc")),]
#2.Load CCS servis procedure group file
CCS_SProc_df <- load_and_clean_CSS_ServicesP_data(grping_data_dir)
#3. Load Chuback Groups file:
Chuback_df <- load_and_clean_Chubak_data(grping_data_dir)
Chuback_Diag_df <- Chuback_df[which(Chuback_df$Code.type %in% c("ICD-9 diagnosis")),]
Chuback_Proc_df <- Chuback_df[which(Chuback_df$Code.type %in% c("HCPC","ICD-9 procedure","CPT", "CPT category II","CPT category III")),]
#4. load Ritzwoller file:
Ritzwoller_df <- load_and_clean_Ritzwoller_data(grping_data_dir)
Ritzwoller_Diag_df <- Ritzwoller_df[which(Ritzwoller_df$D_or_P == "Diagnostic"),] #48
Ritzwoller_Proc_df <- Ritzwoller_df[which(Ritzwoller_df$D_or_P == "Procedure"),] #1008
#5.Load DM3 drug group
DM3_df <- load_and_clean_DM3_data(grping_data_dir)
#6.Load Val drug groups
VAL_df <- load_and_clean_Val_data(grping_data_dir)
################################################################################
#2. Load unique codes data
################################################################################
unique_diag_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Diag_Codes.xlsx"),sheet = 1)
unique_proc_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Proc_Codes.xlsx"),sheet = 1)
unique_drug_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Drug_Codes.xlsx"),sheet = 1)
View(VAL_df)
#3. DM3 drug codes
#grouped_unique_drug_df <- group_drugcodes_into_DM3_func(unique_drug_df,DM3_df) #use drug_name to group
grouped_unique_drug_df <- group_drugcodes_into_DM3_funcV2(unique_drug_df,DM3_df) #use short GNN to group
View(VAL_df)
View(VAL_df)
#4.VAL drug grouping
grouped_unique_drug_df_VAL <- group_drugcodes_into_VAL_func(unique_drug_df,VAL_df) #use short GNN to group
View(grouped_unique_drug_df_VAL)
View(VAL_df)
#Manually add 50242013460 as "Antineoplastic - Anti-her2 Agents" and "Antineoplastic Agents And Adjunctive Therapies"
idx <- which(grouped_unique_drug_df_VAL$CODE == "50242013460")
idx
colnames(grouped_unique_drug_df_VAL)
unique(VAL_df$SECONDARY_CLASSIFICATION)
unique(VAL_df$ROOT_CLASSIFICATION)
idx <- which(grouped_unique_drug_df_VAL$CODE == "50242013460")
grouped_unique_drug_df_VAL[idx,"VAL_ROOT_group"] <- "Antineoplastic Agents And Adjunctive Therapies"
grouped_unique_drug_df_VAL[idx,"VAL_SECONDARY_group"] <- "Antineoplastic - Anti-her2 Agents"
comb_grp_drug_df <- merge(grouped_unique_drug_df,
grouped_unique_drug_df_VAL[,c("CODE","VAL_ROOT_group","VAL_SECONDARY_group")], by = 'CODE')
write.xlsx(comb_grp_drug_df,paste0(outdir,"Unique_Drug_And_Groups_inALLClaims.xlsx"),overwrite = TRUE)
View(comb_grp_drug_df)
write.xlsx(comb_grp_drug_df,paste0(outdir,"Unique_Drug_And_Groups_inALLClaims.xlsx"),overwrite = TRUE)
report_code_grps_func <- function(in_data, grp_name){
# in_data <- grouped_unique_diag_df
# grp_name <- "CCS_CATEGORY"
#Get total number of unique codes
n_codes <- nrow(in_data)
#Get number of codes have groups
has_grp_indexes <- which(is.na(in_data[,grp_name])==F)
n_codes_hasgrps <- length(has_grp_indexes)
#Number of codes have no groups
n_codes_NOgrps <-  n_codes - n_codes_hasgrps
#Number of groups
n_grps <-  length(unique(in_data[has_grp_indexes,grp_name]))
grp_stats <- cbind.data.frame(n_codes,n_codes_hasgrps,n_codes_NOgrps,n_grps)
return(grp_stats)
}
#Diag
CCS_stats <- report_code_grps_func(grouped_unique_diag_df,"CCS_CATEGORY")
Chubak_Type_stats <- report_code_grps_func(grouped_unique_diag_df,"Chubak_Type")
Chubak_Category_stats <- report_code_grps_func(grouped_unique_diag_df,"Chubak_Category")
Ritzwoller_Type_stats <- report_code_grps_func(grouped_unique_diag_df,"Ritzwoller_Type")
Ritzwoller_Category_stats <- report_code_grps_func(grouped_unique_diag_df,"Ritzwoller_Category")
Diag_stats <- rbind(CCS_stats,Chubak_Type_stats,Chubak_Category_stats,Ritzwoller_Type_stats,Ritzwoller_Category_stats)
rownames(Diag_stats) <- c("CCS","Chubak_Type","Chubak_Category","Ritzwoller_Type","Ritzwoller_Category")
rownames(Diag_stats) <- paste0("DIAG_",rownames(Diag_stats))
#Proc
CCS_stats <- report_code_grps_func(grouped_unique_proc_df,"CCS_CATEGORY")
Chubak_Type_stats <- report_code_grps_func(grouped_unique_proc_df,"Chubak_Type")
Chubak_Category_stats <- report_code_grps_func(grouped_unique_proc_df,"Chubak_Category")
Ritzwoller_Type_stats <- report_code_grps_func(grouped_unique_proc_df,"Ritzwoller_Type")
Ritzwoller_Category_stats <- report_code_grps_func(grouped_unique_proc_df,"Ritzwoller_Category")
Proc_stats <- rbind(CCS_stats,Chubak_Type_stats,Chubak_Category_stats,Ritzwoller_Type_stats,Ritzwoller_Category_stats)
rownames(Proc_stats) <- c("CCS","Chubak_Type","Chubak_Category","Ritzwoller_Type","Ritzwoller_Category")
rownames(Proc_stats) <- paste0("PROC_",rownames(Proc_stats))
#Drug
DM3_stats1 <- report_code_grps_func(comb_grp_drug_df,"specific_group")
DM3_stats2 <- report_code_grps_func(comb_grp_drug_df,"general_group")
DM3_stats3 <- report_code_grps_func(comb_grp_drug_df,"VAL_ROOT_group")
DM3_stats4 <- report_code_grps_func(comb_grp_drug_df,"VAL_SECONDARY_group")
Drug_stats <- rbind(DM3_stats1,DM3_stats2,DM3_stats3,DM3_stats4)
rownames(Drug_stats) <- c("DM3_specific","DM3_general","VAL_ROOT_group","VAL_SECONDARY_group")
#Check the intersection between DM3 short code and short GNN in claims data
length(intersect(DM3_df$short_code,grouped_unique_drug_df$short_GNN)) #359
length(unique(grouped_unique_drug_df$short_GNN))  #unique short_GNN: 4180
length(unique(DM3_df$short_code))                 #unique short_GNN: 420
#All stats
all_stats <- rbind(Diag_stats,Proc_stats,Drug_stats)
#1. diagnose codes
grouped_unique_diag_df <- group_codes_into_CCS_func(unique_diag_df,CCS_Diag_df,NULL) #add CCS
grouped_unique_diag_df <- group_codes_into_chubak_func(grouped_unique_diag_df,Chuback_Diag_df) #add chuback
grouped_unique_diag_df <- group_codes_into_Ritzwoller_func(grouped_unique_diag_df,Ritzwoller_Diag_df) #add ritzwoller
#write.xlsx(grouped_unique_diag_df,paste0(outdir,"Unique_Diag_And_Groups_inALLClaims.xlsx"))
#2. procedure codes
grouped_unique_proc_df <- group_codes_into_CCS_func(unique_proc_df,CCS_Proc_df,CCS_SProc_df) #add CCS
grouped_unique_proc_df <- group_codes_into_chubak_func(grouped_unique_proc_df,Chuback_Proc_df)  #add chuback
grouped_unique_proc_df <- group_codes_into_Ritzwoller_func(grouped_unique_proc_df,Ritzwoller_Proc_df)#add ritzwoller
#write.xlsx(grouped_unique_proc_df,paste0(outdir,"Unique_Proc_And_Groups_inALLClaims.xlsx"))
report_code_grps_func <- function(in_data, grp_name){
# in_data <- grouped_unique_diag_df
# grp_name <- "CCS_CATEGORY"
#Get total number of unique codes
n_codes <- nrow(in_data)
#Get number of codes have groups
has_grp_indexes <- which(is.na(in_data[,grp_name])==F)
n_codes_hasgrps <- length(has_grp_indexes)
#Number of codes have no groups
n_codes_NOgrps <-  n_codes - n_codes_hasgrps
#Number of groups
n_grps <-  length(unique(in_data[has_grp_indexes,grp_name]))
grp_stats <- cbind.data.frame(n_codes,n_codes_hasgrps,n_codes_NOgrps,n_grps)
return(grp_stats)
}
#Diag
CCS_stats <- report_code_grps_func(grouped_unique_diag_df,"CCS_CATEGORY")
Chubak_Type_stats <- report_code_grps_func(grouped_unique_diag_df,"Chubak_Type")
Chubak_Category_stats <- report_code_grps_func(grouped_unique_diag_df,"Chubak_Category")
Ritzwoller_Type_stats <- report_code_grps_func(grouped_unique_diag_df,"Ritzwoller_Type")
Ritzwoller_Category_stats <- report_code_grps_func(grouped_unique_diag_df,"Ritzwoller_Category")
Diag_stats <- rbind(CCS_stats,Chubak_Type_stats,Chubak_Category_stats,Ritzwoller_Type_stats,Ritzwoller_Category_stats)
rownames(Diag_stats) <- c("CCS","Chubak_Type","Chubak_Category","Ritzwoller_Type","Ritzwoller_Category")
rownames(Diag_stats) <- paste0("DIAG_",rownames(Diag_stats))
#Proc
CCS_stats <- report_code_grps_func(grouped_unique_proc_df,"CCS_CATEGORY")
Chubak_Type_stats <- report_code_grps_func(grouped_unique_proc_df,"Chubak_Type")
Chubak_Category_stats <- report_code_grps_func(grouped_unique_proc_df,"Chubak_Category")
Ritzwoller_Type_stats <- report_code_grps_func(grouped_unique_proc_df,"Ritzwoller_Type")
Ritzwoller_Category_stats <- report_code_grps_func(grouped_unique_proc_df,"Ritzwoller_Category")
Proc_stats <- rbind(CCS_stats,Chubak_Type_stats,Chubak_Category_stats,Ritzwoller_Type_stats,Ritzwoller_Category_stats)
rownames(Proc_stats) <- c("CCS","Chubak_Type","Chubak_Category","Ritzwoller_Type","Ritzwoller_Category")
rownames(Proc_stats) <- paste0("PROC_",rownames(Proc_stats))
#Drug
DM3_stats1 <- report_code_grps_func(comb_grp_drug_df,"specific_group")
DM3_stats2 <- report_code_grps_func(comb_grp_drug_df,"general_group")
DM3_stats3 <- report_code_grps_func(comb_grp_drug_df,"VAL_ROOT_group")
DM3_stats4 <- report_code_grps_func(comb_grp_drug_df,"VAL_SECONDARY_group")
Drug_stats <- rbind(DM3_stats1,DM3_stats2,DM3_stats3,DM3_stats4)
rownames(Drug_stats) <- c("DM3_specific","DM3_general","VAL_ROOT_group","VAL_SECONDARY_group")
#Check the intersection between DM3 short code and short GNN in claims data
length(intersect(DM3_df$short_code,grouped_unique_drug_df$short_GNN)) #359
length(unique(grouped_unique_drug_df$short_GNN))  #unique short_GNN: 4180
length(unique(DM3_df$short_code))                 #unique short_GNN: 420
#All stats
all_stats <- rbind(Diag_stats,Proc_stats,Drug_stats)
View(all_stats)
write.csv(all_stats,paste0(outdir,"Codes_Stats_inALLClaims_updated.csv"))
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
#This scrip generate CCS diag feature per month for each final ID (All enrolls)
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "0_Codes/Grouped_CleanUniqueCodes/")
data_dir2  <- paste0(proj_dir, "6_CleanClaims_InValidMonth/EnrolledMonths_WithPossibleMonthsHasNoCodes3/")
data_dir3  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir   <- paste0(proj_dir, "10F2_VAL2NDFeature_inValidMonth/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.Load group df
################################################################################
drug_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Drug_And_Groups_inALLClaims.xlsx"),sheet = 1)
View(drug_grp_df)
#reformat
#Drug:
indx1 <- which(drug_grp_df[,"TYPE"] == "DRUG_THERA_CLS_AHFS")
drug_grp_df[indx1,"TYPE"] <- "DRUG_AHFS"  #change type name
#replace space, "(" and "/" by "_"
# drug_grp_df[,"VAL_SECONDARY_group"] <- gsub(" |/|\\(","_",drug_grp_df[,"VAL_SECONDARY_group"])
# drug_grp_df[,"VAL_SECONDARY_group"] <- gsub(")","",drug_grp_df[,"VAL_SECONDARY_group"])
# drug_grp_df[,"VAL_SECONDARY_group"] <- gsub("___","_",drug_grp_df[,"VAL_SECONDARY_group"])
# drug_grp_df[,"VAL_SECONDARY_group"] <- gsub("__","_",drug_grp_df[,"VAL_SECONDARY_group"])
#add prefix
drug_grp_df[,"VAL_SECONDARY_group"] <- paste0("VAL_2ND_",drug_grp_df[,"VAL_SECONDARY_group"])
colnames(drug_grp_df)[which(colnames(drug_grp_df) == "VAL_SECONDARY_group")] <- "VAL_2ND" #change column names
View(drug_grp_df)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/10H_SelectGroups.R', echo=TRUE)
dir.create(outdir, showWarnings = TRUE, recursive = FALSE, mode = "0777")
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/10H_SelectGroups.R', echo=TRUE)
dir.create(outdir, showWarnings = TRUE, recursive = FALSE, mode = "0777")
dir.create("10H_Selected_Grps", showWarnings = TRUE, recursive = FALSE, mode = "0777")
getcwd()
dir.create(file.path(proj_dir, outdir), recursive = TRUE)
proj_dir
outdir
dir.create(file.path(proj_dir, "10H_Selected_Grps/WithPossibleMonthsHasNoCodes/"), recursive = TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/10H_SelectGroups.R', echo=TRUE)
source("Recapse_Ultility.R")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir_diag  <- paste0(proj_dir, "10B_CCSDiagFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir_proc  <- paste0(proj_dir, "10C_CCSProcFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir_drug  <- paste0(proj_dir, "10F_VAL2NDFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir2  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
data_dir3  <- paste0(proj_dir, "10H_Selected_Grps/WithPossibleMonthsHasNoCodes/")
outdir   <- paste0(proj_dir, "11A_ModelReady_GrpFeature/WithPossibleMonthsHasNoCodes/")
dir.create(file.path(proj_dir, "11A_ModelReady_GrpFeature/WithPossibleMonthsHasNoCodes/"), recursive = TRUE)
################################################################################
#1.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir2,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
################################################################################
#2.Final model ready grps
################################################################################
modelready_grps_df1 <- read.xlsx(paste0(data_dir3,"Selected_CCSDiag_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df2 <- read.xlsx(paste0(data_dir3,"Selected_CCSProc_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df3 <- read.xlsx(paste0(data_dir3,"Selected_VAL2ndDrug_Unique_Grps.xlsx"),sheet = 1)
modelready_Diag_features
modelready_Diag_features <- sort(modelready_grps_df1[,1])
modelready_Proc_features <- sort(modelready_grps_df2[,1])
modelready_Drug_features <- sort(modelready_grps_df3[,1])
modelready_Drug_features
modelready_Drug_features <- sort(modelready_Drug_features)
modelready_Drug_features
modelready_grps_df1 <- read.xlsx(paste0(data_dir3,"Selected_CCSDiag_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df2 <- read.xlsx(paste0(data_dir3,"Selected_CCSProc_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df3 <- read.xlsx(paste0(data_dir3,"Selected_VAL2ndDrug_Unique_Grps.xlsx"),sheet = 1)
modelready_Diag_features <- sort(modelready_grps_df1[,1])
modelready_Proc_features <- sort(modelready_grps_df2[,1])
modelready_grps_df3[,1]
sort(modelready_grps_df3[,1])
curr_id <- 21849
curr_file1 <- paste0("ID",curr_id,"_Month_CCS_DIAG_Feature.xlsx")
curr_file2 <- paste0("ID",curr_id,"_Month_CCS_PROC_Feature.xlsx")
curr_file3 <- paste0("ID",curr_id,"_Month_VAL_2ND_Feature.xlsx")
#old per month groups df
old_perMonth_df1 <- read.xlsx(paste0(data_dir_diag,curr_file1),sheet = 1)
old_perMonth_df2 <- read.xlsx(paste0(data_dir_proc,curr_file2),sheet = 1)
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir_diag  <- paste0(proj_dir, "10B_CCSDiagFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir_proc  <- paste0(proj_dir, "10C_CCSProcFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir_drug  <- paste0(proj_dir, "10F_VAL2NDFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
#old per month groups df
old_perMonth_df1 <- read.xlsx(paste0(data_dir_diag,curr_file1),sheet = 1)
data_dir_diag
old_perMonth_df3 <- read.xlsx(paste0(data_dir_drug,curr_file3),sheet = 1)
View(old_perMonth_df3)
View(modelready_grps_df3)
sort(colnames(old_perMonth_df3))
modelready_Drug_features[1:10]
sort(colnames(old_perMonth_df3))[1:10]
which(colnames(old_perMonth_df3) %in% old_perMonth_df3)
which(colnames(old_perMonth_df3) %in% modelready_Drug_features)
which(!colnames(old_perMonth_df3) %in% modelready_Drug_features)
colnames(old_perMonth_df3)[which(!colnames(old_perMonth_df3) %in% modelready_Drug_features)]
check_df <- data.frame(modelready_Drug_features)
View(check_df)
modelready_grps_df1 <- read.xlsx(paste0(data_dir3,"Selected_CCSDiag_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df2 <- read.xlsx(paste0(data_dir3,"Selected_CCSProc_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df3 <- read.xlsx(paste0(data_dir3,"Selected_VAL2ndDrug_Unique_Grps.xlsx"),sheet = 1)
modelready_Diag_features <- sort(modelready_grps_df1[,1])
modelready_Proc_features <- sort(modelready_grps_df2[,1])
#'@NIMPORTANT #fix the issue of colume names conversion replace space with "." when read xlsx
modelready_Drug_features <- gsub(" ",".",sort(modelready_grps_df3[,1]))
modelready_Drug_features <- sort(modelready_Drug_features)
check_df <- data.frame(modelready_Drug_features)
colnames(old_perMonth_df3)[which(!colnames(old_perMonth_df3) %in% modelready_Drug_features)]
old_perMonth_df3 <- read.xlsx(paste0(data_dir_drug,curr_file3),sheet = 1,check.names)
old_perMonth_df3 <- read.xlsx(paste0(data_dir_drug,curr_file3),sheet = 1,sep.names = " ")
colnames(old_perMonth_df3)
modelready_grps_df3 <- read.xlsx(paste0(data_dir3,"Count_VAL_2ND_Unique_Grps"),sheet = 1)
modelready_grps_df3 <- read.xlsx(paste0("Count_VAL_2ND_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df3 <- read.xlsx(paste0("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/10G_Counts_UniqueGrp_PtsLevel/WithPossibleMonthsHasNoCodes/Count_VAL_2ND_Unique_Grps.xlsx"),sheet = 1)
modelready_Diag_features <- sort(modelready_grps_df1[,1])
modelready_Proc_features <- sort(modelready_grps_df2[,1])
modelready_Drug_features <- sort(modelready_grps_df3[,1])
length(modelready_Drug_features)
which(!colnames(old_perMonth_df3) %in% 258)
which(!colnames(old_perMonth_df3) %in% modelready_Drug_features)
colnames(old_perMonth_df3)[which(!colnames(old_perMonth_df3) %in% modelready_Drug_features)]
130+61+62
253*3
253*$
253*4
1012+58
22+1012
source("Recapse_Ultility.R")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir  <- paste0(proj_dir, "11E_AllPTs_ModelReadyData/WithPossibleMonthsHasNoCodes/")
data_dir2  <- paste0(proj_dir, "11F_TrainTestIDs/")
data_dir3 <- paste0(proj_dir, "0_Codes/Grouped_CleanUniqueCodes/")
newout <- "12A_PCA_TSNE_Analysis/WithPossibleMonthsHasNoCodes/"
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
########################################################################################################
#1. Load all pts model data
########################################################################################################
load(file = paste0(data_dir, "All_PTS_ModelReadyData.rda"))
########################################################################################################
#3.Updated model data for train data only
########################################################################################################
model_data <- model_data[model_data[,"study_id"] %in% train_ID_df[,"study_id"],]
########################################################################################################
#2. Load train patient IDs
########################################################################################################
train_ID_df <- read.xlsx(paste0(data_dir2,"train_ID_withLabel.xlsx"),sheet = 1)
train_ID_df$study_id <- paste0("ID",train_ID_df$study_id)
########################################################################################################
#3.Updated model data for train data only
########################################################################################################
model_data <- model_data[model_data[,"study_id"] %in% train_ID_df[,"study_id"],]
table(model_data$y_PRE_OR_POST_2ndEvent) #966866  32251
####################################################################################################
#Run PCA to get most contributions of features (non catogorical features)
####################################################################################################
#Get PCA data
char_features_toinclude <- c("Enrolled_year","Age","months_since_dx","reg_age_at_dx")
code_features_toinclude <- colnames(model_data)[which(grepl("CCS|DM3",colnames(model_data)))] #Code count feature and 3 transforamtion feature
PCA_df <- model_data[,c(char_features_toinclude,code_features_toinclude)]
rownames(PCA_df) <- model_data$sample_id
#Exclude features that is the same for all samples
to_remove_f_idxes <- NA
ct <- 1
for (j in 1:ncol(PCA_df)){
if (min(PCA_df[,j]) == max(PCA_df[,j])){
to_remove_f_idxes[ct] <- j
ct <- ct+1
}
}
feature_removed <- data.frame(colnames(PCA_df)[to_remove_f_idxes])
#remove features
PCA_df <- PCA_df[,-to_remove_f_idxes]
to_remove_f_idxes
feature_removed
View(feature_removed)
to_remove_f_idxes
ncol(PCA_df)
colnames(model_data)
colnames(model_data)[1000]
colnames(model_data)[800]
