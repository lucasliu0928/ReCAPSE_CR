geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = 1)
p
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 500)
print(p)
dev.off()
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -1)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -0.1)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -0.1,color = "red")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -0.1,color = "darkblue")
p
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 500)
print(p)
dev.off()
library(ontologyIndex)
ghpo_dat<- get_ontology("/Users/lucasliu/Desktop/hp2.obo.txt",extract_tags = "everything")
library(ontologyIndex)
ghpo_dat<- get_ontology("/Users/lucasliu/Desktop/hp2.obo.txt",extract_tags = "everything")
ghpo_dat$children[1]
descendant_of_Pheno_abnorm <- get_descendants(ghpo_dat,"HP:0001919") #AKI
descendant_of_AKI<- get_descendants(ghpo_dat,"HP:0001919") #AKI
length(descendant_of_AKI) # 15560
descendant_of_AKI
get_descendants(ghpo_dat, "HP:0001919", exclude_roots = FALSE)
descendant_of_AKI<- get_descendants(ghpo_dat,"HP:0001873") #AKI
length(descendant_of_AKI) # 15560
descendant_of_AKI
descendant_of_AKI<- get_descendants(ghpo_dat,"HP:0001919") #AKI
descendant_of_AKI
get_ancestors(ghpo_dat, "HP:0001919", exclude_roots = FALSE)
get_ancestors(ghpo_dat, "HP:0001919")
r = 0.8 # correlation coefficient
sigma = matrix(c(1,r,r,1), ncol=2)
View(sigma)
s = chol(sigma)
View(s)
n = 10000
z = s%*%matrix(rnorm(n*2), nrow=2)
u = pnorm(z)
View(u)
age = qgamma(u[1,], 15, 0.5)
age_bracket = cut(age, breaks = seq(0,max(age), by=5))
success = u[2,]>0.4
round(prop.table(table(age_bracket, success)),2)
plot(density(age[!success]), main="Age by Success", xlab="age")
lines(density(age[success]), lty=2)
legend('topright', c("Failure", "Success"), lty=c(1,2))
library(ggplot2)
library(dplyr)
library(tidyr)
library(faux)
install.packages("faux")
library(faux)
dat <- rnorm_multi(varnames = "A") %>%
mutate(B = rnorm_pre(A, mu = 10, sd = 2, r = 0.5))
View(dat)
dat$C <- rnorm_pre(dat$A, mu = 10, sd = 2, r = 0.5, empirical = TRUE)
View(dat)
rnorm_multi
set.seed(123)
sample(c(0,1), replace=TRUE, size=n)
sample(c(0,1), replace=TRUE, size=100)
domain_labels <- sample(c(0,1),replace = TRUE, size= 100)
domain_labels <- sample(c(0,1),replace = TRUE, size= 100)
domain_labels
transf_a <- NA
rand(1)
runif(1)
runif(1,0,0.5)
transf_a <- NA
for (i in length(domain_labels)){
if (domain_labels[i] == 0){
transf_a[i] <- runif(1,0,0.5)
}else{
transf_a[i] <- runif(1,0.5,1)
}
}
transf_a
transf_a <- NA
for (i in 1: length(domain_labels)){
if (domain_labels[i] == 0){
transf_a[i] <- runif(1,0,0.5)
}else{
transf_a[i] <- runif(1,0.5,1)
}
}
transf_a
transf_a <- NA
for (i in 1: length(domain_labels)){
if (domain_labels[i] == 0){
transf_a[i] <- runif(1,0,0.499999)
}else{
transf_a[i] <- runif(1,0.5,1)
}
}
check_df <- rbind(domain_labels,transf_a)
View(check_df)
check_df <- cbind(domain_labels,transf_a)
View(check_df)
cor(domain_labels,transf_a)
summary(glm(domain_labels~transf_a,data=check_df,family=binomial))
check_df <- data.frame(cbind(domain_labels,transf_a))
cor(domain_labels,transf_a)
summary(glm(domain_labels~transf_a,data=check_df,family=binomial))
View(check_df)
check_df <- data.frame(cbind(as.factor(domain_labels),transf_a))
summary(glm(domain_labels~transf_a,data=check_df,family=binomial))
cor(domain_labels,transf_a)
domain_labels
check_df$V1
check_df <- data.frame(cbind(as.factor(domain_labels)-1,transf_a))
check_df <- data.frame(cbind(as.factor(domain_labels),transf_a))
cor(domain_labels,transf_a)
summary(glm(domain_labels~transf_a,data=check_df,family=binomial))
transf_a
min(transf_a)
max(transf_a)
summary(glm(domain_labels~transf_a,data=check_df,family=binomial))
check_df
summary(glm(V1~transf_a,data=check_df,family=binomial))
domain_labels
as.factor(domain_labels)
check_df <- data.frame(cbind(as.factor(domain_labels),transf_a))
View(check_df)
check_df <- data.frame(Label = domain_labels)
check_df <- data.frame(Label = domain_labels, trans_f_a = transf_a )
cor(domain_labels,transf_a)
View(check_df)
summary(glm(Label~trans_f_a,data=check_df,family=binomial))
colnames(check_df)
check_df <- data.frame(Label = as.factor(domain_labels), trans_f_a = transf_a )
check_df <- data.frame(Label = as.factor(domain_labels), trans_f_a = transf_a )
check_df$Label
summary(glm(Label~trans_f_a,data=check_df,family=binomial))
check_df
check_df <- data.frame(Label = as.factor(domain_labels), var = transf_a )
cor(domain_labels,transf_a)
summary(glm(Label~trans_f_a,data=check_df,family=binomial))
summary(glm(Label~var,data=check_df,family=binomial))
check_df <- data.frame(Label = as.factor(domain_labels), var = round(transf_a,3) )
cor(domain_labels,transf_a)
summary(glm(Label~var,data=check_df,family=binomial))
check_df <- data.frame(Label = as.factor(domain_labels), var = round(transf_a,3)*10 )
cor(domain_labels,transf_a)
summary(glm(Label~var,data=check_df,family=binomial))
plot(check_df$var,check_df$Label)
cor.test( domain_labels,transf_a)
cor(domain_labels,transf_a)
summary(glm(Label~var,data=check_df,family=binomial))
View(check_df)
exp(407.6 )
exp(407.6)
summary(glm(Label~var,data=check_df,family=binomial))
check_df <- data.frame(Label = as.factor(domain_labels), var = round(transf_a,3)*10+30 )
cor.test( domain_labels,transf_a)
summary(glm(Label~var,data=check_df,family=binomial))
plot(check_df$var,check_df$Label)
exp(407.6)
check_df <- data.frame(Label = as.factor(domain_labels), var = transf_a)
cor.test( domain_labels,transf_a)
summary(glm(Label~var,data=check_df,family=binomial))
plot(check_df$var,check_df$Label)
exp(407.6)
proj_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/UK_Data/Extracted_data/All_TimeInfo/"
time_df <- read.csv(paste0(proj_dir, "Final_Corrected/Corrected_HOSPICURRT_DOD_DCDISP_Time_InFo.csv"))
ESRD_df <- read.csv(paste0(proj_dir, "ALL_ESRDS/EHR_ESRD_STATUS_Filtered.csv"))
proj_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/UK_Data/Extracted_data/All_TimeInfo/"
time_df <- read.csv(paste0(proj_dir, "Final_Corrected/Corrected_HOSPICURRT_DOD_DCDISP_Time_InFo.csv"))
ESRD_df <- read.csv(paste0(proj_dir, "ALL_ESRDS/EHR_ESRD_STATUS_Filtered.csv"))
time_df <- read.csv(paste0(proj_dir, "All_TimeInfo/Final_Corrected/Corrected_HOSPICURRT_DOD_DCDISP_Time_InFo.csv"))
proj_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/UK_Data/Extracted_data/"
time_df <- read.csv(paste0(proj_dir, "All_TimeInfo/Final_Corrected/Corrected_HOSPICURRT_DOD_DCDISP_Time_InFo.csv"))
ESRD_df <- read.csv(paste0(proj_dir, "ALL_ESRDS/EHR_ESRD_STATUS_Filtered.csv"))
KT_Df <- read.csv(paste0(proj_dir, "All_Kidney_Transplant/KidneyTrans_BEFOREorDURING_filtered.csv"))
View(KT_Df)
KT_Df <- read.csv(paste0(proj_dir, "All_Kidney_Transplant/KidneyTrans_BEFOREorDURING_filtered.csv"))
View(KT_Df)
proj_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/UK_Data/Extracted_data/"
time_df <- read.csv(paste0(proj_dir, "All_TimeInfo/Final_Corrected/Corrected_HOSPICURRT_DOD_DCDISP_Time_InFo.csv"))
ESRD_df <- read.csv(paste0(proj_dir, "ALL_ESRDS/EHR_ESRD_STATUS_Filtered.csv"))
KT_Df <- read.csv(paste0(proj_dir, "All_Kidney_Transplant/KidneyTrans_BEFOREorDURING_filtered.csv"))
esrd_ids <- which(ESRD_df$BEFOREorAT_INDEXED_INDICATOR == 1)
ESRD_IDs <- ESRD_df[which(ESRD_df$BEFOREorAT_INDEXED_INDICATOR == 1),"ENCNTR_ID"]
length(ESRD_IDs)
KT_IDs <- KT_Df[which(KT_Df$KT_Comb_BEFOREorDURING == 1),"ENCNTR_ID"]
length(KT_IDs)
#exclude EHR ESRD and KT
which(time_df$ENCNTR_ID %in% c(ESRD_IDs,KT_IDs))
c(ESRD_IDs,KT_IDs)
time_df$ENCNTR_ID
ESRD_IDs <- paste0("X", ESRD_IDs)
KT_IDs <- paste0("X", KT_IDs)
#exclude EHR ESRD and KT
which(time_df$ENCNTR_ID %in% c(ESRD_IDs,KT_IDs))
ESRD_IDs
proj_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/UK_Data/Extracted_data/"
time_df <- read.csv(paste0(proj_dir, "All_TimeInfo/Final_Corrected/Corrected_HOSPICURRT_DOD_DCDISP_Time_InFo.csv"))
ESRD_df <- read.csv(paste0(proj_dir, "ALL_ESRDS/EHR_ESRD_STATUS_Filtered.csv"))
ESRD_IDs <- ESRD_df[which(ESRD_df$BEFOREorAT_INDEXED_INDICATOR == 1),"ENCNTR_ID"]
KT_Df <- read.csv(paste0(proj_dir, "All_Kidney_Transplant/KidneyTrans_BEFOREorDURING_filtered.csv"))
KT_IDs <- KT_Df[which(KT_Df$KT_Comb_BEFOREorDURING == 1),"ENCNTR_ID"]
KT_IDs
ESRD_IDs
ESRD_df <- read.csv(paste0(proj_dir, "ALL_ESRDS/EHR_ESRD_STATUS_Filtered.csv"),stringsAsFactors = F)
time_df <- read.csv(paste0(proj_dir, "All_TimeInfo/Final_Corrected/Corrected_HOSPICURRT_DOD_DCDISP_Time_InFo.csv"),stringsAsFactors = F)
proj_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/UK_Data/Extracted_data/"
time_df <- read.csv(paste0(proj_dir, "All_TimeInfo/Final_Corrected/Corrected_HOSPICURRT_DOD_DCDISP_Time_InFo.csv"),stringsAsFactors = F)
ESRD_df <- read.csv(paste0(proj_dir, "ALL_ESRDS/EHR_ESRD_STATUS_Filtered.csv"),stringsAsFactors = F)
ESRD_IDs <- ESRD_df[which(ESRD_df$BEFOREorAT_INDEXED_INDICATOR == 1),"ENCNTR_ID"]
KT_Df <- read.csv(paste0(proj_dir, "All_Kidney_Transplant/KidneyTrans_BEFOREorDURING_filtered.csv"),stringsAsFactors = F)
KT_IDs <- KT_Df[which(KT_Df$KT_Comb_BEFOREorDURING == 1),"ENCNTR_ID"]
ESRD_IDs
exclusion_IDs <- unique(c(ESRD_IDs,KT_IDs))
#exclude EHR ESRD and KT
which(time_df$ENCNTR_ID %in% exclusion_IDs))
#exclude EHR ESRD and KT
which(time_df$ENCNTR_ID %in% exclusion_IDs)
#exclude EHR ESRD and KT
time_df_filtered <- time_df[which(time_df$ENCNTR_ID %in% exclusion_IDs),]
source("~/Desktop/Compute_AKID_incidence.R")
table(time_df_updated$onCRRT_ONLY)
table(time_df_updated$onHD_ONLY)
table(time_df_updated$onBothCRRTHD)
KDIGO_df <- read.csv(paste0(proj_dir,"Computed_Variables/KDIGO/KDIGO_ICUD0toEND_UsingImputedScrByResolveEPI.csv"), stringsAsFactors = F)
#Merge KDIGO3 and 4
idxes <- which(KDIGO_df[,"MAX_KDIGO_inICU"] == 4)
KDIGO_df[idxes,"MAX_KDIGO_inICU"] <- 3
table(KDIGO_df$MAX_KDIGO_inICU)
KDIGO_updated <- KDIGO_df[-which(KDIGO_df$ENCNTR_ID %in% exclusion_IDs),] #30454
table(KDIGO_updated$MAX_KDIGO_inICU)
AKI_patients <- KDIGO_updated$ENCNTR_ID[which(KDIGO_updated$MAX_KDIGO_inICU >=1)]
length(AKI_patients)
4485 + 2278 + 2795
time_df_updated <- time_df[which(time_df$ENCNTR_ID %in% AKI_patients),] #30454
table(time_df_updated$onCRRT_ONLY)
table(time_df_updated$onCRRT_ONLY)
table(time_df_updated$onHD_ONLY)
table(time_df_updated$onBothCRRTHD)
table(time_df_updated$onCRRT_ONLY)
table(time_df_updated$onHD_ONLY)
table(time_df_updated$onBothCRRTHD)
309 + 378+124
309+378+124
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/19_SHAP.R")
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/19_SHAP.R")
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/19_SHAP.R")
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/19_SHAP.R")
################################################################################
#SHAP for Train
################################################################################
shap_input_df <- as.matrix(train_data_part)
shap_input_df <- change_feautre_name(shap_input_df,ccs_all_df)
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = shap_input_df)
shap_input_df <- as.matrix(change_feautre_name(shap_input_df,ccs_all_df))
shap_input_df <- change_feautre_name(shap_input_df,ccs_all_df)
################################################################################
#SHAP for Train
################################################################################
shap_input_df <- as.matrix(train_data_part)
shap_input_df <- change_feautre_name(shap_input_df,ccs_all_df)
shap_input_df
source("Recapse_Ultility.R")
library("SHAPforxgboost")
library("ggplot2")
library("xgboost")
library("data.table")
library("here")
#Change feature name to the actual group name
change_feautre_name <- function(indata,ccs_disp_df){
#Change all VAL_2ND to GPI2ND
colnames(indata) <- gsub("VAL_2ND","GPI2ND",colnames(indata))
#Change all cumul_ratio/time_since/time_until
colnames(indata) <- gsub("cumul_ratio_","(Cumulative Ratio)",colnames(indata))
colnames(indata) <- gsub("time_since_", "(Time Since)",colnames(indata))
colnames(indata) <- gsub("time_until_", "(Time Until)",colnames(indata))
#Find the discription of CCS codes
updated_names <- NA
for (i in 1:length(colnames(indata))){
cur_f <-  colnames(indata)[i]
if (grepl("(",cur_f,fixed = T) == T){
cur_transf_type <- paste0(strsplit(cur_f, ')')[[1]][1],")")
cur_f <- strsplit(cur_f, ')')[[1]][2]
curr_code_type <- paste0(strsplit(cur_f,"_")[[1]][1:2],collapse = "_")
if (grepl("CCS",curr_code_type)== T){
curr_disp <- ccs_disp_df[which(ccs_disp_df[,"Code_Grp"] == cur_f),"Grp_Discrip"]
}else{
curr_disp <- NA
}
cur_new_name <- paste0(curr_disp,"[",curr_code_type,"]", cur_transf_type)
}else if (grepl("GPI|DM3", cur_f) == T){
cur_transf_type <- paste0(strsplit(cur_f, ')')[[1]][1],")")
curr_code_type <- strsplit(strsplit(cur_f,"_")[[1]][1],")")[[1]][2]
curr_disp <- strsplit(cur_f,"_")[[1]][2]
cur_new_name <- paste0(curr_disp,"[",curr_code_type,"]", cur_transf_type)
}else{
cur_new_name <- cur_f
}
updated_names[i] <- cur_new_name
}
colnames(indata) <- updated_names
return(indata)
}
################################################################################
#SHAP for Train
################################################################################
shap_input_df <- as.matrix(train_data_part)
shap_input_df <- change_feautre_name(shap_input_df,ccs_all_df)
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = shap_input_df)
# The ranked features by mean |SHAP|
shap_values$mean_shap_score
#Plot
p <- shap.plot.summary.wrap1(model = mod_optimal, X = shap_input_df,top_n = 10)
outfile_name <- paste0(outdir, ds_out,"SHAP_train.png")
png(outfile_name,width = 1000,height = 500,res=100)
print(p)
dev.off()
indata <- shap_input_df
ccs_disp_df <- ccs_all_df
#Change all VAL_2ND to GPI2ND
colnames(indata) <- gsub("VAL_2ND","GPI2ND",colnames(indata))
#Change all cumul_ratio/time_since/time_until
colnames(indata) <- gsub("cumul_ratio_","(Cumulative Ratio)",colnames(indata))
colnames(indata) <- gsub("time_since_", "(Time Since)",colnames(indata))
colnames(indata) <- gsub("time_until_", "(Time Until)",colnames(indata))
#Find the discription of CCS codes
updated_names <- NA
i <- 4
cur_f <-  colnames(indata)[i]
cur_f
colnames(indata)
################################################################################
#SHAP for Train
################################################################################
shap_input_df <- as.matrix(train_data_part)
indata <- shap_input_df
ccs_disp_df <- ccs_all_df
#Change all VAL_2ND to GPI2ND
colnames(indata) <- gsub("VAL_2ND","GPI2ND",colnames(indata))
#Change all cumul_ratio/time_since/time_until
colnames(indata) <- gsub("cumul_ratio_","(Cumulative Ratio)",colnames(indata))
colnames(indata) <- gsub("time_since_", "(Time Since)",colnames(indata))
colnames(indata) <- gsub("time_until_", "(Time Until)",colnames(indata))
colnames(indata)
i <- 5
cur_f <-  colnames(indata)[i]
cur_f
cur_transf_type <- paste0(strsplit(cur_f, ')')[[1]][1],")")
cur_transf_type
curr_code_type <- strsplit(strsplit(cur_f,"_")[[1]][1],")")[[1]][2]
curr_code_type
curr_disp <- strsplit(cur_f,"_")[[1]][2]
curr_disp
cur_new_name <- paste0(curr_disp,"[",curr_code_type,"]", cur_transf_type)
cur_new_name
#Find the discription of CCS codes
updated_names <- NA
for (i in 1:length(colnames(indata))){
cur_f <-  colnames(indata)[i]
if (grepl("(",cur_f,fixed = T) == T & grepl("GPI|DM3", cur_f) == F){
cur_transf_type <- paste0(strsplit(cur_f, ')')[[1]][1],")")
cur_f <- strsplit(cur_f, ')')[[1]][2]
curr_code_type <- paste0(strsplit(cur_f,"_")[[1]][1:2],collapse = "_")
if (grepl("CCS",curr_code_type)== T){
curr_disp <- ccs_disp_df[which(ccs_disp_df[,"Code_Grp"] == cur_f),"Grp_Discrip"]
}else{
curr_disp <- NA
}
cur_new_name <- paste0(curr_disp,"[",curr_code_type,"]", cur_transf_type)
}else if (grepl("GPI|DM3", cur_f) == T){
cur_transf_type <- paste0(strsplit(cur_f, ')')[[1]][1],")")
curr_code_type <- strsplit(strsplit(cur_f,"_")[[1]][1],")")[[1]][2]
curr_disp <- strsplit(cur_f,"_")[[1]][2]
cur_new_name <- paste0(curr_disp,"[",curr_code_type,"]", cur_transf_type)
}else{
cur_new_name <- cur_f
}
updated_names[i] <- cur_new_name
}
updated_names
#Change feature name to the actual group name
change_feautre_name <- function(indata,ccs_disp_df){
# indata <- shap_input_df
# ccs_disp_df <- ccs_all_df
#
#Change all VAL_2ND to GPI2ND
colnames(indata) <- gsub("VAL_2ND","GPI2ND",colnames(indata))
#Change all cumul_ratio/time_since/time_until
colnames(indata) <- gsub("cumul_ratio_","(Cumulative Ratio)",colnames(indata))
colnames(indata) <- gsub("time_since_", "(Time Since)",colnames(indata))
colnames(indata) <- gsub("time_until_", "(Time Until)",colnames(indata))
#Find the discription of CCS codes
updated_names <- NA
for (i in 1:length(colnames(indata))){
cur_f <-  colnames(indata)[i]
if (grepl("(",cur_f,fixed = T) == T & grepl("GPI|DM3", cur_f) == F){
cur_transf_type <- paste0(strsplit(cur_f, ')')[[1]][1],")")
cur_f <- strsplit(cur_f, ')')[[1]][2]
curr_code_type <- paste0(strsplit(cur_f,"_")[[1]][1:2],collapse = "_")
if (grepl("CCS",curr_code_type)== T){
curr_disp <- ccs_disp_df[which(ccs_disp_df[,"Code_Grp"] == cur_f),"Grp_Discrip"]
}else{
curr_disp <- NA
}
cur_new_name <- paste0(curr_disp,"[",curr_code_type,"]", cur_transf_type)
}else if (grepl("GPI|DM3", cur_f) == T){
cur_transf_type <- paste0(strsplit(cur_f, ')')[[1]][1],")")
curr_code_type <- strsplit(strsplit(cur_f,"_")[[1]][1],")")[[1]][2]
curr_disp <- strsplit(cur_f,"_")[[1]][2]
cur_new_name <- paste0(curr_disp,"[",curr_code_type,"]", cur_transf_type)
}else{
cur_new_name <- cur_f
}
updated_names[i] <- cur_new_name
}
colnames(indata) <- updated_names
return(indata)
}
shap_input_df <- as.matrix(train_data_part)
shap_input_df <- change_feautre_name(shap_input_df,ccs_all_df)
# To return the SHAP values and ranked features by mean|SHAP|
shap_values <- shap.values(xgb_model = mod_optimal, X_train = shap_input_df)
# The ranked features by mean |SHAP|
shap_values$mean_shap_score
#Plot
p <- shap.plot.summary.wrap1(model = mod_optimal, X = shap_input_df,top_n = 10)
outfile_name <- paste0(outdir, ds_out,"SHAP_train.png")
png(outfile_name,width = 1000,height = 500,res=100)
print(p)
dev.off()
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/19_SHAP.R")
#################################################################
#Patient Level Combine all performance table
#################################################################
model_list <- c("Hybrid","AI","HybridCurveFit","AICurveFit")
method_list <- c("BinSeg","OneMonth_GT_Threshold","Persis3Month_GT_Threshold")
for (model in model_list){
print(model)
}
