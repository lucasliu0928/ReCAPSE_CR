grp2_dxes <- which(TransE_Vector["Grps"] == "Meta") #15
grp3_dxes <- which(TransE_Vector["Grps"] == "Blood") #4
grp4_dxes <- which(TransE_Vector["Grps"] == "Resp")  #3
View(TransE_Vector)
TransE_Vector_grp1 <- TransE_Vector[grp1_dxes,]
TransE_Vector_grp2 <- TransE_Vector[grp2_dxes,]
TransE_Vector_grp3 <- TransE_Vector[grp3_dxes,]
TransE_Vector_grp4 <- TransE_Vector[grp4_dxes,]
#Drop names and grp names
names_todrop <- c("X","HPO_name","Grps")
TransE_Vector_grp1 <- TransE_Vector_grp1[, -which(colnames(TransE_Vector_grp1) %in% names_todrop)]
TransE_Vector_grp2 <- TransE_Vector_grp2[, -which(colnames(TransE_Vector_grp2) %in% names_todrop)]
TransE_Vector_grp3 <- TransE_Vector_grp3[, -which(colnames(TransE_Vector_grp3) %in% names_todrop)]
TransE_Vector_grp4 <- TransE_Vector_grp4[, -which(colnames(TransE_Vector_grp4) %in% names_todrop)]
#Sum for  each group
TransE_Vector_sum_grp1 <- colSums(TransE_Vector_grp1)
TransE_Vector_sum_grp1
View(TransE_Vector_grp1)
TransE_Vector_grp3
TransE_Vector_grp4
TransE_Vector_grp1
TransE_Vector_grp2
nrow(TransE_Vector_grp2)
mean(c(missing_perc_MIMIC3_2)) #34.6%
#####UK Final IDs
UK_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project/Intermediate_data_Dynamic/2021_Data/0320_21_data/DL_input_data/onRRT/Hourly_interp/"
UK_Data <- read.csv(paste0(UK_data_dir , "Final_Outcome_df.csv"),stringsAsFactors = F)
UK_Final_IDs <- unique(sapply(strsplit(UK_Data$ENCNTR_ID,split = "_"), "[[", 1))
UK_Final_IDs
#### Load UK raw dynamic RRT
UK_onRRT_raw_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project/Intermediate_data_Dynamic/2021_Data/0320_21_data/Original_Sample_Data/onRRT/onRRT_raw/"
UK_files <- list.files(UK_onRRT_raw_dir)
UK_files_for_FinalIDs <- UK_files[which(gsub("onRRT_raw.csv","",UK_files) %in%  UK_Final_IDs== T)]
UK_rawdata <- do.call(rbind,lapply(paste0(UK_onRRT_raw_dir,UK_files_for_FinalIDs), read.csv))
#This was excluded
UK_rawdata <- UK_rawdata[,-which(colnames(UK_rawdata) %in% c("onRRT","Record_Time","FIO2","PH","PO2","onMV"))]
#####Load static data MIMIC3
UK_static_data <- read.csv(paste0(UK_data_dir,"final_demo_df.csv"),stringsAsFactors = F)
UK_static_data <- UK_static_data[,-1]
UK_static_data$ENCNTR_ID <- sapply(strsplit(UK_static_data$ENCNTR_ID,split = "_"), "[[", 1)
UK_static_data <- UK_static_data[!duplicated(UK_static_data$ENCNTR_ID),]
UK_static_data <- UK_static_data[,-which(colnames(UK_static_data) %in% c("ENCNTR_ID"))]
#Missing Rate for static
missing_count_n_UK_1 <- sapply(UK_static_data, function(x) sum(is.na(x)))
missing_perc_UK_1 <- round(missing_count_n_UK_1/nrow(UK_static_data),2)
missing_perc_UK_1
###Missing Rate for dynamic
missing_count_n_UK_2 <- sapply(UK_rawdata, function(x) sum(is.na(x)))
missing_perc_UK_2 <- round(missing_count_n_UK_2/nrow(UK_rawdata),2)
missing_perc_UK_2
length(c(missing_perc_UK_1,missing_perc_UK_2)) #21 features
mean(c(missing_perc_UK_1,missing_perc_UK_2)) #43.5%
mean(c(missing_perc_UK_2))
#MIMICs Final IDs
MIMIC3_dir <- "/Volumes/LJL_ExtPro/Data/MIMIC3/Extract_Data_AKID_Patients/Model_Data/MIMIC3_DL_input_data/onRRT/Hourly_interp/Filtered_FeatureFiles/"
MIMIC3_Data <- read.csv(paste0(MIMIC3_dir , "Final_Outcome_df.csv"),stringsAsFactors = F)
MIMIC3_IDs <- unique(sapply(strsplit(MIMIC3_Data$SUBJECT_ID,split = "_"), "[[", 1))
#### Load MIMIC 3 raw RRT
MIMIC3_onRRT_raw_dir <- "/Volumes/LJL_ExtPro/Data/MIMIC3/Extract_Data_AKID_Patients/Model_Data/Original_Sample_Data/onRRT/onRRT_raw/"
MIMIC3_files <- list.files(MIMIC3_onRRT_raw_dir)
MIMIC3_files_for_FinalIDs <- MIMIC3_files[which(gsub("onRRT_raw.csv","",MIMIC3_files) %in%  MIMIC3_IDs== T)]
MIMIC3_rawdata <- do.call(rbind,lapply(paste0(MIMIC3_onRRT_raw_dir,MIMIC3_files_for_FinalIDs), read.csv))
#exclude the 2 features that is not included
MIMIC3_rawdata <- MIMIC3_rawdata[,-which(colnames(MIMIC3_rawdata) %in% c("Temp","WBC","onRRT","Record_Time"))]
#####Load static data MIMIC3
MIMIC3_static_data <- read.csv(paste0(MIMIC3_dir,"final_demo_df.csv"),stringsAsFactors = F)
MIMIC3_static_data$SUBJECT_ID <- sapply(strsplit(MIMIC3_static_data$SUBJECT_ID,split = "_"), "[[", 1)
MIMIC3_static_data <- MIMIC3_static_data[!duplicated(MIMIC3_static_data$SUBJECT_ID),]
MIMIC3_static_data <- MIMIC3_static_data[,-which(colnames(MIMIC3_static_data) %in% c("SUBJECT_ID"))]
#Missing Rate for static
missing_count_n_MIMIC3_1 <- sapply(MIMIC3_static_data, function(x) sum(is.na(x)))
missing_perc_MIMIC3_1 <- round(missing_count_n_MIMIC3_1/nrow(MIMIC3_static_data),2)
missing_perc_MIMIC3_1
###Missing Rate for dynamic
missing_count_n_MIMIC3_2 <- sapply(MIMIC3_rawdata, function(x) sum(is.na(x)))
missing_perc_MIMIC3_2 <- round(missing_count_n_MIMIC3_2/nrow(MIMIC3_rawdata),2)
missing_perc_MIMIC3_2
length(c(missing_perc_MIMIC3_1,missing_perc_MIMIC3_2)) #19 features
mean(c(missing_perc_MIMIC3_1,missing_perc_MIMIC3_2)) #34.6%
mean(c(missing_perc_MIMIC3_2))
#Dertmine if ESRD before or AT HOSPITAL
#1. Source 1: ESRD_USRDS.csv (Gold dataset, if not in USRD, use ESRD_STATUS.csv, then manual check
#2. Source 2: ESRD_STATUS.csv
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Analysis Id before exclusion of ESRD
##########################################################################################
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID_BeforeExclusionOfESRD.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#2. Load data
##########################################################################################
#1. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#2. source 1: USRDS_ESRD
USRDS_ESRD_df <-read.csv(paste0(raw_dir,"USRDS_ESRD.csv"),stringsAsFactors = F)
USRDS_ESRD_df <- USRDS_ESRD_df[-which(USRDS_ESRD_df$ESRD_DATE==""),] #remove blanks
#reformat
USRDS_ESRD_df$ESRD_DATE <- gsub("00:00:00","",USRDS_ESRD_df$ESRD_DATE)
USRDS_ESRD_df$ESRD_DATE <- gsub("0:00","",USRDS_ESRD_df$ESRD_DATE)
dash_idxes <- which(grepl("-",USRDS_ESRD_df$ESRD_DATE) == T)
USRDS_ESRD_df$ESRD_DATE[dash_idxes] <- as.character(ymd(USRDS_ESRD_df$ESRD_DATE[dash_idxes]))
slash_idxes <- which(grepl("/",USRDS_ESRD_df$ESRD_DATE) == T)
USRDS_ESRD_df$ESRD_DATE[slash_idxes] <- as.character(mdy(USRDS_ESRD_df$ESRD_DATE[slash_idxes]))
#3. source 2
ESRD_STATUS_df <-read.csv(paste0(raw_dir,"ESRD_STATUS.csv"),stringsAsFactors = F)
ESRD_STATUS_df[which(ESRD_STATUS_df == "",arr.ind = T)] <- 0
ESRD_STATUS_df[which(ESRD_STATUS_df == "Y",arr.ind = T)] <- 1
############################################################################################################
#3. Process USRDS_ESRD.csv to get before or at
############################################################################################################
ESRD_BEFORE_AT_Indicator_df1 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_BEFORE_AT_Indicator_df1) <- c("STUDY_PATIENT_ID","BEFORE_AT_ADMISSION_USRDS","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df1[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd(strsplit(curr_time_df[,"Updated_HOSP_ADMIT_DATE"],split = " ")[[1]][1]) #only get ymd cuz esrd dates has no hms
#Source 1 USRD info
curr_usrd_df <- USRDS_ESRD_df[which(USRDS_ESRD_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_esrd_date <- ymd(curr_usrd_df$ESRD_DATE)
if (nrow(curr_usrd_df) != 0){ #if in USRDs
ESRD_BEFORE_AT_Indicator_df1[i,"SOURCE"]<- "in_USRDS"
if (curr_esrd_date <= curr_hosp_start) {
ESRD_BEFORE_AT_Indicator_df1[i,"BEFORE_AT_ADMISSION_USRDS"] <- 1
}else{
ESRD_BEFORE_AT_Indicator_df1[i,"BEFORE_AT_ADMISSION_USRDS"] <- 0
}
}else{
ESRD_BEFORE_AT_Indicator_df1[i,"SOURCE"]<- "notin_USRDS"
ESRD_BEFORE_AT_Indicator_df1[i,"BEFORE_AT_ADMISSION_USRDS"]<- 0
}
}
table(ESRD_BEFORE_AT_Indicator_df1$BEFORE_AT_ADMISSION_USRDS)
############################################################################################################
#4. Process ESRD_STATUS.csv to get before or at
############################################################################################################
ESRD_BEFORE_AT_Indicator_df2 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_BEFORE_AT_Indicator_df2) <- c("STUDY_PATIENT_ID","BEFORE_AT_ADMISSION_STATUS","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df2[i,"STUDY_PATIENT_ID"] <- curr_id
#source 2: status table
curr_ESRD_STATUS_df <- ESRD_STATUS_df[which(ESRD_STATUS_df[,"STUDY_PATIENT_ID"] == curr_id),]
if (nrow(curr_ESRD_STATUS_df) != 0){ #if in ESRD_STATUS.csv
ESRD_BEFORE_AT_Indicator_df2[i,"SOURCE"]<- "in_STATUS_TABLE"
if (curr_ESRD_STATUS_df[,"AT_ADMISSION_INDICATOR"] == 1 | curr_ESRD_STATUS_df[,"BEFORE_INDEXED_INDICATOR"] == 1) {
ESRD_BEFORE_AT_Indicator_df2[i,"BEFORE_AT_ADMISSION_STATUS"] <- 1
}else{
ESRD_BEFORE_AT_Indicator_df2[i,"BEFORE_AT_ADMISSION_STATUS"] <- 0
}
}else{
ESRD_BEFORE_AT_Indicator_df2[i,"SOURCE"]<- "notin_STATUS_TABLE"
ESRD_BEFORE_AT_Indicator_df2[i,"BEFORE_AT_ADMISSION_STATUS"]<- 0
}
}
############################################################################################################
#5.Combine Two data source to manually check if STATUS agres USRDS
############################################################################################################
ESRD_BEFORE_AT_Indicator_df_Comb <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 5))
colnames(ESRD_BEFORE_AT_Indicator_df_Comb) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT_USRDS","ESRD_BEFORE_AT_STATUS",
"SOURCE_USRDS","SOURCE_STATUS")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_USRDS"] <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"SOURCE_USRDS"] <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_STATUS"] <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"SOURCE_STATUS"] <- curr_status_tb[,"SOURCE"]
}
USRD_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_USRDS"]
STATUS_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_STATUS"]
table(USRD_BeforeAT,STATUS_BeforeAT)
############################################################################################################
#6. Final before/AT status
#USE USRDs first, then if patient not in USRDS, use status table
############################################################################################################
Final_ESRD_BEFORE_AT_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 2))
colnames(Final_ESRD_BEFORE_AT_df) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
Final_ESRD_BEFORE_AT_df[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs_flag <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
curr_status_flag <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
curr_status_source<- curr_status_tb[,"SOURCE"]
if (curr_USRDs_source == "in_USRDS"){ #as long as it is in USRDS
final_flag <- curr_USRDs_flag
}else if(curr_USRDs_source == "notin_USRDS" & curr_status_source == "in_STATUS_TABLE"){ #if not in USRDS, but in status
final_flag <- curr_status_flag
}else if (curr_USRDs_source == "notin_USRDS" & curr_status_source == "notin_STATUS_TABLE"){#if not in both, both has the same flag
final_flag <- unique(c(curr_USRDs_flag,curr_status_flag))
}else{
final_flag <- NA
}
Final_ESRD_BEFORE_AT_df[i,"ESRD_BEFORE_AT"] <- final_flag
}
table(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT) #7354  447
############################################################################################################
#6. Final before/AT status
#If == 1 in either one
############################################################################################################
Final_ESRD_BEFORE_AT_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 2))
colnames(Final_ESRD_BEFORE_AT_df) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT")
############################################################################################################
#6. Final before/AT status
#If == 1 in either one
############################################################################################################
Final_ESRD_BEFORE_AT_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 2))
colnames(Final_ESRD_BEFORE_AT_df) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
Final_ESRD_BEFORE_AT_df[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs_flag <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
curr_status_flag <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
curr_status_source<- curr_status_tb[,"SOURCE"]
if (curr_USRDs_source == 1 | curr_status_source==1){
final_flag <- 1
}else{
final_flag <- 0
}
Final_ESRD_BEFORE_AT_df[i,"ESRD_BEFORE_AT"] <- final_flag
}
############################################################################################################
#check how many status_flag=1, but usrd_flag=0, and they are actually in USRDS: 51
#so the final =1 , should equal status_yes (155-51) + USRDS_yes(48+295) = 447
############################################################################################################
table(USRD_BeforeAT,STATUS_BeforeAT)
length(which(ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_STATUS== 1 &
ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_USRDS==0 &
ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "in_USRDS" ))
table(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT) #7354  447
############################################################################################################
#6. Final before/AT status
#If == 1 in either one
############################################################################################################
Final_ESRD_BEFORE_AT_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 2))
colnames(Final_ESRD_BEFORE_AT_df) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
Final_ESRD_BEFORE_AT_df[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs_flag <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
curr_status_flag <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
curr_status_source<- curr_status_tb[,"SOURCE"]
if (curr_USRDs_source == 1 | curr_status_source==1){
final_flag <- 1
}else{
final_flag <- 0
}
Final_ESRD_BEFORE_AT_df[i,"ESRD_BEFORE_AT"] <- final_flag
}
table(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT) #7354  447
############################################################################################################
#6. Final before/AT status
#If == 1 in either one
############################################################################################################
Final_ESRD_BEFORE_AT_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 2))
colnames(Final_ESRD_BEFORE_AT_df) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
Final_ESRD_BEFORE_AT_df[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs_flag <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
curr_status_flag <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
curr_status_source<- curr_status_tb[,"SOURCE"]
if (curr_USRDs_flag == 1 | curr_status_flag==1){
final_flag <- 1
}else{
final_flag <- 0
}
Final_ESRD_BEFORE_AT_df[i,"ESRD_BEFORE_AT"] <- final_flag
}
table(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT) #7354  447
447 -498
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
which(analysis_ID %in% Final_ESRD_BEFORE_AT_df$STUDY_PATIENT_ID[which(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT == 1)])
length(which(analysis_ID %in% Final_ESRD_BEFORE_AT_df$STUDY_PATIENT_ID[which(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT == 1)]))
############################################################################################################
#check how many status_flag=1, but usrd_flag=0, and they are actually in USRDS: 51
#so the final =1 , should equal status_yes (155-51) + USRDS_yes(48+295) = 447
############################################################################################################
table(USRD_BeforeAT,STATUS_BeforeAT)
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
source("TAKI_Ultility.R")
library("shapper")
#this script use entire UK data plus down sampleing, and validation on utsw data
#Data dir
data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/Model_Feature_Outcome/"
#feature file and outcome file names
feature_file <- c("All_Feature_imputed_normed.csv")
outcome_file <- "All_outcome.csv"
#######################################################################################
######                           Mortality Prediction                      ############
#feature file: All_Feature_imputed_normed.csv
#Outcome file: All_outcome.csv
#######################################################################################
#Outcome column name
outcome_colname <- "Death_inHOSP"
#1.Get model data
train_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
selected_features <- c("UrineOutput_D0toD3" , "Vasopressor_ICUD0toD3","FI02_D1_HIGH","Platelets_D1_LOW","AGE",
"BUN_D0toD3_HIGH","HR_D1_HIGH","LAST_KDIGO_ICU_D0toD3","PH_D1_LOW","Bilirubin_D1_HIGH",
"MAX_KDIGO_ICU_D0toD3","ECMO_ICUD0toD3")
#1.Get model data
train_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
#1.Get model data
train_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
train_data <- train_data[,c(selected_features,outcome_colname)]
colnames(train_data)
table(train_data$Death_inHOSP)
#Train the entire data with no sampling method
seed_num <- 123
upsample_flag <- 3
#Get sampled data
train_data_sampled <- Data_Sampling_Func(upsample_flag,train_data,outcome_colname,seed_num)
train_data_sampled
#Outcome index
outcome_index <- which(colnames(train_data) == outcome_colname)
#Train data part
if (ncol(train_data) == 2){ ##For data has one feature column, must add as.data.frame, and rename col
train_X <- as.data.frame(train_data[,-outcome_index])
colnames(train_X) <- colnames(train_data)[1]
}else{
train_X <- train_data[,-outcome_index]
}
#Train label
train_Y <-  train_data[,outcome_index]
#train model
res <- train_models(train_data_sampled,outcome_colname,"XGB",n_tress_RF = 500,svmkernel = "svmLinear2")
curr_model <- res[[1]]
curr_importance_matrix <- res[[2]]
curr_importance_matrix$Sample_Indxes <- s
importance_matrix_list[[s]] <- curr_importance_matrix
curr_model <- res[[1]]
curr_importance_matrix <- res[[2]]
curr_importance_matrix
# Specifying the phi_0, i.e. the expected prediction without any features
p <- mean(y_train)
# Specifying the phi_0, i.e. the expected prediction without any features
p <- mean(train_Y)
p
train_Y
curr_model
source("TAKI_Ultility.R")
library("shapper")
#this script use entire UK data plus down sampleing, and validation on utsw data
#Data dir
data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/Model_Feature_Outcome/"
#feature file and outcome file names
feature_file <- c("All_Feature_imputed_normed.csv")
outcome_file <- "All_outcome.csv"
#######################################################################################
######                           Mortality Prediction                      ############
#feature file: Selected features
#Outcome file: All_outcome.csv
#######################################################################################
#Outcome column name
outcome_colname <- "Death_inHOSP"
selected_features <- c("UrineOutput_D0toD3" , "Vasopressor_ICUD0toD3","FI02_D1_HIGH","Platelets_D1_LOW","AGE",
"BUN_D0toD3_HIGH","HR_D1_HIGH","LAST_KDIGO_ICU_D0toD3","PH_D1_LOW","Bilirubin_D1_HIGH",
"MAX_KDIGO_ICU_D0toD3","ECMO_ICUD0toD3")
#1.Get model data
train_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
train_data <- train_data[,c(selected_features,outcome_colname)]
colnames(train_data)
table(train_data$Death_inHOSP)
#Outcome index
outcome_index <- which(colnames(train_data) == outcome_colname)
#Train data part
if (ncol(train_data) == 2){ ##For data has one feature column, must add as.data.frame, and rename col
train_X <- as.data.frame(train_data[,-outcome_index])
colnames(train_X) <- colnames(train_data)[1]
}else{
train_X <- train_data[,-outcome_index]
}
train_X
#Train label
train_Y <-  train_data[,outcome_index]
coln
colnames(train_X)
#train model
trained_model  <- train(train_X, train_Y,method= "svmLinear2" , trControl = trainControl("none", classProbs = TRUE),verbose=F) # Support Vector Machines
explainer <- shapr(as.matrix(train_data), trained_model)
library("shapr")
#train model
trained_model  <- train(train_X, train_Y,method= "svmLinear2" , trControl = trainControl("none", classProbs = TRUE),verbose=F) # Support Vector Machines
explainer <- shapr(as.matrix(train_data), trained_model)
?shapr::shapr
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
661098/31563
2267391/95903
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
#onHPC
grp_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
data_dir <- "/recapse/intermediate_data/"
outdir <- "/recapse/intermediate_data/"
# #local
# grp_dir <- "/Volumes/LJL_ExtPro/Data/Testing data for UH3 - Dec 16 2020/"
# data_dir <- "/Users/lucasliu/Desktop/intermediate_data/"
# outdir <- "/Users/lucasliu/Desktop/intermediate_data/"
################################################################################
#1. Load unique codes
################################################################################
#1.Load unique codes
unique_diag_df <- read.csv(paste0(data_dir,"11_all_unique_diag_codes_df.csv"),stringsAsFactors = F)
unique_proc_df <- read.csv(paste0(data_dir,"11_all_unique_proc_codes_df.csv"),stringsAsFactors = F)
unique_drug_df <- read.csv(paste0(data_dir,"11_all_unique_drug_codes_df.csv"),stringsAsFactors = F)
########################################################################
######                2. load HCUP CCS file:                    ########
########################################################################
CCS_df <- load_and_clean_CSS_data(grp_dir)
CCS_Diag_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Diag","ICD10_Diag")),]
CCS_Proc_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Proc","ICD10_Proc")),]
########################################################################
#3. Group  diagnose codes
########################################################################
grouped_unique_diag_df <- group_codes_into_CCS_func(unique_diag_df,CCS_Diag_df)
length(which(is.na(grouped_unique_diag_df$CCS_CATEGORY)==T)) #926 no grps
length(unique(grouped_unique_diag_df$CCS_CATEGORY)) #262 grps
source("Recapse_Ultility.R")
#onHPC
grp_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
data_dir <- "/recapse/intermediate_data/"
outdir <- "/recapse/intermediate_data/"
#local
grp_dir <- "/Volumes/LJL_ExtPro/Data/Testing data for UH3 - Dec 16 2020/"
data_dir <- "/Users/lucasliu/Desktop/intermediate_data/"
outdir <- "/Users/lucasliu/Desktop/intermediate_data/"
################################################################################
#1. Load unique codes
################################################################################
#1.Load unique codes
unique_diag_df <- read.csv(paste0(data_dir,"11_all_unique_diag_codes_df.csv"),stringsAsFactors = F)
unique_proc_df <- read.csv(paste0(data_dir,"11_all_unique_proc_codes_df.csv"),stringsAsFactors = F)
unique_drug_df <- read.csv(paste0(data_dir,"11_all_unique_drug_codes_df.csv"),stringsAsFactors = F)
########################################################################
######                2. load HCUP CCS file:                    ########
########################################################################
CCS_df <- load_and_clean_CSS_data(grp_dir)
CCS_Diag_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Diag","ICD10_Diag")),]
CCS_Proc_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Proc","ICD10_Proc")),]
########################################################################
#3. Group  diagnose codes
########################################################################
grouped_unique_diag_df <- group_codes_into_CCS_func(unique_diag_df,CCS_Diag_df)
length(which(is.na(grouped_unique_diag_df$CCS_CATEGORY)==T)) #926 no grps
length(unique(grouped_unique_diag_df$CCS_CATEGORY)) #262 grps
nrow(grouped_unique_diag_df)
25469 - 1594
grouped_unique_proc_df <- group_codes_into_CCS_func(unique_proc_df,CCS_Proc_df)
length(which(is.na(grouped_unique_proc_df$CCS_CATEGORY)==T)) #8391 no grps
length(unique(grouped_unique_proc_df$CCS_CATEGORY)) #211 grps
nrow(grouped_unique_proc_df)
14152 - 1782
14152 - 10811
#1.Load drug group df
DM3_df <- read.csv(paste0(grp_dir,"Code_Groups/Drug Code Groups-DM3.sorted.csv"),stringsAsFactors = F)
DM3_df <- DM3_df[,-1]
# #Clean drug name by removing the source prefix
DM3_df[,"desc"] <- gsub("NC: |NH: |NO: |NS: ","",DM3_df[,"desc"])
DM3_df[,"desc"] <- gsub("[[:punct:]]"," ",DM3_df[,"desc"])
DM3_df[,"desc"] <- trimws(DM3_df[,"desc"], which = c("both"), whitespace = "[ \t\r\n]")
unique_drug_df[,"Drug_name"] <- gsub("[[:punct:]]"," ",unique_drug_df[,"Drug_name"])
unique_drug_df[,"Drug_name"] <- trimws(unique_drug_df[,"Drug_name"], which = c("both"), whitespace = "[ \t\r\n]")
#group drug codes
grouped_unique_drug_df <- group_drugcodes_into_DM3_func(unique_drug_df,DM3_df)
length(which(is.na(grouped_unique_drug_df$specific_group)==T)) #16415 no grps
length(which(is.na(grouped_unique_drug_df$general_group)==T)) #16415 no grps
length(unique(grouped_unique_drug_df$specific_group)) #58 grps
length(unique(grouped_unique_drug_df$general_group)) #14 grps
length(which(is.na(grouped_unique_drug_df$specific_group)==T)) #16415 no grps
length(which(is.na(grouped_unique_drug_df$general_group)==T)) #16415 no grps
nrow(grouped_unique_drug_df)
38638- 25798
length(unique(grouped_unique_drug_df$specific_group)) #58 grps
length(unique(grouped_unique_drug_df$general_group)) #14 grps
