code_col_name <- "Unique_Diag_Codes_inAllValidMonth"
uniuqe_code_df$N_PtsHasCode <- NA
uniuqe_code_df$Fraction_PtsHasCode <- NA
check_codes <- uniuqe_code_df[,"Code"]
check_codes <- paste0("\\b",check_codes,"\\b")
codes_binary_df <- sapply(check_codes, grepl, per_pts_data_df[,"Unique_Diag_Codes_inAllValidMonth"])
colSums(check)
for (i in 1:nrow(uniuqe_code_df)){
if (i %% 500 == 0){print(i)}
curr_code <- uniuqe_code_df[i,"Code"]
uniuqe_code_df[i,"N_PtsHasCode"] <- length(which(grepl(paste0("\\b",curr_code,"\\b"),per_pts_data_df[,code_col_name]) == T))
uniuqe_code_df[i,"Fraction_PtsHasCode"]  <- uniuqe_code_df[i,"N_PtsHasCode"]/nrow(per_pts_data_df)
}
return(uniuqe_code_df)
}
proj_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/"
source(paste0(proj_dir,"ReCAPSE_Code/Ultilities.R"))
data_dir <- paste0(proj_dir,"/ReCAPSE_Intermediate_Data/0318_21/For_Both_Data/")
outdir <- paste0(proj_dir,"/ReCAPSE_Intermediate_Data/0318_21/For_Both_Data/")
#########################################################################################################
####1. Load final anlaysis ID
#########################################################################################################
final_anlaysisID_df <- read.csv(paste0(data_dir,"Final_analysis_ID.csv"), stringsAsFactors = F)
final_analysis_ID <- unique(final_anlaysisID_df$ID) #26735
################################################################################
###2. Load outcome
################################################################################
outcome_df <- read.csv(paste0(outdir,"updated_All_event_df.csv"),stringsAsFactors = F)
updated_outcome_df <- outcome_df[which(outcome_df[,"ID"] %in% final_analysis_ID),]
################################################################################
####3. Load codes df
################################################################################
unique_Diag_Grp_df <- read.csv(paste0(data_dir,"Grouped_Diag_codes.csv"),stringsAsFactors = F)
unique_Proc_Grp_df <- read.csv(paste0(data_dir,"Grouped_Proc_codes.csv"),stringsAsFactors = F)
unique_Drug_Grp_df <- read.csv(paste0(data_dir,"Grouped_Drug_codes.csv"),stringsAsFactors = F)
################################################################################
####4. Load per pts data
################################################################################
per_pts_data <- read.csv(paste0(outdir,"per_pts_data.csv"),stringsAsFactors = T)
for (j in 2:4){ #convert to character, not factor
per_pts_data[,j] <- as.character(per_pts_data[,j])
}
################################################################################
# add outcome to per_pts_data
#'################################################################################
per_pts_data$SBCE <- NA
per_pts_data$SBCE <- updated_outcome_df$SBCE[match(per_pts_data$ID,updated_outcome_df$ID)]
noSBCE_indxes <- which(per_pts_data$SBCE==0)
noSBCE_per_pts_data <- per_pts_data[noSBCE_indxes,]
yesSBCE_per_pts_data <- per_pts_data[-noSBCE_indxes,]
per_pts_data_df <- per_pts_data
uniuqe_code_df <- unique_Diag_Grp_df
code_col_name <- "Unique_Diag_Codes_inAllValidMonth"
uniuqe_code_df$N_PtsHasCode <- NA
uniuqe_code_df$Fraction_PtsHasCode <- NA
check_codes <- uniuqe_code_df[1:500,"Code"]
check_codes <- paste0("\\b",check_codes,"\\b")
codes_binary_df <- sapply(check_codes, grepl, per_pts_data_df[,"Unique_Diag_Codes_inAllValidMonth"])
colSums(check)
proj_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/"
source(paste0(proj_dir,"ReCAPSE_Code/Ultilities.R"))
data_dir <- paste0(proj_dir,"/ReCAPSE_Intermediate_Data/0318_21/For_Both_Data/")
outdir <- paste0(proj_dir,"/ReCAPSE_Intermediate_Data/0318_21/For_Both_Data/")
perday_data <- read.csv(paste0(data_dir,"filtered_inValidMonth_comb_perday_df.csv"),stringsAsFactors = F)
analysis_Ids <- unique(perday_data$study_id)
length(analysis_Ids) #this is the finaly anlyaisi Id who has valid claim month less than "finaly_anlaysi Id file, cuz valid month filtered
################################################################################
### Load outcome
################################################################################
outcome_df <- read.csv(paste0(outdir,"updated_All_event_df.csv"),stringsAsFactors = F)
################################################################################
### Load Valid month
################################################################################
Valid_Month_df <- read.csv(paste0(outdir,"All_Final_Valid_month.csv"),stringsAsFactors = F)
#load group file of codes
diag_df <- read.csv(paste0(data_dir,"Grouped_Diag_codes.csv"),stringsAsFactors = F)
Proc_df <- read.csv(paste0(data_dir,"Grouped_Proc_codes.csv"),stringsAsFactors = F)
Drug_df <- read.csv(paste0(data_dir,"Grouped_Drug_codes.csv"),stringsAsFactors = F)
unique_groups <- diag_df$CCS_catogory
diag_df$CCS_catogory
unique_groups <- diag_df[,"CCS_catogory"]
#Use CCS catogory type
unique_groups <- unique(diag_df[,"CCS_catogory"])
length(unique_groups)
library(lubridate)
month_df_list <- list()
i <- 1
if (i %% 100 == 0){
print(i)
}
curr_id <- analysis_Ids[i]
curr_perday_df <- perday_data[which(perday_data$study_id ==curr_id ),]
curr_valid_month <- sort(Valid_Month_df[which(Valid_Month_df$ID ==curr_id),"Valid_Month"])
curr_outcome_df <-  outcome_df[which(outcome_df$ID == curr_id ),]
curr_SBCE_flag <- curr_outcome_df$SBCE
curr_SBCE_time <- mdy(curr_outcome_df$Date_2nd_Event)
####
curr_df <- as.data.frame(matrix(NA, nrow = length(curr_valid_month) ,ncol = length(unique_groups) + 3))
colnames(curr_df) <- c("ID","Month_Start","outcome",unique_groups)
curr_df$ID <- curr_id
curr_df$Month_Start <- curr_valid_month
j<-1
curr_mon_start <- ymd(curr_valid_month[j])
curr_mon_end <- curr_mon_start + months(1)
curr_month_df<- curr_perday_df[which(ymd(curr_perday_df$claims_date) >= curr_mon_start &
ymd(curr_perday_df$claims_date) < curr_mon_end),]
curr_month_codes <- unlist(strsplit(curr_month_df[,code_type],"$$$$",fixed = T))
colnames(curr_month_df)
code_type <- "Diag_Codes"
curr_month_codes <- unlist(strsplit(curr_month_df[,code_type],"$$$$",fixed = T))
curr_month_codes
curr_month_df[,code_type]
#find each codes group
matched_groups <- analysis_df[which(analysis_df$Code %in% curr_month_codes),group_name]
analysis_df <- diag_df
#find each codes group
matched_groups <- analysis_df[which(analysis_df$Code %in% curr_month_codes),group_name]
unique_groups <- unique(diag_df[,group_name])
#Use CCS catogory type
group_name <- "CCS_catogory"
code_type <- "Diag_Codes"
unique_groups <- unique(diag_df[,group_name])
length(unique_groups)
analysis_df <- diag_df
#find each codes group
matched_groups <- analysis_df[which(analysis_df$Code %in% curr_month_codes),group_name]
matched_groups
analysis_df$Code
matched_groups <- unlist(strsplit(matched_groups,split = "$$$$",fixed = T))
matched_groups
#find each codes group
matched_groups <- analysis_df[which(analysis_df$Code %in% curr_month_codes),group_name]
matched_groups
na_indxes <- which(is.na(matched_groups)==T)
if (length(na_indxes) > 0){
matched_groups <- matched_groups[-na_indxes]
}
count_tb <- as.data.frame(table(matched_groups))
count_tb
count_tb <- as.data.frame(table(matched_groups))
df_indxes <- which(colnames(curr_df) %in% count_tb[,1])
curr_df[j,df_indxes] <- count_tb[,"Freq"]
curr_df
library(lubridate)
month_df_list <- list()
for (i in  1: length(analysis_Ids)){
if (i %% 100 == 0){
print(i)
}
curr_id <- analysis_Ids[i]
curr_perday_df <- perday_data[which(perday_data$study_id ==curr_id ),]
curr_valid_month <- sort(Valid_Month_df[which(Valid_Month_df$ID ==curr_id),"Valid_Month"])
curr_outcome_df <-  outcome_df[which(outcome_df$ID == curr_id ),]
curr_SBCE_flag <- curr_outcome_df$SBCE
curr_SBCE_time <- mdy(curr_outcome_df$Date_2nd_Event)
####
curr_df <- as.data.frame(matrix(NA, nrow = length(curr_valid_month) ,ncol = length(unique_groups) + 3))
colnames(curr_df) <- c("ID","Month_Start","outcome",unique_groups)
curr_df$ID <- curr_id
curr_df$Month_Start <- curr_valid_month
for (j in 1:length(curr_valid_month)){
curr_mon_start <- ymd(curr_valid_month[j])
curr_mon_end <- curr_mon_start + months(1)
curr_month_df<- curr_perday_df[which(ymd(curr_perday_df$claims_date) >= curr_mon_start &
ymd(curr_perday_df$claims_date) < curr_mon_end),]
curr_month_codes <- unlist(strsplit(curr_month_df[,code_type],"$$$$",fixed = T))
#find each codes group
matched_groups <- analysis_df[which(analysis_df$Code %in% curr_month_codes),group_name]
na_indxes <- which(is.na(matched_groups)==T)
if (length(na_indxes) > 0){
matched_groups <- matched_groups[-na_indxes]
}
count_tb <- as.data.frame(table(matched_groups))
df_indxes <- which(colnames(curr_df) %in% count_tb[,1])
curr_df[j,df_indxes] <- count_tb[,"Freq"]
#print(df_indxes)
#add outcome
if (curr_SBCE_flag == 0){
curr_df[j,"outcome"] <- 0  #"Pre"
}else{
#compare if curr month before or after SBCE
if (curr_mon_start < curr_SBCE_time){
curr_df[j,"outcome"] <- 0  #0
}else{
curr_df[j,"outcome"] <- 1 #post
}
}
}
month_df_list[[i]] <- curr_df
}
i
#combine all
month_data <- do.call(rbind, month_df_list)
View(month_data)
#Use CCS catogory type
group_name <- "Chubak_type"
code_type <- "Diag_Codes"
unique_groups <- unique(diag_df[,group_name])
length(unique_groups)
analysis_df <- diag_df
# code_type <- "Diag_Codes"
# analysis_df <- diag_df
# group_name <- "Chubak_type"
# frac_thres <- 0.1
# analysis_df <- analysis_df[which(analysis_df$Frac_PTS_HASCODE >= 0.1),]
# unique_groups <- unique(analysis_df[,group_name])
# unique_groups <- unique(unlist(strsplit(unique_groups,split = "$$$$",fixed = T))) #multiple grp situtation
library(lubridate)
month_df_list <- list()
for (i in  1: length(analysis_Ids)){
if (i %% 100 == 0){
print(i)
}
curr_id <- analysis_Ids[i]
curr_perday_df <- perday_data[which(perday_data$study_id ==curr_id ),]
curr_valid_month <- sort(Valid_Month_df[which(Valid_Month_df$ID ==curr_id),"Valid_Month"])
curr_outcome_df <-  outcome_df[which(outcome_df$ID == curr_id ),]
curr_SBCE_flag <- curr_outcome_df$SBCE
curr_SBCE_time <- mdy(curr_outcome_df$Date_2nd_Event)
####
curr_df <- as.data.frame(matrix(NA, nrow = length(curr_valid_month) ,ncol = length(unique_groups) + 3))
colnames(curr_df) <- c("ID","Month_Start","outcome",unique_groups)
curr_df$ID <- curr_id
curr_df$Month_Start <- curr_valid_month
for (j in 1:length(curr_valid_month)){
curr_mon_start <- ymd(curr_valid_month[j])
curr_mon_end <- curr_mon_start + months(1)
curr_month_df<- curr_perday_df[which(ymd(curr_perday_df$claims_date) >= curr_mon_start &
ymd(curr_perday_df$claims_date) < curr_mon_end),]
curr_month_codes <- unlist(strsplit(curr_month_df[,code_type],"$$$$",fixed = T))
#find each codes group
matched_groups <- analysis_df[which(analysis_df$Code %in% curr_month_codes),group_name]
na_indxes <- which(is.na(matched_groups)==T)
if (length(na_indxes) > 0){
matched_groups <- matched_groups[-na_indxes]
}
count_tb <- as.data.frame(table(matched_groups))
df_indxes <- which(colnames(curr_df) %in% count_tb[,1])
curr_df[j,df_indxes] <- count_tb[,"Freq"]
#print(df_indxes)
#add outcome
if (curr_SBCE_flag == 0){
curr_df[j,"outcome"] <- 0  #"Pre"
}else{
#compare if curr month before or after SBCE
if (curr_mon_start < curr_SBCE_time){
curr_df[j,"outcome"] <- 0  #0
}else{
curr_df[j,"outcome"] <- 1 #post
}
}
}
month_df_list[[i]] <- curr_df
}
#combine all
month_data <- do.call(rbind, month_df_list)
i
outdir
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/8A_MonthData_bygroup.R', echo=TRUE)
#combine all
month_data <- do.call(rbind, month_df_list)
View(month_data)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/8A_MonthData_bygroup.R', echo=TRUE)
library(parallel)
library(data.table)
library(foreach)
library(doParallel)
library(openxlsx)
numCores <- detectCores() # get the number of cores available
print(numCores)
data_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
outdir <- "/recapse/intermediate_data/perPatientData/Medicaid/"
#Local
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Data/Testing data for UH3 - Dec 16 2020/"
outdir <- "/Users/lucasliu/Desktop/"
#######################################################################################
#Process Medicaid, get per patient data as seperated files
#######################################################################################
data_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicaid_healthclaims_fb0015.csv")))
unique_IDs <- unique(data_df[,"study_id"])
get_perPatientData_func <- function(list_of_IDs,data_df,outdir){
curr_data <- data_df[which(data_df[,"study_id"] == list_of_IDs[i]),]
write.xlsx(curr_df,paste0(outdir,"ID",list_of_IDs[i],"_","all_medicaid_claims.xlsx"))
}
numCores
system.time(
results <- mcmapply(get_perPatientData_func,unique_IDs[1:5],data_df,outdir, mc.cores = numCores-1)
)
numCores-1
system.time(
mcmapply(get_perPatientData_func,unique_IDs[1:5],data_df,outdir, mc.cores = numCores-1)
)
mapply(get_perPatientData_func,unique_IDs[1:2],data_df,outdir)
unique_IDs[1:2]
data_df[,"study_id"]
curr_data <- data_df[which(data_df[,"study_id"] == list_of_IDs[i]),]
list_of_IDs <- unique_IDs
list_of_IDs <- unique_IDs[1:2]
curr_data <- data_df[which(data_df[,"study_id"] == list_of_IDs[i]),]
get_perPatientData_func <- function(pt_ID,data_df,outdir){
curr_data <- data_df[which(data_df[,"study_id"] ==pt_ID),]
write.xlsx(curr_df,paste0(outdir,"ID",pt_ID,"_","all_medicaid_claims.xlsx"))
}
mapply(get_perPatientData_func,unique_IDs[1:2],data_df,outdir)
curr_data <- data_df[which(data_df[,"study_id"] == pt_ID),]
pt_ID <- unique_IDs[1]
curr_data <- data_df[which(data_df[,"study_id"] == pt_ID),]
write.xlsx(curr_df,paste0(outdir,"ID",pt_ID,"_","all_medicaid_claims.xlsx"))
curr_df <- data_df[which(data_df[,"study_id"] == pt_ID),]
write.xlsx(curr_df,paste0(outdir,"ID",pt_ID,"_","all_medicaid_claims.xlsx"))
mapply(get_perPatientData_func,unique_IDs[1:2],data_df,outdir)
get_perPatientData_func <- function(pt_ID,data_df,outdir){
curr_df <- data_df[which(data_df[,"study_id"] == pt_ID),]
write.xlsx(curr_df,paste0(outdir,"ID",pt_ID,"_","all_medicaid_claims.xlsx"))
}
mapply(get_perPatientData_func,unique_IDs[1:2],data_df,outdir)
#######################################################################################
#Process Medicaid, get per patient data as seperated files
#######################################################################################
claims_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicaid_healthclaims_fb0015.csv")))
unique_IDs <- unique(claims_df[,"study_id"])
mapply(get_perPatientData_func,pt_ID= unique_IDs[1:2],data_df = claims_df,outdir = outdir)
mapply(get_perPatientData_func,pt_ID= unique_IDs[1:2])
get_perPatientData_func <- function(pt_ID){
curr_df <- data_df[which(data_df[,"study_id"] == pt_ID),]
write.xlsx(curr_df,paste0(outdir,"ID",pt_ID,"_","all_medicaid_claims.xlsx"))
}
mapply(get_perPatientData_func,pt_ID= unique_IDs[1:2])
system.time(
mapply(get_perPatientData_func,pt_ID= unique_IDs[1:2])
)
system.time(
mcmapply(get_perPatientData_func,unique_IDs[1:2], mc.cores = numCores-1)
)
system.time(
mapply(get_perPatientData_func,pt_ID= unique_IDs[1:5])
)
system.time(
mcmapply(get_perPatientData_func,unique_IDs[1:5], mc.cores = numCores-1)
)
source("HPC_Ultility.R")
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
library(parallel)
library(data.table)
library(foreach)
library(doParallel)
library(openxlsx)
source("HPC_Ultility.R")
library(parallel)
library(data.table)
library(foreach)
library(doParallel)
library(openxlsx)
source("HPC_Ultility.R")
numCores <- detectCores() # get the number of cores available
print(numCores)
data_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
outdir <- "/recapse/intermediate_data/perPatientData/Medicaid/"
#Local
#data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Data/Testing data for UH3 - Dec 16 2020/"
#outdir <- "/Users/lucasliu/Desktop/"
#######################################################################################
#Process Medicaid, get per patient data as seperated files
#######################################################################################
claims_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicaid_healthclaims_fb0015.csv")))
unique_IDs <- unique(claims_df[,"study_id"])
system.time(
mcmapply(get_perPatientData_func,unique_IDs, mc.cores = numCores-1)
)
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Data/Testing data for UH3 - Dec 16 2020/uh3_kcrdata.csv"
#######################################################################################
#Get all study id in kcr
#######################################################################################
kcr_df <- as.data.frame(fread(paste0(data_dir,"uh3_kcrdata.csv")))
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Data/Testing data for UH3 - Dec 16 2020/"
#######################################################################################
#Get all study id in kcr
#######################################################################################
kcr_df <- as.data.frame(fread(paste0(data_dir,"uh3_kcrdata.csv")))
View(kcr_df)
unique_ID <- unique[,kcr_df[,"study_id"]]
unique_ID <- unique(kcr_df[,"study_id"])
kcr_ID <- unique(kcr_df[,"study_id"])
#######################################################################################
#Read Medicare
#######################################################################################
medicare_health_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicaid_healthclaims_fb0015.csv")))
medicare_pharm_df <- as.data.frame(fread(paste0(data_dir,"KCR_MEDICAID_PHARMCLAIMS_FB0015.csv")))
#######################################################################################
#Read medicaid
#######################################################################################
medicaid_health_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicaid_healthclaims_fb0015.csv")))
medicaid_pharm_df <- as.data.frame(fread(paste0(data_dir,"KCR_MEDICAID_PHARMCLAIMS_FB0015.csv")))
health_ID <- unique(medicaid_health_df[,"study_id"])
pharm_ID <- unique(medicaid_pharm_df[,"study_id"])
health_ID <- unique(medicaid_health_df[,"study_id"])
pharm_ID <- unique(medicaid_pharm_df[,"study_id"])
medicaid_IDs <- intersect(health_ID,pharm_ID)
length(pharm_ID)
length(health_ID)
medicaid_IDs <- union(health_ID,pharm_ID)
medicaid_IDs
length(medicaid_IDs)
which(!medicaid_IDs %in% kcr_ID)
which(!medicare_IDs %in% kcr_ID)
#######################################################################################
#Read Medicare
#######################################################################################
medicare_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicare_claims_fb0015.csv")))
which(!health_ID %in% pharm_ID)
which(!pharm_ID %in% health_ID)
length(kcr_ID)
#######################################################################################
##Combine all ID
#######################################################################################
ALLID_df <- as.data.frame(matrix(NA, nrow = length(kcr_ID),ncol = 3))
colnames(ALLID_df) <- c("Kcr_ID","in_Medicare","in_Medicaid")
for (i in 1:length(kcr_ID)){
curr_id <- kcr_ID[i]
ALLID_df[i,"Kcr_ID"] <- curr_id
#in medicare
if (curr_id %in% medicare_IDs){
ALLID_df[i,"in_Medicare"] <- 1
}else{
ALLID_df[i,"in_Medicare"] <- 0
}
#in medicaid
if (curr_id %in% medicaid_IDs){
ALLID_df[i,"in_Medicaid"] <- 1
}else{
ALLID_df[i,"in_Medicaid"] <- 0
}
}
D
for (i in 1:length(kcr_ID)){
curr_id <- kcr_ID[i]
ALLID_df[i,"Kcr_ID"] <- curr_id
# #in medicare
# if (curr_id %in% medicare_IDs){
#   ALLID_df[i,"in_Medicare"] <- 1
# }else{
#   ALLID_df[i,"in_Medicare"] <- 0
# }
#in medicaid
if (curr_id %in% medicaid_IDs){
ALLID_df[i,"in_Medicaid"] <- 1
}else{
ALLID_df[i,"in_Medicaid"] <- 0
}
}
i
View(ALLID_df)
#######################################################################################
##### Load Id and source file
#######################################################################################
data_dir <- "/Users/lucasliu/Desktop/"
AllID_df <- read.xlsx(paste0(data_dir,"/Users/lucasliu/Desktop/All_ID_Source.xlsx"),sheet = 1)
AllID_df <- read.xlsx(paste0(data_dir,"All_ID_Source.xlsx"),sheet = 1)
#Filter IDs not in medicaid and medicare
which(AllID_df$in_Medicare ==0 & AllID_df$in_Medicaid == 0)
#Filter IDs not in medicaid and medicare
AllID_df <- AllID_df[-which(AllID_df$in_Medicare ==0 & AllID_df$in_Medicaid == 0),]
#######################################################################################
#Load Medicaid
#######################################################################################
data_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicaid_healthclaims_fb0015.csv"), nrows = 10))
#Local
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Data/Testing data for UH3 - Dec 16 2020/"
outdir <- "/Users/lucasliu/Desktop/"
#######################################################################################
#Load Medicaid
#######################################################################################
data_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicaid_healthclaims_fb0015.csv"), nrows = 10))
View(data_df)
#######################################################################################
#Load Medicare
#######################################################################################
data_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicare_claims_fb0015.csv"),nrows = 100))
medicaid_health_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicaid_healthclaims_fb0015.csv"),nrows = 100))
medicaid_pharm_df <- as.data.frame(fread(paste0(data_dir,"KCR_MEDICAID_PHARMCLAIMS_FB0015.csv"),nrows = 100))
health_ID <- unique(medicaid_health_df[,"study_id"])
pharm_ID <- unique(medicaid_pharm_df[,"study_id"])
medicaid_IDs <- union(health_ID,pharm_ID) #take the union, some pts has no health claims, some has no pharm claim
#######################################################################################
#Load Medicare
#######################################################################################
medicare_df <- as.data.frame(fread(paste0(data_dir,"kcr_medicare_claims_fb0015.csv"),nrows = 100))
medicare_IDs <- unique(medicare_df[,"study_id"])
colnames(medicare_df)
which(colnames(medicare_df) %in% c(diag_cols,proc_cols,drug_cols,date_col))
diag_cols <- paste0("DGNS_CD",seq(1,25))
proc_cols <- c(paste0("PRCDRCD",seq(1,25)),"HCPCS_CD")
drug_cols <- c("NDC_CD","PROD_SRVC_ID")
date_col <- "claims_date"
which(!colnames(medicare_df) %in% c(diag_cols,proc_cols,drug_cols,date_col))
colnames(medicare_df) [which(!colnames(medicare_df) %in% c(diag_cols,proc_cols,drug_cols,date_col))]
table(medicare_df$dfile)
medicare_df$LOSCNT
gc()
library(parallel)
library(data.table)
library(foreach)
library(doParallel)
library(openxlsx)
numCores <- detectCores() # get the number of cores available
print(numCores)
data_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
outdir1 <- "/recapse/intermediate_data/perPatientData/Medicaid/HealthClaims/"
outdir2 <- "/recapse/intermediate_data/perPatientData/Medicaid/PharmClaims/"
rm(list=ls())
gc()
library(data.table)
