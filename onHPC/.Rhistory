#Select Final grps for model ready data
#Select grps from:
#1. Count_CCS_Diag_Unique_Grps.xlsx
#2. Count_CCS_proc_Unique_Grps.xlsx
#3. Count_VAL_2ND_Unique_Grps.xlsx
################################################################################
count_df1 <- read.xlsx(paste0(data_dir1,"Count_CCS_Diag_Unique_Grps.xlsx"),sheet = 1)
count_df2 <- read.xlsx(paste0(data_dir1,"Count_CCS_proc_Unique_Grps.xlsx"),sheet = 1)
count_df3 <- read.xlsx(paste0(data_dir1,"Count_VAL_2ND_Unique_Grps.xlsx"),sheet = 1)
#Drug
selected_index3 <- which(count_df3[,"Frac_PtsHasTheGrp_SBCE"] > 0.1 | count_df3[,"Frac_PtsHasTheGrp_nonSBCE"] > 0.15)
Final_selected_grps_df3 <- data.frame(count_df3[selected_index3,"Code_Grp"]) #62
colnames(Final_selected_grps_df3) <- "Selected_Grps"
count_df3[selected_index3,"Code_Grp"]
View(Final_selected_grps_df3)
#convert names the same as column names
data.frame(col.names = count_df3[selected_index3,"Code_Grp"])
#convert names the same as column names
data.frame(matrix(NA,))
selected_index3
length(selected_index3)
#convert names the same as column names
data.frame(matrix(NA, nrow = 1, ncol = length(selected_index3)))
#convert names the same as column names
df <- data.frame(matrix(NA, nrow = 1, ncol = length(selected_index3)))
colnames(df) <- count_df3[selected_index3,"Code_Grp"]
colnames(df)
Final_selected_grps_df3 <- data.frame(colnames(df)) #62
colnames(Final_selected_grps_df3) <- "Selected_Grps"
View(Final_selected_grps_df3)
colnames(df)
sort(colnames(df))
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
source("Recapse_Ultility.R")
data_dir_drug  <- paste0(proj_dir, "10F2_VAL2NDFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir2  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
data_dir3  <- paste0(proj_dir, "10H_Selected_Grps/WithPossibleMonthsHasNoCodes/")
outdir   <- paste0(proj_dir, "11A_ModelReady_GrpFeature/WithPossibleMonthsHasNoCodes/")
Final_ID_df <- read.xlsx(paste0(data_dir2,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
################################################################################
#2.Final model ready grps
################################################################################
modelready_grps_df1 <- read.xlsx(paste0(data_dir3,"Selected_CCSDiag_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df2 <- read.xlsx(paste0(data_dir3,"Selected_CCSProc_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df3 <- read.xlsx(paste0(data_dir3,"Selected_VAL2ndDrug_Unique_Grps.xlsx"),sheet = 1)
modelready_Diag_features <- sort(modelready_grps_df1[,1])
modelready_Proc_features <- sort(modelready_grps_df2[,1])
modelready_Drug_features <- sort(modelready_grps_df3[,1])
#All features
modelready_grps_features <- sort(c(modelready_Diag_features,modelready_Proc_features,modelready_Drug_features))
modelready_grps_features
modelready_Drug_features
sort(modelready_Drug_features)
sort(modelready_Drug_features)[1:5]
curr_id <- 1024
curr_file3 <- paste0("ID",curr_id,"_Month_VAL_2ND_Feature.xlsx")
old_perMonth_df3 <- read.xlsx(paste0(data_dir_drug,curr_file3),sheet = 1)
View(old_perMonth_df3)
old_feature_df
modelready_grps_features
curr_id <- analysis_IDs[i]
curr_file1 <- paste0("ID",curr_id,"_Month_CCS_DIAG_Feature.xlsx")
curr_file1 <- paste0("ID",curr_id,"_Month_CCS_DIAG_Feature.xlsx")
curr_file2 <- paste0("ID",curr_id,"_Month_CCS_PROC_Feature.xlsx")
curr_file3 <- paste0("ID",curr_id,"_Month_VAL_2ND_Feature.xlsx")
#old per month groups df
old_perMonth_df1 <- read.xlsx(paste0(data_dir_diag,curr_file1),sheet = 1)
old_perMonth_df2 <- read.xlsx(paste0(data_dir_proc,curr_file2),sheet = 1)
#data dir
data_dir_diag  <- paste0(proj_dir, "10B_CCSDiagFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir_proc  <- paste0(proj_dir, "10C_CCSProcFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir_drug  <- paste0(proj_dir, "10F2_VAL2NDFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir2  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
data_dir3  <- paste0(proj_dir, "10H_Selected_Grps/WithPossibleMonthsHasNoCodes/")
curr_file1 <- paste0("ID",curr_id,"_Month_CCS_DIAG_Feature.xlsx")
curr_file2 <- paste0("ID",curr_id,"_Month_CCS_PROC_Feature.xlsx")
curr_file3 <- paste0("ID",curr_id,"_Month_VAL_2ND_Feature.xlsx")
#old per month groups df
old_perMonth_df1 <- read.xlsx(paste0(data_dir_diag,curr_file1),sheet = 1)
old_perMonth_df2 <- read.xlsx(paste0(data_dir_proc,curr_file2),sheet = 1)
old_perMonth_df3 <- read.xlsx(paste0(data_dir_drug,curr_file3),sheet = 1)
#Match rows
old_perMonth_df2 <- old_perMonth_df2[match(old_perMonth_df2[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
old_perMonth_df3 <- old_perMonth_df3[match(old_perMonth_df3[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
#Comm three df
old_perMonth_df <- cbind(old_perMonth_df1,old_perMonth_df2,old_perMonth_df3)
#get study_id list
old_study_id <- old_perMonth_df[,"study_id"]
#get month start list
old_Month_Start <- old_perMonth_df[,"Month_Start"]
#update old grps feature df only contains features
remove_idxes      <- which(colnames(old_perMonth_df) %in% c("Enrolled_Month","study_id","Month_Start","Month_End"))
colnames(old_perMonth_df)
modelready_Diag_features
modelready_Drug_features
gsub(" ",".",modelready_Drug_features)
colnames(old_perMonth_df)
as.character(colnames(old_perMonth_df))
sort(modelready_grps_df3[,1])
gsub(" ",".",sort(modelready_grps_df3[,1]))
curr_file1 <- paste0("ID",curr_id,"_Month_CCS_DIAG_Feature.xlsx")
curr_file2 <- paste0("ID",curr_id,"_Month_CCS_PROC_Feature.xlsx")
curr_file3 <- paste0("ID",curr_id,"_Month_VAL_2ND_Feature.xlsx")
#old per month groups df
old_perMonth_df1 <- read.xlsx(paste0(data_dir_diag,curr_file1),sheet = 1)
old_perMonth_df2 <- read.xlsx(paste0(data_dir_proc,curr_file2),sheet = 1)
old_perMonth_df3 <- read.xlsx(paste0(data_dir_drug,curr_file3),sheet = 1)
#Match rows
old_perMonth_df2 <- old_perMonth_df2[match(old_perMonth_df2[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
old_perMonth_df3 <- old_perMonth_df3[match(old_perMonth_df3[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
#Comm three df
old_perMonth_df <- cbind(old_perMonth_df1,old_perMonth_df2,old_perMonth_df3)
#get study_id list
old_study_id <- old_perMonth_df[,"study_id"]
#get month start list
old_Month_Start <- old_perMonth_df[,"Month_Start"]
#update old grps feature df only contains features
remove_idxes      <- which(colnames(old_perMonth_df) %in% c("Enrolled_Month","study_id","Month_Start","Month_End"))
#if old feature df only has one grp feature ncol=5, then after remove, only one column left, make sure it is a dataframe
if (ncol(old_perMonth_df) == 5){
left_feature_name <- colnames(old_perMonth_df)[-remove_idxes]
old_feature_df     <- as.data.frame(old_perMonth_df[,-remove_idxes])
colnames(old_feature_df) <- left_feature_name
}else{
old_feature_df    <- old_perMonth_df[,-remove_idxes]
}
#only keep old features that are in select groups
kept_idexes <- which(colnames(old_feature_df) %in% modelready_grps_features)
if (length(kept_idexes) > 0){
if (ncol(old_perMonth_df) == 5){
kept_feature_name <- colnames(old_feature_df)[kept_idexes]
updated_old_feature_df <- as.data.frame(old_feature_df[,kept_idexes])
colnames(updated_old_feature_df) <- kept_feature_name
updated_old_features   <- colnames(updated_old_feature_df)
}else{
updated_old_feature_df <- old_feature_df[,kept_idexes]
updated_old_features   <- colnames(updated_old_feature_df)
}
}else{
updated_old_feature_df <- NULL
updated_old_features <- NULL
}
#new per month groups using all selected grps
#All entries are initilized with 0
new_perMonth_df <- as.data.frame(matrix(0, nrow = nrow(old_perMonth_df), ncol = length(modelready_grps_features) + 2))
colnames(new_perMonth_df) <- c("study_id","Month_Start",modelready_grps_features)
new_perMonth_df[,"study_id"]    <- old_study_id
new_perMonth_df[,"Month_Start"] <- old_Month_Start
#All entires matched with old ones, fill as the old ones, if none of the old ones are selected, then all 0s
new_perMonth_df[,updated_old_features] <- updated_old_feature_df
View(new_perMonth_df)
modelready_Drug_features <- gsub(" ",".",sort(modelready_grps_df3[,1]))
#All features
modelready_grps_features <- sort(c(modelready_Diag_features,modelready_Proc_features,modelready_Drug_features))
########################################################################################################################
#Use the following code to run in case out of memory when procssing all at one time
########################################################################################################################
ID_processed <- as.numeric(gsub("_Selected_Grp_Features.xlsx|ID","",list.files(outdir)))
if (length(ID_processed) != 0 ){
analysis_IDs <- analysis_IDs[-which(analysis_IDs %in% ID_processed)]
}
print(length(analysis_IDs))
curr_file1 <- paste0("ID",curr_id,"_Month_CCS_DIAG_Feature.xlsx")
curr_file2 <- paste0("ID",curr_id,"_Month_CCS_PROC_Feature.xlsx")
curr_file3 <- paste0("ID",curr_id,"_Month_VAL_2ND_Feature.xlsx")
#old per month groups df
old_perMonth_df1 <- read.xlsx(paste0(data_dir_diag,curr_file1),sheet = 1)
old_perMonth_df2 <- read.xlsx(paste0(data_dir_proc,curr_file2),sheet = 1)
old_perMonth_df3 <- read.xlsx(paste0(data_dir_drug,curr_file3),sheet = 1)
#Match rows
old_perMonth_df2 <- old_perMonth_df2[match(old_perMonth_df2[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
old_perMonth_df3 <- old_perMonth_df3[match(old_perMonth_df3[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
#Comm three df
old_perMonth_df <- cbind(old_perMonth_df1,old_perMonth_df2,old_perMonth_df3)
#get study_id list
old_study_id <- old_perMonth_df[,"study_id"]
#get month start list
old_Month_Start <- old_perMonth_df[,"Month_Start"]
#update old grps feature df only contains features
remove_idxes      <- which(colnames(old_perMonth_df) %in% c("Enrolled_Month","study_id","Month_Start","Month_End"))
#if old feature df only has one grp feature ncol=5, then after remove, only one column left, make sure it is a dataframe
if (ncol(old_perMonth_df) == 5){
left_feature_name <- colnames(old_perMonth_df)[-remove_idxes]
old_feature_df     <- as.data.frame(old_perMonth_df[,-remove_idxes])
colnames(old_feature_df) <- left_feature_name
}else{
old_feature_df    <- old_perMonth_df[,-remove_idxes]
}
#only keep old features that are in select groups
kept_idexes <- which(colnames(old_feature_df) %in% modelready_grps_features)
if (length(kept_idexes) > 0){
if (ncol(old_perMonth_df) == 5){
kept_feature_name <- colnames(old_feature_df)[kept_idexes]
updated_old_feature_df <- as.data.frame(old_feature_df[,kept_idexes])
colnames(updated_old_feature_df) <- kept_feature_name
updated_old_features   <- colnames(updated_old_feature_df)
}else{
updated_old_feature_df <- old_feature_df[,kept_idexes]
updated_old_features   <- colnames(updated_old_feature_df)
}
}else{
updated_old_feature_df <- NULL
updated_old_features <- NULL
}
#new per month groups using all selected grps
#All entries are initilized with 0
new_perMonth_df <- as.data.frame(matrix(0, nrow = nrow(old_perMonth_df), ncol = length(modelready_grps_features) + 2))
colnames(new_perMonth_df) <- c("study_id","Month_Start",modelready_grps_features)
new_perMonth_df[,"study_id"]    <- old_study_id
new_perMonth_df[,"Month_Start"] <- old_Month_Start
#All entires matched with old ones, fill as the old ones, if none of the old ones are selected, then all 0s
new_perMonth_df[,updated_old_features] <- updated_old_feature_df
modelready_Drug_features <- sort(modelready_grps_df3[,1])
#All features
modelready_grps_features <- sort(c(modelready_Diag_features,modelready_Proc_features,modelready_Drug_features))
curr_file1 <- paste0("ID",curr_id,"_Month_CCS_DIAG_Feature.xlsx")
curr_file2 <- paste0("ID",curr_id,"_Month_CCS_PROC_Feature.xlsx")
curr_file3 <- paste0("ID",curr_id,"_Month_VAL_2ND_Feature.xlsx")
#old per month groups df
old_perMonth_df1 <- read.xlsx(paste0(data_dir_diag,curr_file1),sheet = 1)
old_perMonth_df2 <- read.xlsx(paste0(data_dir_proc,curr_file2),sheet = 1)
old_perMonth_df3 <- read.xlsx(paste0(data_dir_drug,curr_file3),sheet = 1)
#Match rows
old_perMonth_df2 <- old_perMonth_df2[match(old_perMonth_df2[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
old_perMonth_df3 <- old_perMonth_df3[match(old_perMonth_df3[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
#Comm three df
old_perMonth_df <- cbind(old_perMonth_df1,old_perMonth_df2,old_perMonth_df3)
#get study_id list
old_study_id <- old_perMonth_df[,"study_id"]
#get month start list
old_Month_Start <- old_perMonth_df[,"Month_Start"]
#update old grps feature df only contains features
remove_idxes      <- which(colnames(old_perMonth_df) %in% c("Enrolled_Month","study_id","Month_Start","Month_End"))
#if old feature df only has one grp feature ncol=5, then after remove, only one column left, make sure it is a dataframe
if (ncol(old_perMonth_df) == 5){
left_feature_name <- colnames(old_perMonth_df)[-remove_idxes]
old_feature_df     <- as.data.frame(old_perMonth_df[,-remove_idxes])
colnames(old_feature_df) <- left_feature_name
}else{
old_feature_df    <- old_perMonth_df[,-remove_idxes]
}
#only keep old features that are in select groups
kept_idexes <- which(colnames(old_feature_df) %in% modelready_grps_features)
if (length(kept_idexes) > 0){
if (ncol(old_perMonth_df) == 5){
kept_feature_name <- colnames(old_feature_df)[kept_idexes]
updated_old_feature_df <- as.data.frame(old_feature_df[,kept_idexes])
colnames(updated_old_feature_df) <- kept_feature_name
updated_old_features   <- colnames(updated_old_feature_df)
}else{
updated_old_feature_df <- old_feature_df[,kept_idexes]
updated_old_features   <- colnames(updated_old_feature_df)
}
}else{
updated_old_feature_df <- NULL
updated_old_features <- NULL
}
#new per month groups using all selected grps
#All entries are initilized with 0
new_perMonth_df <- as.data.frame(matrix(0, nrow = nrow(old_perMonth_df), ncol = length(modelready_grps_features) + 2))
colnames(new_perMonth_df) <- c("study_id","Month_Start",modelready_grps_features)
new_perMonth_df[,"study_id"]    <- old_study_id
new_perMonth_df[,"Month_Start"] <- old_Month_Start
#All entires matched with old ones, fill as the old ones, if none of the old ones are selected, then all 0s
new_perMonth_df[,updated_old_features] <- updated_old_feature_df
write.xlsx(new_perMonth_df,paste0(outdir,"ID",curr_id,"_Selected_Grp_Features.xlsx"))
write.xlsx(new_perMonth_df,paste0(outdir,"ID",curr_id,"_Selected_Grp_Features.xlsx"))
#All features
modelready_grps_features <- sort(c(modelready_Diag_features,modelready_Proc_features,modelready_Drug_features))
curr_file1 <- paste0("ID",curr_id,"_Month_CCS_DIAG_Feature.xlsx")
curr_file2 <- paste0("ID",curr_id,"_Month_CCS_PROC_Feature.xlsx")
curr_file3 <- paste0("ID",curr_id,"_Month_VAL_2ND_Feature.xlsx")
#old per month groups df
old_perMonth_df1 <- read.xlsx(paste0(data_dir_diag,curr_file1),sheet = 1)
old_perMonth_df2 <- read.xlsx(paste0(data_dir_proc,curr_file2),sheet = 1)
old_perMonth_df3 <- read.xlsx(paste0(data_dir_drug,curr_file3),sheet = 1)
#Match rows
old_perMonth_df2 <- old_perMonth_df2[match(old_perMonth_df2[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
old_perMonth_df3 <- old_perMonth_df3[match(old_perMonth_df3[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
#Comm three df
old_perMonth_df <- cbind(old_perMonth_df1,old_perMonth_df2,old_perMonth_df3)
#get study_id list
old_study_id <- old_perMonth_df[,"study_id"]
#get month start list
old_Month_Start <- old_perMonth_df[,"Month_Start"]
#update old grps feature df only contains features
remove_idxes      <- which(colnames(old_perMonth_df) %in% c("Enrolled_Month","study_id","Month_Start","Month_End"))
#if old feature df only has one grp feature ncol=5, then after remove, only one column left, make sure it is a dataframe
if (ncol(old_perMonth_df) == 5){
left_feature_name <- colnames(old_perMonth_df)[-remove_idxes]
old_feature_df     <- as.data.frame(old_perMonth_df[,-remove_idxes])
colnames(old_feature_df) <- left_feature_name
}else{
old_feature_df    <- old_perMonth_df[,-remove_idxes]
}
#only keep old features that are in select groups
kept_idexes <- which(colnames(old_feature_df) %in% modelready_grps_features)
if (length(kept_idexes) > 0){
if (ncol(old_perMonth_df) == 5){
kept_feature_name <- colnames(old_feature_df)[kept_idexes]
updated_old_feature_df <- as.data.frame(old_feature_df[,kept_idexes])
colnames(updated_old_feature_df) <- kept_feature_name
updated_old_features   <- colnames(updated_old_feature_df)
}else{
updated_old_feature_df <- old_feature_df[,kept_idexes]
updated_old_features   <- colnames(updated_old_feature_df)
}
}else{
updated_old_feature_df <- NULL
updated_old_features <- NULL
}
#new per month groups using all selected grps
#All entries are initilized with 0
new_perMonth_df <- as.data.frame(matrix(0, nrow = nrow(old_perMonth_df), ncol = length(modelready_grps_features) + 2))
colnames(new_perMonth_df) <- c("study_id","Month_Start",modelready_grps_features)
new_perMonth_df[,"study_id"]    <- old_study_id
new_perMonth_df[,"Month_Start"] <- old_Month_Start
#All entires matched with old ones, fill as the old ones, if none of the old ones are selected, then all 0s
new_perMonth_df[,updated_old_features] <- updated_old_feature_df
write.xlsx(new_perMonth_df,paste0(outdir,"ID",curr_id,"_Selected_Grp_Features.xlsx"))
write.xlsx(new_perMonth_df,paste0(outdir,"ID",curr_id,"_Selected_Grp_Features.xlsx"))
#modelready_Drug_features <- sort(modelready_grps_df3[,1])
modelready_Drug_features <- gsub(" ",".",sort(modelready_grps_df3[,1])) #fix the issue of colume names conversion when read xlsx
modelready_Drug_features
#All features
modelready_grps_features <- sort(c(modelready_Diag_features,modelready_Proc_features,modelready_Drug_features))
curr_file1 <- paste0("ID",curr_id,"_Month_CCS_DIAG_Feature.xlsx")
curr_file2 <- paste0("ID",curr_id,"_Month_CCS_PROC_Feature.xlsx")
curr_file3 <- paste0("ID",curr_id,"_Month_VAL_2ND_Feature.xlsx")
#old per month groups df
old_perMonth_df1 <- read.xlsx(paste0(data_dir_diag,curr_file1),sheet = 1)
old_perMonth_df2 <- read.xlsx(paste0(data_dir_proc,curr_file2),sheet = 1)
old_perMonth_df3 <- read.xlsx(paste0(data_dir_drug,curr_file3),sheet = 1)
#Match rows
old_perMonth_df2 <- old_perMonth_df2[match(old_perMonth_df2[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
old_perMonth_df3 <- old_perMonth_df3[match(old_perMonth_df3[,"Enrolled_Month"],old_perMonth_df1[,"Enrolled_Month"]),]
#Comm three df
old_perMonth_df <- cbind(old_perMonth_df1,old_perMonth_df2,old_perMonth_df3)
#get study_id list
old_study_id <- old_perMonth_df[,"study_id"]
#get month start list
old_Month_Start <- old_perMonth_df[,"Month_Start"]
#update old grps feature df only contains features
remove_idxes      <- which(colnames(old_perMonth_df) %in% c("Enrolled_Month","study_id","Month_Start","Month_End"))
#if old feature df only has one grp feature ncol=5, then after remove, only one column left, make sure it is a dataframe
if (ncol(old_perMonth_df) == 5){
left_feature_name <- colnames(old_perMonth_df)[-remove_idxes]
old_feature_df     <- as.data.frame(old_perMonth_df[,-remove_idxes])
colnames(old_feature_df) <- left_feature_name
}else{
old_feature_df    <- old_perMonth_df[,-remove_idxes]
}
#only keep old features that are in select groups
kept_idexes <- which(colnames(old_feature_df) %in% modelready_grps_features)
if (length(kept_idexes) > 0){
if (ncol(old_perMonth_df) == 5){
kept_feature_name <- colnames(old_feature_df)[kept_idexes]
updated_old_feature_df <- as.data.frame(old_feature_df[,kept_idexes])
colnames(updated_old_feature_df) <- kept_feature_name
updated_old_features   <- colnames(updated_old_feature_df)
}else{
updated_old_feature_df <- old_feature_df[,kept_idexes]
updated_old_features   <- colnames(updated_old_feature_df)
}
}else{
updated_old_feature_df <- NULL
updated_old_features <- NULL
}
#new per month groups using all selected grps
#All entries are initilized with 0
new_perMonth_df <- as.data.frame(matrix(0, nrow = nrow(old_perMonth_df), ncol = length(modelready_grps_features) + 2))
colnames(new_perMonth_df) <- c("study_id","Month_Start",modelready_grps_features)
new_perMonth_df[,"study_id"]    <- old_study_id
new_perMonth_df[,"Month_Start"] <- old_Month_Start
#All entires matched with old ones, fill as the old ones, if none of the old ones are selected, then all 0s
new_perMonth_df[,updated_old_features] <- updated_old_feature_df
write.xlsx(new_perMonth_df,paste0(outdir,"ID",curr_id,"_Selected_Grp_Features.xlsx"))
old_perMonth_df3
colnames(old_perMonth_df3)
ncol(old_perMonth_df3)
30-4
colnames(new_perMonth_df)
colSums(new_perMonth_df[194:255])
check_df <- colSums(new_perMonth_df[194:255])
check_df <- data.frame(colSums(new_perMonth_df[194:255]))
View(check_df)
which( check_df[,2]>0)
which( check_df[:,2]>0)
which( check_df[:,1]>0)
which( check_df[,1]>0)
length(which( check_df[,1]>0))
View(old_perMonth_df3)
colnames(new_perMonth_df)
255 - 194
ncol(old_perMonth_df3)
check_df <- data.frame(colSums(old_perMonth_df3[5:30]))
check_df <- data.frame(colSums(new_perMonth_df[194:255]))
check_df2 <- data.frame(colSums(old_perMonth_df3[5:30]))
which(rownames(check_df) in rownames(check_df2))
which(rownames(check_df) %in% rownames(check_df2))
which(!rownames(check_df) %in% rownames(check_df2))
which(!rownames(check_df2) %in% rownames(check_df))
rownames(check_df2)[9]
rownames(check_df2)[11]
rownames(check_df2)[14]
rownames(check_df2)[c(17,19)]
data_df <- read.xlsx("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/10H_Selected_Grps/WithPossibleMonthsHasNoCodes/Selected_VAL2ndDrug_Unique_Grps.xlsx",sheet = 1)
View(data_df)
data_df$Selected_Grps
data_df$Selected_Grps <- gsub("VAL_2ND_","",data_df$Selected_Grps)
View(data_df)
which(is.na(data_df$Selected_Grps)==T)
which(is.na(data_df$Selected_Grps)=="NA")
write.csv(data_df, "/Users/lucasliu/Desktop/Selected_Drug_Group.csv")
sort(data_df$Selected_Grps)
grp_info <- read.xlsx("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/Grouped_CleanUniqueCodes/Unique_Drug_And_Groups_inALLClaims.xlsx",sheet = 1)
View(grp_info)
grp_info <- read.xlsx("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Data/Code_Groups/Val_Quan_Final SecondRoot List and NDC.xlsx",sheet = 1)
View(grp_info)
data_df$Selected_Grps
grp_info_df <- read.xlsx("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Data/Code_Groups/Val_Quan_Final SecondRoot List and NDC.xlsx",sheet = 1)
intersect(grp_info_df$SECONDARY_CLASSIFICATION, data_df$Selected_Grps)
length(intersect(grp_info_df$SECONDARY_CLASSIFICATION, data_df$Selected_Grps))
grp_info_df$SELECTED <- NA
grp_info_df$SELECTED <- NA
for (i in 1:ncol(grp_info_df)){
cur_group <- grp_info_df$SECONDARY_CLASSIFICATION[i]
if (cur_group %in% data_df$Selected_Grps){
grp_info_df$SELECTED[i] <- 1
}
}
View(grp_info_df)
grp_info_df$SELECTED <- NA
for (i in 1:nrow(grp_info_df)){
cur_group <- grp_info_df$SECONDARY_CLASSIFICATION[i]
if (cur_group %in% data_df$Selected_Grps){
grp_info_df$SELECTED[i] <- 1
}else{
grp_info_df$SELECTED[i] <- 0
}
}
View(grp_info_df)
colnames(grp_info_df)
selected_2nd_grps <- as.data.frame(grp_info_df[grp_info_df$SELECTED == 1,c(1,3,4)])
unselected_2nd_grps <- as.data.frame(grp_info_df[grp_info_df$SELECTED == 0,c(1,3,4)])
unique(selected_2nd_grps$SECONDARY_CLASSIFICATION)
View(selected_2nd_grps)
selected_2nd_grps_df <- unique(selected_2nd_grps)
View(selected_2nd_grps_df)
selected_2nd_grps_df <- unique(selected_2nd_grps$SECONDARY_CLASSIFICATION)
selected_2nd_grps <- as.data.frame(grp_info_df[grp_info_df$SELECTED == 1,c(1,3)])
unselected_2nd_grps <- as.data.frame(grp_info_df[grp_info_df$SELECTED == 0,c(1,3)])
selected_2nd_grps_df <- unique(selected_2nd_grps)
View(selected_2nd_grps_df)
selected_2nd_grps <- as.data.frame(grp_info_df[grp_info_df$SELECTED == 1,c(3)])
unselected_2nd_grps <- as.data.frame(grp_info_df[grp_info_df$SELECTED == 0,c(3)])
selected_2nd_grps_df <- unique(selected_2nd_grps)
unselected_2nd_grps_df <- unique(unselected_2nd_grps)
View(unselected_2nd_grps_df)
final_df <- grp_info_df[unique(grp_info_df$SECONDARY_CLASSIFICATION),]
unique(data_df$Selected_Grps)
grp_info_df <- read.xlsx("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Data/Code_Groups/Val_Quan_Final SecondRoot List and NDC.xlsx",sheet = 1)
final_df <- grp_info_df[unique(grp_info_df$SECONDARY_CLASSIFICATION),]
View(grp_info)
grp_info_df <- read.xlsx("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Data/Code_Groups/Val_Quan_Final SecondRoot List and NDC.xlsx",sheet = 1)
grp_info_df$SELECTED <- NA
for (i in 1:nrow(grp_info_df)){
cur_group <- grp_info_df$SECONDARY_CLASSIFICATION[i]
if (cur_group %in% data_df$Selected_Grps){
grp_info_df$SELECTED[i] <- 1
}else{
grp_info_df$SELECTED[i] <- 0
}
}
final_df <- grp_info_df[unique(grp_info_df$SECONDARY_CLASSIFICATION),c(3,6)]
View(final_df)
unique(grp_info_df$SECONDARY_CLASSIFICATION)
duplicated(grp_info_df)
duplicated(grp_info_df[,c("SECONDARY_CLASSIFICATION")])
grp_info_df <- grp_info_df[!duplicated(grp_info_df[,c("SECONDARY_CLASSIFICATION")]),]
View(grp_info_df)
grp_info_df$SELECTED <- NA
for (i in 1:nrow(grp_info_df)){
cur_group <- grp_info_df$SECONDARY_CLASSIFICATION[i]
if (cur_group %in% data_df$Selected_Grps){
grp_info_df$SELECTED[i] <- 1
}else{
grp_info_df$SELECTED[i] <- 0
}
}
final_df <- grp_info_df[,c(3,6)]
View(final_df)
nrow(final_df)
write.csv(final_df, "/Users/lucasliu/Desktop/Selected_Drug_Group.csv")
write.csv(final_df, "/Users/lucasliu/Desktop/SECONDARY_DRUG_GRP.csv",row.names = F)
data_df <- read.xlsx("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/10H_Selected_Grps/WithPossibleMonthsHasNoCodes/Selected_VAL2ndDrug_Unique_Grps.xlsx",sheet = 1)
data_df$Selected_Grps <- gsub("VAL_2ND_","",data_df$Selected_Grps)
grp_info_df <- read.xlsx("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Data/Code_Groups/Val_Quan_Final SecondRoot List and NDC.xlsx",sheet = 1)
grp_info_df <- grp_info_df[!duplicated(grp_info_df[,c("SECONDARY_CLASSIFICATION")]),] #only keep unique 2nd groups
grp_info_df$INCLUDED <- NA
for (i in 1:nrow(grp_info_df)){
cur_group <- grp_info_df$SECONDARY_CLASSIFICATION[i]
if (cur_group %in% data_df$Selected_Grps){
grp_info_df$INCLUDED[i] <- 1
}else{
grp_info_df$INCLUDED[i] <- 0
}
}
final_df <- grp_info_df[,c(3,6)]
write.csv(final_df, "/Users/lucasliu/Desktop/SECONDARY_DRUG_GRP.csv",row.names = F)
