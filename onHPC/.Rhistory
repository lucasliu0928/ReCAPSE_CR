}
SBCE_col <- "SBCE_Excluded_DeathPts"  #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
pts_level_char_df <- read.xlsx(paste0(data_dir1,"9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1,sep.names = " ")
#'@NOTE: Some patient who died and also get other 2nd event(1st recur), ttey are still kept,
#'Only exclude patient who has sole event = death
if (SBCE_col == "SBCE_Excluded_DeathPts"){
idxes <- which(pts_level_char_df[,"Type_2nd_Event"] == "Primary1stBC_related_Death")
pts_level_char_df <- pts_level_char_df[-idxes,]
}
print("Original non-SBCE vs SBCE : ")
table(pts_level_char_df[,SBCE_col]) #16917  1322 or 17054  1185  or
SBCE_col
#'@NOTE: Some patient who died and also get other 2nd event(1st recur), ttey are still kept,
#'Only exclude patient who has sole event = death
if (SBCE_col == "SBCE_Excluded_DeathPts"){
idxes <- which(pts_level_char_df[,"Type_2nd_Event"] == "Primary1stBC_related_Death")
pts_level_char_df <- pts_level_char_df[-idxes,]
SBCE_col <- "SBCE"
}
print("Original non-SBCE vs SBCE : ")
table(pts_level_char_df[,SBCE_col]) #16917  1322 or 17054  1185  or
pts_level_char_df <- read.xlsx(paste0(data_dir1,"9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1,sep.names = " ")
#'@NOTE: Some patient who died and also get other 2nd event(1st recur), ttey are still kept,
#'Only exclude patient who has sole event = death
if (SBCE_col == "SBCE_Excluded_DeathPts"){
idxes <- which(pts_level_char_df[,"Type_2nd_Event"] == "Primary1stBC_related_Death")
pts_level_char_df <- pts_level_char_df[-idxes,]
SBCE_col <- "SBCE"
}
print("Original non-SBCE vs SBCE : ")
table(pts_level_char_df[,SBCE_col]) #16917  1322 or 17054  1185  or
################################################################################
#4. Pts char
################################################################################
pts_level_char_df <- read.xlsx(paste0(data_dir1,"9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1,sep.names = " ")
#'@NOTE: Some patient who died and also get other 2nd event(1st recur), ttey are still kept,
#'Only exclude patient who has sole event = death
if (SBCE_col == "SBCE_Excluded_DeathPts"){
idxes <- which(pts_level_char_df[,"Type_2nd_Event"] == "Primary1stBC_related_Death")
pts_level_char_df <- pts_level_char_df[-idxes,]
SBCE_col <- "SBCE"
}
SBCE_col
SBCE_col <- "SBCE_Excluded_DeathPts"  #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
#'@NOTE: Some patient who died and also get other 2nd event(1st recur), ttey are still kept,
#'Only exclude patient who has sole event = death
if (SBCE_col == "SBCE_Excluded_DeathPts"){
idxes <- which(pts_level_char_df[,"Type_2nd_Event"] == "Primary1stBC_related_Death")
pts_level_char_df <- pts_level_char_df[-idxes,]
SBCE_col <- "SBCE"
}
print("Original non-SBCE vs SBCE : ")
table(pts_level_char_df[,SBCE_col]) #16917  1322 or 17054  1185  or
table(pts_level_char_df[,"SBCE_Excluded_DeathPts"]) #16917  1322 or 17054  1185  or
table(pts_level_char_df[,"SBCE_Excluded_DeathLabel"]) #16917  1322 or 17054  1185  or
################################################################################
#2. Get SBCE and non-SBCE IDs
################################################################################
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df[,SBCE_col] == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df[,SBCE_col] == 0)])
original_noSBCE_toSBCEratio <- round(length(nosbce_pt_Ids)/length(sbce_pt_Ids)) #10: 1
original_noSBCE_toSBCEratio
16917/1185
length(nosbce_pt_Ids)/length(sbce_pt_Ids)
16917+1185
table(pts_level_char_df$Type_2nd_Event)
892+14
906+4
910/1185
275/1185
13539/943
3378/242
16917 + 1185
source("Recapse_Ultility.R")
add_ccs_descrip_func <- function(in_data,discrp_dir){
#Load CCS cateogry names
Diag_grp <- read.xlsx(paste0(discrp_dir,"Unique_Diag_And_Groups_inALLClaims.xlsx"), sheet = 1)
Proc_grp <- read.xlsx(paste0(discrp_dir,"Unique_Proc_And_Groups_inALLClaims.xlsx"), sheet = 1)
#Add description
in_data[,"CCS_descrption"] <- NA
for(i in 1:nrow(in_data)){
if (i %% 50 == 0){print(i)}
curr_feature <- rownames(in_data)[i]
if (grepl("CCS",curr_feature) == T){
curr_feature <- gsub("CCS_|time_since_|time_until_|cumul_ratio_","",curr_feature)
res <- unlist(strsplit(curr_feature,split = "_"))
curr_ccs_code <- res[2]
curr_ccs_type <- res[1]
if (is.na(curr_ccs_code) == F & curr_ccs_code != "NA"){
#Check if diag or proc
if (curr_ccs_type == "DIAG"){
curr_discrip <- find_ccs_discrption_func(Diag_grp,curr_ccs_code)
}else if(curr_ccs_type == "PROC"){
curr_discrip <- find_ccs_discrption_func(Proc_grp,curr_ccs_code)
}
#check if multiple, if so keep the longest one
n_disc <- length(curr_discrip)
n_char <- nchar(curr_discrip)
if (n_disc > 1){
curr_discrip <- curr_discrip[which(n_char == max(n_char))][1] #if still multiple keep the first one
}else{
curr_discrip <- curr_discrip
}
}else{
curr_discrip <- NA
}
}else{
curr_discrip <- NA
}
in_data[i,"CCS_descrption"] <- curr_discrip #if multiple has the same nchar, use the first one
}
return(in_data)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
feature_set_name <- "CCSandVAL2nd"
code_feature_names <- "CCS|VAL_2ND"
#'@NOTE: use SBCE ID folder to get IDS, labels are not used for PCA
SBCE_ID_folder <- "SBCE_Excluded_DeathPts" #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
#data dir
data_dir  <- paste0(proj_dir, "11E_AllPTs_ModelReadyData/",feature_set_name,"/")
data_dir2  <- paste0(proj_dir, "11F_TrainTestIDs/",SBCE_ID_folder,"/")
data_dir3 <- paste0(proj_dir, "0_Codes/Grouped_CleanUniqueCodes/")
newout <- paste0("12A_PCA_VarContri_Train/",feature_set_name,"/",SBCE_ID_folder,"/")
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
########################################################################################################
#1. Get model data for train data only
########################################################################################################
#A. Load all pts model data
load(file = paste0(data_dir, "All_PTS_ModelReadyData.rda"))
#B. Load train patient IDs
train_ID_df <- read.xlsx(paste0(data_dir2,"train_ID_withLabel.xlsx"),sheet = 1)
train_ID_df$study_id <- paste0("ID",train_ID_df$study_id)
train_IDs <- unique(train_ID_df[,"study_id"])
#C.Updated model data for train data only
model_data <- model_data[model_data[,"study_id"] %in% train_IDs,]
963687/32473
963687 + 32473
source("Recapse_Ultility.R")
compute_sp_label_ratio <- function(in_data){
label_tb <- table(in_data[,"Label"])
ct_total <- nrow(in_data)
ct_pre   <- label_tb["Pre"]
ct_post  <- label_tb["Post"]
neg_post_ratio <- round(ct_pre/ct_post,10)
ct_tb <- data.frame("Total" = ct_total,"Pre"=ct_pre,"Post"=ct_post,"Ratio"=neg_post_ratio)
rownames(ct_tb) <- NULL
return(ct_tb)
}
plot_ratio_vs_perc_func <- function(perc_ratio_table,x_col, y_col,x_lab,y_lab,ylim_min){
p <- ggplot(perc_ratio_table, aes_string(x=x_col, y=y_col)) +
geom_point(aes(size=2),color = "darkblue") +
ylab(y_lab) +
xlab(x_lab) +
theme(legend.position = "none",
axis.text =  element_text(size = 16),
axis.title = element_text(size = 16)) +
ylim(ylim_min,round(max(perc_ratio_table[,y_col]))) +
geom_smooth(method='loess', formula= y~x)
return(p)
}
find_final_thres_func <- function(perc_ratio_table,x_col,y_col, turning_pt_x, turning_pt_y, var_name1, var_name2,var_name3){
tb_idxes <- which(round(perc_ratio_table[,x_col],7) == turning_pt_x &
round(perc_ratio_table[,y_col],5) ==  turning_pt_y)
#Best threshold hold
best_th1 <- perc_ratio_table[tb_idxes,var_name1]
best_th2 <- perc_ratio_table[tb_idxes,var_name2]
best_th3 <- perc_ratio_table[tb_idxes,var_name3]
#Store them in a dataframe
thresholds <- c(best_th1,best_th2,best_th3)
vars <- c(var_name1,var_name2,var_name3)
best_th_df <- cbind.data.frame(vars,thresholds)
return(best_th_df)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
SBCE_col    <- "SBCE_Excluded_DeathPts" #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
feature_set_name <- "CCSandVAL2nd"
#data dir
data_dir  <- paste0(proj_dir,"12B_TopPCAFeatureData_Train/",feature_set_name,"/",SBCE_col,"/")
newout <- paste0("12D_OBVsSample_Thresholds/",feature_set_name,"/",SBCE_col,"/")
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
########################################################################################################
#1. Load all pts model data with four top features
########################################################################################################
#1A. Load data
load(file = paste0(data_dir, "Top4PCAFeature_ModelReadyData_Train.rda"))
963687+32473
#2B. Original NEG POS ratio
compute_sp_label_ratio(model_data_4f)
########################################################################################################
#2. OBV NEGTIVES
#Find best combination of thresholds for features for NEGs
# Best:
#1. good precision of selected negative samples (Proportion of neg is high)
#2  neg:pos ratio of after exclusion is OK (more balanced)
########################################################################################################
#2A. Get threshold list by checking the distribution plot
#Anyone with values < thres_list is considered as obv negtives
thres1_list <- seq(0,0.2,0.1) #CCS 227
thres2_list <- seq(24,48,4)   #Month since dx
#2B.Get precisions and neg:pos ratio for each combination of threshold
n_thres1 <- length(thres1_list)
n_thres2 <- length(thres2_list)
n_comb   <- n_thres1*n_thres2
print(n_comb)
prec_ratio_tb <- as.data.frame(matrix(NA, nrow = n_comb,ncol = 6))
colnames(prec_ratio_tb) <- c("Threshold_PROC202",
"Threshold_PROC227",
"Threshold_months_since_dx",
"NEG_Percentage_SelectedSamples", #this is also the precision of negtives in the sample
"NEGtoPOS_Ratio_SelectedSamples",
"NEGtoPOS_Ratio_AfterExclusion")
ct <- 1
for (i in 1:length(thres1_list)){
if(i %% 2 == 0){print(i)}
thres1 <- thres1_list[i]
for (j in 1:length(thres2_list)){
thres2 <- thres2_list[j]
prec_ratio_tb[ct,"Threshold_PROC202"] <- paste0("=","-1")
prec_ratio_tb[ct,"Threshold_PROC227"] <- paste0("<",thres1)
prec_ratio_tb[ct,"Threshold_months_since_dx"] <- paste0("<",thres2)
#Data to be treated as negatives
sample1_idxes <- which(model_data_4f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_4f[,"cumul_ratio_CCS_PROC_227"] < thres1 |
model_data_4f[,"months_since_dx"] < thres2 )
sample1_data  <- model_data_4f[sample1_idxes,]
sp_res        <- compute_sp_label_ratio(sample1_data)
#Presicion of negatives of selected samples (i.e,For this samples, we predict them all as "pre")
prec_ratio_tb[ct,"NEG_Percentage_SelectedSamples"] <- sp_res["Pre"]/(sp_res["Pre"] + sp_res["Post"])
#Pre to post ratio
prec_ratio_tb[ct,"NEGtoPOS_Ratio_SelectedSamples"] <- sp_res["Ratio"]
#after
after_data <- model_data_4f[-sample1_idxes,]
after_res <- compute_sp_label_ratio(after_data)
prec_ratio_tb[ct,"NEGtoPOS_Ratio_AfterExclusion"] <- after_res["Ratio"]
ct <- ct + 1
}
}
##2C. Plot neg:pos ratio vs. percentage of negative after exclusion
x_col = "NEG_Percentage_SelectedSamples"
y_col = "NEGtoPOS_Ratio_AfterExclusion"
x_lab = "Precision of Negatives (Percentage of Negatives) \n in Selected Samples"
y_lab = "Negative to Positive Ratio After Exclusion \n (non-obvious cases)"
ylim_min = 19
p <- plot_ratio_vs_perc_func(prec_ratio_tb, x_col,y_col,x_lab,y_lab,ylim_min)
print(p)
p <- plot_ratio_vs_perc_func(prec_ratio_tb, x_col,y_col,x_lab,y_lab,ylim_min)
png(paste0(outdir,"Precision_Ratio_Plot_NEG.png"),res = 150,width = 1000,height = 800)
print(p)
dev.off()
View(prec_ratio_tb)
#2D. Find the best thresholds by checking the figure
if (SBCE_col == "SBCE_Excluded_DeathLabel" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <-  0.9812913
turning_pt_y <-  19.94299
}else if (SBCE_col == "SBCE" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.9814992
turning_pt_y <- 19.80003
}else if (SBCE_col == "SBCE_Excluded_DeathPts" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.9826699
turning_pt_y <- 19.69092
}
var_name1 <- "Threshold_PROC202"
var_name2 <- "Threshold_PROC227"
var_name3 <- "Threshold_months_since_dx"
thres_neg <- find_final_thres_func(prec_ratio_tb, x_col,y_col,turning_pt_x, turning_pt_y,var_name1, var_name2,var_name3)
thres_neg
thres_neg <- find_final_thres_func(prec_ratio_tb, x_col,y_col,turning_pt_x, turning_pt_y,var_name1, var_name2,var_name3)
write.csv(thres_neg,paste0(outdir,"Threshold_NEG.csv"))
########################################################################################################
#3. OBV Postives
#######################################################################################################
#3A. Get threshold list by checking the distribution plot
thres1_lower <- seq(1,2,0.5)      #CCS 227
thres1_upper <- seq(3,4,0.5)      #CCS 227
thres2_lower <- seq(48,60,4)      #month since dx
thres2_upper <- seq(78,90,4)      #month since dx
thres3_lower <- seq(0.1,0.2,0.05) #CCS 202
thres3_upper <- seq(0.3,0.4,0.05) #CCS 202
#3B.Get precisions and neg:pos ratio for each combination of threshold
n_thres1 <- length(thres1_lower)
n_thres2 <- length(thres2_lower)
n_thres3 <- length(thres3_lower)
n_comb   <- n_thres1*n_thres2
print(n_comb)
prec_ratio_tb <- as.data.frame(matrix(NA, nrow = n_comb,ncol = 6))
colnames(prec_ratio_tb) <- c("Threshold_PROC202","Threshold_PROC227","Threshold_months_since_dx",
"POS_Percentage_SelectedSamples", #this is also the precision of pos in the sample
"NEGtoPOS_Ratio_SelectedSamples",
"NEGtoPOS_Ratio_AfterExclusion")
ct <- 1
for (i in 1:n_thres1){
if(i %% 1 == 0){print(i)}
thres1_l <- thres1_lower[i]
thres1_u <- thres1_upper[i]
for (j in 1:n_thres2){
thres2_l <- thres2_lower[j]
thres2_u <- thres2_upper[j]
for (k in 1:n_thres3){
thres3_l <- thres3_lower[k]
thres3_u <- thres3_upper[k]
prec_ratio_tb[ct,"Threshold_PROC202"] <- paste0(thres3_l ," < V < ",thres3_u)
prec_ratio_tb[ct,"Threshold_PROC227"] <- paste0(thres1_l ," < V < ",thres1_u)
prec_ratio_tb[ct,"Threshold_months_since_dx"] <-  paste0(thres2_l ," < V < ",thres2_u)
#Data to be treated as negatives
sample1_idxes <- which((model_data_4f[,"cumul_ratio_CCS_PROC_202"] >  thres3_l  & model_data_4f[,"cumul_ratio_CCS_PROC_202"] <  thres3_u )|
(model_data_4f[,"cumul_ratio_CCS_PROC_227"] > thres1_l & model_data_4f[,"cumul_ratio_CCS_PROC_227"] < thres1_u) |
(model_data_4f[,"months_since_dx"] > thres2_l & model_data_4f[,"months_since_dx"] < thres2_u))
sample1_data  <- model_data_4f[sample1_idxes,]
sp_res        <- compute_sp_label_ratio(sample1_data)
#Presicion of postives of selected samples (i.e,For this samples, we predict them all as "post")
prec_ratio_tb[ct,"POS_Percentage_SelectedSamples"] <- sp_res["Post"]/(sp_res["Pre"] + sp_res["Post"])
#Pre to post ratio
prec_ratio_tb[ct,"NEGtoPOS_Ratio_SelectedSamples"] <- sp_res["Ratio"]
#after
after_data <- model_data_4f[-sample1_idxes,]
after_res <- compute_sp_label_ratio(after_data)
prec_ratio_tb[ct,"NEGtoPOS_Ratio_AfterExclusion"] <- after_res["Ratio"]
ct <- ct + 1
}
}
}
##3C. Plot neg:pos ratio vs. percentage of postive after exclusion
x_col = "POS_Percentage_SelectedSamples"
y_col = "NEGtoPOS_Ratio_AfterExclusion"
x_lab = "Precision of Postives (Percentage of Postives) \n in Selected Samples"
y_lab = "Negative to Positive Ratio After Exclusion \n (non-obvious cases)"
ylim_min = 33
p <- plot_ratio_vs_perc_func(prec_ratio_tb, x_col,y_col,x_lab,y_lab,ylim_min)
png(paste0(outdir,"Precision_Ratio_Plot_POS.png"),res = 150,width = 1000,height = 800)
print(p)
dev.off()
#3D. Find the best thresholds by checking the figure
if (SBCE_col == "SBCE_Excluded_DeathLabel" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417078
turning_pt_y <- 35.81769
}else if (SBCE_col == "SBCE" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417920
turning_pt_y <- 34.18392
}else if (SBCE_col == "SBCE_Excluded_DeathPts" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.04257926
turning_pt_y <- 34.04217
}
var_name1 <- "Threshold_PROC202"
var_name2 <- "Threshold_PROC227"
var_name3 <- "Threshold_months_since_dx"
thres_pos <- find_final_thres_func(prec_ratio_tb, x_col,y_col,turning_pt_x, turning_pt_y,var_name1, var_name2,var_name3)
#3D. Find the best thresholds by checking the figure
if (SBCE_col == "SBCE_Excluded_DeathLabel" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417078
turning_pt_y <- 35.81769
}else if (SBCE_col == "SBCE" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417920
turning_pt_y <- 34.18392
}else if (SBCE_col == "SBCE_Excluded_DeathPts" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.04257926
turning_pt_y <- 34.04217
}
var_name1 <- "Threshold_PROC202"
var_name2 <- "Threshold_PROC227"
var_name3 <- "Threshold_months_since_dx"
thres_pos <- find_final_thres_func(prec_ratio_tb, x_col,y_col,turning_pt_x, turning_pt_y,var_name1, var_name2,var_name3)
#3D. Find the best thresholds by checking the figure
if (SBCE_col == "SBCE_Excluded_DeathLabel" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417078
turning_pt_y <- 35.81769
}else if (SBCE_col == "SBCE" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417920
turning_pt_y <- 34.18392
}else if (SBCE_col == "SBCE_Excluded_DeathPts" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0425793
turning_pt_y <- 34.04217
}
var_name1 <- "Threshold_PROC202"
var_name2 <- "Threshold_PROC227"
var_name3 <- "Threshold_months_since_dx"
thres_pos <- find_final_thres_func(prec_ratio_tb, x_col,y_col,turning_pt_x, turning_pt_y,var_name1, var_name2,var_name3)
thres_pos
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/12D_IdentifyOBVs4_FindSelectionCriteria_Train.R")
74971/3833
292052
/14030
292052/14030
78804122760 +45502+
0
78804+122760 +45502+
0
505537 + 184541 + 306082
292052 + 14030
271976 + 13061
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/18_ComputeDispStats.R")
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/18_ComputeDispStats.R")
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
SBCE_col    <- "SBCE_Excluded_DeathPts" #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
feature_set_name <- "CCSandVAL2nd"
if ((SBCE_col == "SBCE") | (SBCE_col == "SBCE_Excluded_DeathPts")){
label_col   <- "y_PRE_OR_POST_2ndEvent"
}else{
label_col   <- "y_PRE_OR_POST_2ndEvent_ExcludedDeath"
}
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
data_dir2  <- paste0(proj_dir,"12E_OBVandNONOBV_SamplesIDs/",feature_set_name,"/",SBCE_col,"/")
newout <- paste0("18_Discrip_Statistics/",feature_set_name,"/",SBCE_col,"/")
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
################################################################################
#1.Load all train and test IDs with flag for obv pos/neg or non obv
################################################################################
train_res <- load_obsSample_IDs(data_dir2,"Train",pt_char_df)
all_train_df <- train_res[[1]]
all_train_pt_ids <- train_res[[2]] #14592
all_train_sp_ids <- train_res[[3]] #999117
test_res <- load_obsSample_IDs(data_dir2,"Test",pt_char_df)
all_test_df <- test_res[[1]]
all_test_pt_ids <- test_res[[2]] #3647
test_res <- load_obsSample_IDs(data_dir2,"Test",pt_char_df)
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/18_ComputeDispStats.R")
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
SBCE_col    <- "SBCE_Excluded_DeathPts" #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
feature_set_name <- "CCSandVAL2nd"
if ((SBCE_col == "SBCE") | (SBCE_col == "SBCE_Excluded_DeathPts")){
label_col   <- "y_PRE_OR_POST_2ndEvent"
}else{
label_col   <- "y_PRE_OR_POST_2ndEvent_ExcludedDeath"
}
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
data_dir2  <- paste0(proj_dir,"12E_OBVandNONOBV_SamplesIDs/",feature_set_name,"/",SBCE_col,"/")
newout <- paste0("18_Discrip_Statistics/",feature_set_name,"/",SBCE_col,"/")
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
################################################################################
#1.Load all train and test IDs with flag for obv pos/neg or non obv
################################################################################
train_res <- load_obsSample_IDs(data_dir2,"Train",pt_char_df)
all_train_df <- train_res[[1]]
all_train_pt_ids <- train_res[[2]] #14592
all_train_sp_ids <- train_res[[3]] #999117
test_res <- load_obsSample_IDs(data_dir2,"Test",pt_char_df)
all_test_df <- test_res[[1]]
all_test_pt_ids <- test_res[[2]] #3647
all_test_sp_ids <- test_res[[3]] #248732
all_analysis_pt_ids <-c(all_train_pt_ids,all_test_pt_ids) #18239
all_analysis_sp_ids <-c(all_train_sp_ids,all_test_sp_ids) #1247849
################################################################################
#3.Fiter pt char df for anlaysis Ids
################################################################################
pt_char_df <- pt_char_df[which(pt_char_df[,"study_id"] %in% all_analysis_pt_ids),]
length(all_analysis_pt_ids)
#4.(Sample Level) Report pre/post status and number of sbce/nonsbce patients
#A. All Training
#B. All Testing
#C. obvious neg training
#D. obvious pos training
#E. non-obvious training
#F. obvious neg test
#G. obvious pos test
#H. non-obvious test
################################################################################
train_num_df1 <- compute_prepost_and_sbcepts_func(all_train_df, SBCE_col)
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/18_ComputeDispStats.R")
14030*2
292052 + 14030
1322-1185
