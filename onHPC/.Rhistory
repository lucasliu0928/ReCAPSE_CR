if (curr_count >= 1){ #if count of group in current month is >=1
time_since_df[i,j] <- 0
most_recent_month <- curr_month #update most recent month
}else { #if count og group in current moneth is 0
time_since_df[i,j] <- curr_month - most_recent_month
}
}
}
}
time_since_df[which(is.na(time_since_df)==T,arr.ind = T)] <- -1 #recode NA to -1, NAs is from skiping columns
time_since_df[which(time_since_df== "-Inf",arr.ind = T)] <- -1 #recode -INF to -1 for months that has never seen a code
return(time_since_df)
}
#the total number of occurrences in each patient up to the time in question of that grouping divided by total elapsed time
pt_perMonth_df <- curr_grp_f_df
#reoder and add month sqeuence
pt_perMonth_df <- pt_perMonth_df[order(ymd(pt_perMonth_df[,"Month_Start"])),]  #sort pt data by month
#get the month index as the actuall month difference to the first month,  #Use interger as month sequence for easier computation
pt_perMonth_df$Month_Index <-   abs(interval(ymd(pt_perMonth_df[,"Month_Start"]), ymd(pt_perMonth_df[1,"Month_Start"])) %/% months(1)) + 1
#relocate cols
pt_perMonth_df <- pt_perMonth_df %>% relocate(Month_Index, .after = Month_Start)
#'@NEW Find  the columns has all 0s (no months of this pts has the code group)
count_forallgrps    <- colSums(pt_perMonth_df[,4:ncol(pt_perMonth_df)])
colnames_toskip     <- names(which(count_forallgrps == 0))  #columns to skip in the following computation
colindex_toskip     <- which(colnames(pt_perMonth_df) %in% colnames_toskip)
cumul_ratio_df <-as.data.frame(matrix(NA, nrow = nrow(pt_perMonth_df),ncol =ncol(pt_perMonth_df)))
colnames(cumul_ratio_df) <- colnames(pt_perMonth_df)
colnames(cumul_ratio_df)[4:ncol(cumul_ratio_df)] <- paste0("cumul_ratio_",colnames(cumul_ratio_df)[4:ncol(cumul_ratio_df)])
#code group col started at index 4
for(j in 4:ncol(cumul_ratio_df)){ #for each code group
curr_cum_count <- 0 #inital cumalitive count as 0
if (!j %in% colindex_toskip){ #'@NEW
for (i in 1:nrow(pt_perMonth_df)){ #for each month
#get month data and assign to the new dataframe
curr_month_df <- pt_perMonth_df[i,]
cumul_ratio_df[i,"study_id"] <- curr_month_df[,"study_id"]
cumul_ratio_df[i,"Month_Start"] <- curr_month_df[,"Month_Start"]
cumul_ratio_df[i,"Month_Index"] <- curr_month_df[,"Month_Index"]
#get count and month index
curr_count <- curr_month_df[,j]
curr_month <- curr_month_df[,"Month_Index"]
#cumalative count
curr_cum_count <- curr_cum_count + curr_count
cumul_ratio_df[i,j] <- round(curr_cum_count/curr_month,4)
}
}
}
cumul_ratio_df
sum(curr_transf_df[,-which(colnames(curr_transf_df) %in% c("study_id", "Month_Start","Month_Index"))])
curr_transf_df2 <- apply_code_transforamtion_func(curr_grp_f_df)
sum(curr_transf_df[,-which(colnames(curr_transf_df) %in% c("study_id", "Month_Start","Month_Index"))])
source("Recapse_Ultility.R")
curr_transf_df2 <- apply_code_transforamtion_func(curr_grp_f_df)
sum(curr_transf_df[,-which(colnames(curr_transf_df) %in% c("study_id", "Month_Start","Month_Index"))])
system.time(curr_transf_df2 <- apply_code_transforamtion_func(curr_grp_f_df))
20000*7
140000/60
2333/60
View(curr_transf_df2)
#remove redudant month index
index_toremove <- which(colnames(curr_transf_df) %in% c("study_id","Month_Start","Month_Index"))
index_toremove
#remove redudant month index
index_toremove <- which(colnames(curr_transf_df) %in% c("study_id","Month_Start","Month_Index"))
index_toremove <- index_toremove[3:length(index_toremove)]
index_toremove
curr_transf_df <- curr_transf_df[,-index_toremove]
outdir
write.xlsx(curr_transf_df,paste0(outdir,"ID",curr_id,"_Transf_Features.xlsx"))
#get transformation data
system.time(curr_transf_df <- apply_code_transforamtion_func(curr_grp_f_df))
20000/3600
18/400
400/18
0.045*18000
810/60
source("Recapse_Ultility.R")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "11A_ModelReady_GrpFatures/WithPossibleMonthsHasNoCodes/")
data_dir2  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir   <- paste0(proj_dir, "11C_ModelReady_TransformFatures/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.get grp feature files
################################################################################
grpfeature_files <- list.files(data_dir1)
################################################################################
#2.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir2,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
analysis_IDs
length(analysis_IDs)
################################################################################
#2.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir4,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
source("Recapse_Ultility.R")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
#proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "11A_ModelReady_GrpFatures/WithPossibleMonthsHasNoCodes/")
data_dir2  <- paste0(proj_dir, "11B_ModelReady_CharFatures/WithPossibleMonthsHasNoCodes/")
data_dir3  <- paste0(proj_dir, "11C_ModelReady_TransformFatures/WithPossibleMonthsHasNoCodes/")
data_dir4  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir   <- paste0(proj_dir, "11D_ModelReady_CombFatures/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.get grp feature and trans feature files
################################################################################
grpfeature_files <- list.files(data_dir1)
transfeature_files <- list.files(data_dir2)
################################################################################
#2.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir4,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
data_dir4  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
################################################################################
#2.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir4,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "11A_ModelReady_GrpFatures/WithPossibleMonthsHasNoCodes/")
data_dir2  <- paste0(proj_dir, "11B_ModelReady_CharFatures/WithPossibleMonthsHasNoCodes/")
data_dir3  <- paste0(proj_dir, "11C_ModelReady_TransformFatures/WithPossibleMonthsHasNoCodes/")
data_dir4  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir   <- paste0(proj_dir, "11D_ModelReady_CombFatures/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.get grp feature and trans feature files
################################################################################
grpfeature_files <- list.files(data_dir1)
transfeature_files <- list.files(data_dir2)
################################################################################
#2.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir4,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
########################################################################################################################
#Use the following code to run in case out of memory when procssing all at one time
########################################################################################################################
ID_processed <- as.numeric(gsub("_Comb_Features.xlsx|ID","",list.files(outdir)))
if (length(ID_processed) != 0 ){
analysis_IDs <- analysis_IDs[-which(analysis_IDs %in% ID_processed)]
}
print(length(analysis_IDs))
################################################################################
#1.Load all char feature df
################################################################################
All_Char_df <- read.xlsx(paste0(data_dir4,"All_Binary_Chars.xlsx"),sheet = 1)
################################################################################
#1.Load all char feature df
################################################################################
All_Char_df <- read.xlsx(paste0(data_dir2,"All_Binary_Chars.xlsx"),sheet = 1)
################################################################################
#1.Load all char feature df
################################################################################
All_Char_df <- read.xlsx(paste0(data_dir2,"All_Binary_Chars.xlsx"),sheet = 1)
################################################################################
#1.Load all char feature df
################################################################################
All_Char_df <- read.xlsx(paste0(data_dir2,"All_Binary_Chars.xlsx"))
source("Recapse_Ultility.R")
library(fastDummies)
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Month_Level/MonthChar_WithPossibleMonthsHasNoCodes/")
outdir   <- paste0(proj_dir, "11B_ModelReady_CharFatures/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.get original char files
################################################################################
perMonth_char_files <- list.files(data_dir1)
perMonth_char_files
########################################################################################################################
#1.Combine all pts binary char
#2. Select features
#3. Recode feature to binary columns
##'@TODO: ADD "DAJCC_T" ,"DAJCC_M","DAJCC_N" and num_claims later
########################################################################################################################
selected_charfeatures <- c("Age","months_since_dx","Race" , "Site" , "Stage","Grade",
"Laterality" ,"er_stat","pr_stat",	"her2_stat",
"surg_prim_site", "reg_age_at_dx",	"reg_nodes_exam",
"reg_nodes_pos",	"cs_tum_size", "cs_tum_ext",
"cs_tum_nodes", "regional")
outcome_label <- "y_PRE_OR_POST_2ndEvent"
other_cols <- c("study_id","Month_Start")
col_toconvert <- c("Race","Site","Stage","Grade","Laterality","er_stat","pr_stat","her2_stat",
"surg_prim_site")
#1.Combine all pts df
#all_char_df_list <- lapply(paste0(data_dir1,perMonth_char_files), read.xlsx)
all_char_df_list <- mclapply(paste0(data_dir1,perMonth_char_files), mc.cores= numCores, function(z){read.xlsx(z, sheet = 1)})
all_char_df <- do.call(rbind,all_char_df_list)
#2. Select features
updated_all_char_df <- all_char_df[,c(other_cols,selected_charfeatures,outcome_label)]
#3.covert to binary
all_binary_char_df <- dummy_cols(updated_all_char_df, remove_first_dummy = FALSE,select_columns = col_toconvert)
#remove original columns
all_binary_char_df <- all_binary_char_df[, -which(colnames(all_binary_char_df) %in% col_toconvert)]
write.xlsx(all_binary_char_df,paste0(outdir,"All_Binary_Chars.xlsx"))
source("Recapse_Ultility.R")
library(fastDummies)
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Month_Level/MonthChar_WithPossibleMonthsHasNoCodes/")
outdir   <- paste0(proj_dir, "11B_ModelReady_CharFatures/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.get original char files
################################################################################
perMonth_char_files <- list.files(data_dir1)
########################################################################################################################
#1.Combine all pts binary char
#2. Select features
#3. Recode feature to binary columns
##'@TODO: ADD "DAJCC_T" ,"DAJCC_M","DAJCC_N" and num_claims later
########################################################################################################################
selected_charfeatures <- c("Age","months_since_dx","Race" , "Site" , "Stage","Grade",
"Laterality" ,"er_stat","pr_stat",	"her2_stat",
"surg_prim_site", "reg_age_at_dx",	"reg_nodes_exam",
"reg_nodes_pos",	"cs_tum_size", "cs_tum_ext",
"cs_tum_nodes", "regional")
outcome_label <- "y_PRE_OR_POST_2ndEvent"
other_cols <- c("study_id","Month_Start")
col_toconvert <- c("Race","Site","Stage","Grade","Laterality","er_stat","pr_stat","her2_stat",
"surg_prim_site")
#1.Combine all pts df
#all_char_df_list <- lapply(paste0(data_dir1,perMonth_char_files), read.xlsx)
all_char_df_list <- mclapply(paste0(data_dir1,perMonth_char_files), mc.cores= numCores, function(z){read.xlsx(z, sheet = 1)})
all_char_df <- do.call(rbind,all_char_df_list)
#2. Select features
updated_all_char_df <- all_char_df[,c(other_cols,selected_charfeatures,outcome_label)]
#3.covert to binary
all_binary_char_df <- dummy_cols(updated_all_char_df, remove_first_dummy = FALSE,select_columns = col_toconvert)
#remove original columns
all_binary_char_df <- all_binary_char_df[, -which(colnames(all_binary_char_df) %in% col_toconvert)]
write.xlsx(all_binary_char_df,paste0(outdir,"All_Binary_Chars.xlsx"))
source("Recapse_Ultility.R")
library(fastDummies)
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Month_Level/MonthChar_WithPossibleMonthsHasNoCodes/")
outdir   <- paste0(proj_dir, "11B_ModelReady_CharFatures/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.get original char files
################################################################################
perMonth_char_files <- list.files(data_dir1)
########################################################################################################################
#1.Combine all pts binary char
#2. Select features
#3. Recode feature to binary columns
##'@TODO: ADD "DAJCC_T" ,"DAJCC_M","DAJCC_N" and num_claims later
########################################################################################################################
selected_charfeatures <- c("Age","months_since_dx","Race" , "Site" , "Stage","Grade",
"Laterality" ,"er_stat","pr_stat",	"her2_stat",
"surg_prim_site", "reg_age_at_dx",	"reg_nodes_exam",
"reg_nodes_pos",	"cs_tum_size", "cs_tum_ext",
"cs_tum_nodes", "regional")
outcome_label <- "y_PRE_OR_POST_2ndEvent"
other_cols <- c("study_id","Month_Start")
col_toconvert <- c("Race","Site","Stage","Grade","Laterality","er_stat","pr_stat","her2_stat",
"surg_prim_site")
#1.Combine all pts df
#all_char_df_list <- lapply(paste0(data_dir1,perMonth_char_files), read.xlsx)
all_char_df_list <- mclapply(paste0(data_dir1,perMonth_char_files), mc.cores= numCores, function(z){read.xlsx(z, sheet = 1)})
all_char_df <- do.call(rbind,all_char_df_list)
#2. Select features
updated_all_char_df <- all_char_df[,c(other_cols,selected_charfeatures,outcome_label)]
#3.covert to binary
all_binary_char_df <- dummy_cols(updated_all_char_df, remove_first_dummy = FALSE,select_columns = col_toconvert)
#remove original columns
all_binary_char_df <- all_binary_char_df[, -which(colnames(all_binary_char_df) %in% col_toconvert)]
write.xlsx(all_binary_char_df,paste0(outdir,"All_Binary_Chars.xlsx"))
source("Recapse_Ultility.R")
library(fastDummies)
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Month_Level/MonthChar_WithPossibleMonthsHasNoCodes/")
data_dir2  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir   <- paste0(proj_dir, "11B_ModelReady_CharFatures/WithPossibleMonthsHasNoCodes/")
################################################################################
#2.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir2,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
perMonth_char_files[1]
################################################################################
#1.get original char files
################################################################################
perMonth_char_files <- list.files(data_dir1)
perMonth_char_files[1]
perMonth_char_IDs <- gsub("_MonthChar.xlsx|ID",perMonth_char_files)
perMonth_char_IDs <- gsub("_MonthChar.xlsx|ID","",perMonth_char_files)
perMonth_char_IDs
length(perMonth_char_IDs)
################################################################################
#.Only select files for analysis IDs
################################################################################
which(perMonth_char_IDs %in% analysis_IDs)
length(perMonth_char_files)
################################################################################
#.Only select files for analysis IDs
################################################################################
perMonth_char_files <- perMonth_char_files[which(perMonth_char_IDs %in% analysis_IDs)]
length(perMonth_char_files)
source("Recapse_Ultility.R")
library(fastDummies)
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Month_Level/MonthChar_WithPossibleMonthsHasNoCodes/")
data_dir2  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir   <- paste0(proj_dir, "11B_ModelReady_CharFatures/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.get original char files
################################################################################
perMonth_char_files <- list.files(data_dir1)
perMonth_char_IDs <- gsub("_MonthChar.xlsx|ID","",perMonth_char_files)
################################################################################
#2.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir2,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
################################################################################
#.Only select files for analysis IDs
################################################################################
perMonth_char_files <- perMonth_char_files[which(perMonth_char_IDs %in% analysis_IDs)]
########################################################################################################################
#1.Combine all pts binary char
#2. Select features
#3. Recode feature to binary columns
##'@TODO: ADD "DAJCC_T" ,"DAJCC_M","DAJCC_N" and num_claims later
########################################################################################################################
selected_charfeatures <- c("Age","months_since_dx","Race" , "Site" , "Stage","Grade",
"Laterality" ,"er_stat","pr_stat",	"her2_stat",
"surg_prim_site", "reg_age_at_dx",	"reg_nodes_exam",
"reg_nodes_pos",	"cs_tum_size", "cs_tum_ext",
"cs_tum_nodes", "regional")
outcome_label <- "y_PRE_OR_POST_2ndEvent"
other_cols <- c("study_id","Month_Start")
col_toconvert <- c("Race","Site","Stage","Grade","Laterality","er_stat","pr_stat","her2_stat",
"surg_prim_site")
length(perMonth_char_files)
#1.Combine all pts df
#all_char_df_list <- lapply(paste0(data_dir1,perMonth_char_files), read.xlsx)
all_char_df_list <- mclapply(paste0(data_dir1,perMonth_char_files), mc.cores= numCores, function(z){read.xlsx(z, sheet = 1)})
all_char_df <- do.call(rbind,all_char_df_list)
#2. Select features
updated_all_char_df <- all_char_df[,c(other_cols,selected_charfeatures,outcome_label)]
length(unique(updated_all_char_df$study_id))
#3.covert to binary
all_binary_char_df <- dummy_cols(updated_all_char_df, remove_first_dummy = FALSE,select_columns = col_toconvert)
which(colnames(all_binary_char_df) %in% col_toconvert)
#remove original columns
all_binary_char_df <- all_binary_char_df[, -which(colnames(all_binary_char_df) %in% col_toconvert)]
write.xlsx(all_binary_char_df,paste0(outdir,"All_Binary_Chars.xlsx"))
outdir
which(colnames(all_binary_char_df) %in% col_toconvert)
write.csv(all_binary_char_df,paste0(outdir,"All_Binary_Chars.csv"),row.names = F)
View(all_binary_char_df)
colnames(all_binary_char_df)
write.xlsx(all_binary_char_df[1:100,],paste0(outdir,"All_Binary_Chars.xlsx"))
write.xlsx(all_binary_char_df[1:50000,],paste0(outdir,"All_Binary_Chars.xlsx"))
source("Recapse_Ultility.R")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "11A_ModelReady_GrpFatures/WithPossibleMonthsHasNoCodes/")
data_dir2  <- paste0(proj_dir, "11B_ModelReady_CharFatures/WithPossibleMonthsHasNoCodes/")
data_dir3  <- paste0(proj_dir, "11C_ModelReady_TransformFatures/WithPossibleMonthsHasNoCodes/")
data_dir4  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir   <- paste0(proj_dir, "11D_ModelReady_CombFatures/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.Load all char feature df
################################################################################
All_Char_df <- read.csv(paste0(data_dir2,"All_Binary_Chars.csv"),stringsAsFactors = F)
colnames(all_binary_char_df)
colnames(all_char_df)
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
#######################################################################
##############              Data dir                     ##############
#######################################################################
code_data_dir <- "/recapse/intermediate_data/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/recapse/data/"
outdir   <- "/recapse/intermediate_data/0_Codes/"
#local
code_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/AfterClean_UniqueCodes/"
grping_data_dir <- "/Volumes/LJL_ExtPro/Data/ReCAPSE_Data/"
outdir   <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/0_Codes/"
################################################################################
#1. Load grping data
################################################################################
#1. Load CCS Groups file:
CCS_df <- load_and_clean_CSS_data(grping_data_dir)
CCS_Diag_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Diag","ICD10_Diag")),]
CCS_Proc_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Proc","ICD10_Proc")),]
#2.Load CCS servis procedure group file
CCS_SProc_df <- load_and_clean_CSS_ServicesP_data(grping_data_dir)
#3. Load Chuback Groups file:
Chuback_df <- load_and_clean_Chubak_data(grping_data_dir)
Chuback_Diag_df <- Chuback_df[which(Chuback_df$Code.type %in% c("ICD-9 diagnosis")),]
Chuback_Proc_df <- Chuback_df[which(Chuback_df$Code.type %in% c("HCPC","ICD-9 procedure","CPT", "CPT category II","CPT category III")),]
#4. load Ritzwoller file:
Ritzwoller_df <- load_and_clean_Ritzwoller_data(grping_data_dir)
Ritzwoller_Diag_df <- Ritzwoller_df[which(Ritzwoller_df$D_or_P == "Diagnostic"),] #48
Ritzwoller_Proc_df <- Ritzwoller_df[which(Ritzwoller_df$D_or_P == "Procedure"),] #1008
#5.Load drug group
DM3_df <- load_and_clean_DM3_data(grping_data_dir)
################################################################################
#2. Load unique codes data
################################################################################
unique_diag_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Diag_Codes.xlsx"),sheet = 1)
unique_proc_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Proc_Codes.xlsx"),sheet = 1)
unique_drug_df <- read.xlsx(paste0(code_data_dir,"0_Cleaned_Unique_Drug_Codes.xlsx"),sheet = 1)
View(unique_drug_df)
View(DM3_df)
View(unique_drug_df)
nchar(00002035102)
View(DM3_df)
