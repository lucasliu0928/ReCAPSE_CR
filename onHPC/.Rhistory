curr_diff <- as.numeric(difftime(ymd(curr_pred_month),curr_acutal_month, units = "days"))/30
}
curr_th_diff_col <- paste0("DiffinMonth_Thres_", curr_th)
pt_diff_df[i,curr_th_diff_col] <- curr_diff
}
}
return(pt_diff_df)
}
ptlevel_monthdiff_df <- compute_month_diff(ptlevel_pred_df_SBCE)
analysis_df <- ptlevel_monthdiff_df
View(analysis_df)
#get abs diff first
abs(analysis_df[,2:])
#get abs diff first
abs(analysis_df[,2:ncol(analysis_df)])
#get abs diff first
analysis_df <- abs(analysis_df[,2:ncol(analysis_df)])
View(analysis_df)
#get abs diff first
analysis_df[,2:ncol(analysis_df)] <- abs(analysis_df[,2:ncol(analysis_df)])
analysis_df <- ptlevel_monthdiff_df
#get abs diff first
analysis_df[,2:ncol(analysis_df)] <- abs(analysis_df[,2:ncol(analysis_df)])
View(analysis_df)
pt_diff_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(pt_diff_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
diff_stat_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(diff_stat_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
i <- 1
curr_th <- thres[i]
colnames(analysis_df)
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
analysis_df[,curr_th_col]
mean(analysis_df[,curr_th_col])
curr_col_vals <- analysis_df[,curr_th_col]
curr_indxes_notINF <- which(curr_col_vals != Inf)
length(curr_indxes_notINF)
curr_num_pts <- length(curr_indxes_notINF)
curr_col_vals_excINF <- curr_col_vals[curr_indxes_notINF]
curr_col_vals_excINF
curr_indxes_INF <- which(curr_col_vals == Inf)
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
curr_col_vals_excINF
curr_num_pts <- length(curr_col_vals_excINF)
curr_num_pts
mean(curr_col_vals_excINF)
colnames(diff_stat_df)
for (i in 1:length(thres)){
curr_th <- thres[i]
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
curr_col_vals <- analysis_df[,curr_th_col]
#Get indxes of diff is inf
curr_indxes_INF <- which(curr_col_vals == Inf)
#exclude INF
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
diff_stat_df[i,"Num_PTs_HasPredictedSBCEMonth"]   <- length(curr_col_vals_excINF)
diff_stat_df[i,"Mean_Diff_InMonth"]               <- mean(curr_col_vals_excINF)
diff_stat_df[i,"Std_Diff_InMonth"]                <- std(curr_col_vals_excINF)
diff_stat_df[i,"Median_Diff_InMonth"]             <- median(curr_col_vals_excINF)
diff_stat_df[i,"Min_Diff_InMonth"]                <- min(curr_col_vals_excINF)
diff_stat_df[i,"Max_Diff_InMonth"]                <- max(curr_col_vals_excINF)
}
thres <- c("01","02","03","04","05","06","07","08")
diff_stat_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(diff_stat_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
for (i in 1:length(thres)){
curr_th <- thres[i]
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
curr_col_vals <- analysis_df[,curr_th_col]
#Get indxes of diff is inf
curr_indxes_INF <- which(curr_col_vals == Inf)
#exclude INF
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
diff_stat_df[i,"Threshold"]                       <- curr_th
diff_stat_df[i,"Num_PTs_HasPredictedSBCEMonth"]   <- length(curr_col_vals_excINF)
diff_stat_df[i,"Mean_Diff_InMonth"]               <- mean(curr_col_vals_excINF)
diff_stat_df[i,"Std_Diff_InMonth"]                <- sd(curr_col_vals_excINF)
diff_stat_df[i,"Median_Diff_InMonth"]             <- median(curr_col_vals_excINF)
diff_stat_df[i,"Min_Diff_InMonth"]                <- min(curr_col_vals_excINF)
diff_stat_df[i,"Max_Diff_InMonth"]                <- max(curr_col_vals_excINF)
}
View(diff_stat_df)
131/24
View(pt_diff_df)
#Report stats of month diff
monthdiff_stattb  <- get_stats_month_diff(ptlevel_monthdiff_df)
get_stats_month_diff <- function(analysis_df){
#analysis_df <- ptlevel_monthdiff_df
#get abs diff first
analysis_df[,2:ncol(analysis_df)] <- abs(analysis_df[,2:ncol(analysis_df)])
thres <- c("01","02","03","04","05","06","07","08")
diff_stat_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(diff_stat_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
for (i in 1:length(thres)){
curr_th <- thres[i]
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
curr_col_vals <- analysis_df[,curr_th_col]
#Get indxes of diff is inf
curr_indxes_INF <- which(curr_col_vals == Inf)
#exclude INF
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
diff_stat_df[i,"Threshold"]                       <- curr_th
diff_stat_df[i,"Num_PTs_HasPredictedSBCEMonth"]   <- length(curr_col_vals_excINF)
diff_stat_df[i,"Mean_Diff_InMonth"]               <- mean(curr_col_vals_excINF)
diff_stat_df[i,"Std_Diff_InMonth"]                <- sd(curr_col_vals_excINF)
diff_stat_df[i,"Median_Diff_InMonth"]             <- median(curr_col_vals_excINF)
diff_stat_df[i,"Min_Diff_InMonth"]                <- min(curr_col_vals_excINF)
diff_stat_df[i,"Max_Diff_InMonth"]                <- max(curr_col_vals_excINF)
}
}
#Report stats of month diff
monthdiff_stattb  <- get_stats_month_diff(ptlevel_monthdiff_df)
#Report stats of month diff
monthdiff_stattb  <- get_stats_month_diff(ptlevel_monthdiff_df)
ptlevel_monthdiff_df
#Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
get_stats_month_diff <- function(analysis_df){
#analysis_df <- ptlevel_monthdiff_df
#get abs diff first
analysis_df[,2:ncol(analysis_df)] <- abs(analysis_df[,2:ncol(analysis_df)])
thres <- c("01","02","03","04","05","06","07","08")
diff_stat_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(diff_stat_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
for (i in 1:length(thres)){
curr_th <- thres[i]
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
curr_col_vals <- analysis_df[,curr_th_col]
#Get indxes of diff is inf
curr_indxes_INF <- which(curr_col_vals == Inf)
#exclude INF
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
diff_stat_df[i,"Threshold"]                       <- curr_th
diff_stat_df[i,"Num_PTs_HasPredictedSBCEMonth"]   <- length(curr_col_vals_excINF)
diff_stat_df[i,"Mean_Diff_InMonth"]               <- mean(curr_col_vals_excINF)
diff_stat_df[i,"Std_Diff_InMonth"]                <- sd(curr_col_vals_excINF)
diff_stat_df[i,"Median_Diff_InMonth"]             <- median(curr_col_vals_excINF)
diff_stat_df[i,"Min_Diff_InMonth"]                <- min(curr_col_vals_excINF)
diff_stat_df[i,"Max_Diff_InMonth"]                <- max(curr_col_vals_excINF)
}
return(diff_stat_df)
}
#Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
#Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
get_stats_month_diff <- function(analysis_df){
#analysis_df <- ptlevel_monthdiff_df
#get abs diff first
analysis_df[,2:ncol(analysis_df)] <- abs(analysis_df[,2:ncol(analysis_df)])
thres <- c("01","02","03","04","05","06","07","08")
diff_stat_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(diff_stat_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
for (i in 1:length(thres)){
curr_th <- thres[i]
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
curr_col_vals <- analysis_df[,curr_th_col]
#Get indxes of diff is inf
curr_indxes_INF <- which(curr_col_vals == Inf)
#exclude INF
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
diff_stat_df[i,"Threshold"]                       <- curr_th
diff_stat_df[i,"Num_PTs_HasPredictedSBCEMonth"]   <- length(curr_col_vals_excINF)
diff_stat_df[i,"Mean_Diff_InMonth"]               <- mean(curr_col_vals_excINF)
diff_stat_df[i,"Std_Diff_InMonth"]                <- sd(curr_col_vals_excINF)
diff_stat_df[i,"Median_Diff_InMonth"]             <- median(curr_col_vals_excINF)
diff_stat_df[i,"Min_Diff_InMonth"]                <- min(curr_col_vals_excINF)
diff_stat_df[i,"Max_Diff_InMonth"]                <- max(curr_col_vals_excINF)
}
return(diff_stat_df)
}
#Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
View(monthdiff_stats)
View(ptlevel_perf_tb_alltest)
View(ptlevel_pred_df_SBCE)
View(monthdiff_stats)
View(ptlevel_monthdiff_df)
View(ptlevel_monthdiff_df)
View(pts_level_char_df)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
#2.2 Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
#2.1 compute the difference between predicted SBCE month and actual SBCE month
ptlevel_monthdiff_df <- compute_month_diff(ptlevel_pred_df_SBCE)
ptlevel_perf_tb_alltest
ptlevel_pred_df_SBCE
#2.For SBCE patient,
ptlevel_pred_df_SBCE <- ptlevel_pred_df_alltest[which(ptlevel_pred_df_alltest[,"SBCE"]==1), ]
#2.1 compute the difference between predicted SBCE month and actual SBCE month
ptlevel_monthdiff_df <- compute_month_diff(ptlevel_pred_df_SBCE)
#2.2 Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
write.csv(monthdiff_stats,paste0(outdir,"Predicted_Monthdiff_stats",".csv"),row.names = T)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16C_PlotPredictions.R', echo=TRUE)
length(test_ID)
df <- read.csv("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/16_Performance_WithSurgPrimSite_V1/DownSampled_TrainInfo/Model_Data_WithDSFlag.csv")
View(df)
nrow(df)
966866 + 32251+239885+8847
which(df$DownSampled_Train==1)
length(which(df$DownSampled_Train==1))
source("Recapse_Ultility.R")
compute_mean_sd_func <- function(data_col,round_digit){
mean_val <- round(mean(data_col),round_digit)
sd_val <-  round(sd(data_col),round_digit)
comb_val <- paste0(mean_val," \u00b1 ",sd_val)
return(comb_val)
}
compute_n_perc_func <- function(data_col,round_digit){
# data_col <- curr_values
total_n <- length(data_col)
count_tb <- table(data_col)
count_tb_perc <- round(count_tb/total_n*100,round_digit)
count_cato_names <- names(count_tb)
count_final <-""
count_final <- paste0(count_cato_names,": ", count_tb, " (",count_tb_perc,")", collapse = "\n")
count_final <- paste0(count_final,"\n Total(NA excluded):",total_n)
return(count_final)
}
compute_median_p25andp75_func <- function(data_col,round_digit){
med_val <- round(median(data_col),round_digit)
quant_res <- quantile(data_col,c(0.25,0.75))
p25 <- round(quant_res[1],round_digit)
p75 <- round(quant_res[2],round_digit)
comb_val <- paste0(med_val," [",p25,"-",p75,"]")
return(comb_val)
}
compute_stats_func <- function(input_df,cohort_name,ordered_parameters,n_perc_variables_list){
Final_table <- as.data.frame(matrix(NA, nrow = length(ordered_parameters), ncol = 3))
colnames(Final_table) <- c("Var","Stats","Missingness")
Final_table$Var <- ordered_parameters
for (i in 1:length(ordered_parameters)){
curr_f <- ordered_parameters[i]
#get index column of current feature
curr_colindex <- which(colnames(input_df) == curr_f)
if (length(curr_colindex) == 0){ #if feature is not in curret data input
Final_table[i,2] <- NA
}else{
#Get current values
curr_values <- input_df[,curr_f]
#report and remove NAs
na_indexes <- which(is.na(curr_values) == T)
n_NA <-  length(na_indexes)
prec_NA <- round((n_NA/length(curr_values)*100),2)
Final_table[i,3] <- paste0(n_NA," (",prec_NA,"%)")
if(n_NA > 0){
curr_values <- curr_values[-na_indexes]
}
if (curr_f %in% n_perc_variables_list){ #compte n perc
Final_table[i,2] <- compute_n_perc_func(curr_values,2)
}else{
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}
}
}
colnames(Final_table) <- paste0(cohort_name,"_",colnames(Final_table))
return(Final_table)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir           <- paste0(proj_dir, "17_Discrip_Statistics/")
################################################################################
#1. Load pts level char for final IDs
################################################################################
Final_PTs_Char_df <- read.xlsx(paste0(data_dir1,"/9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
final_Ids <- Final_PTs_Char_df$study_id
#Recode Type 2 event:
#1. As long as the string has "1Recur", it counted as "first primary recurrence", no matter if it has same date with others
recode_idxes1 <- which(grepl("1Recur",Final_PTs_Char_df[,"Type_2nd_Event"]) == T)
Final_PTs_Char_df[recode_idxes1,"Type_2nd_Event"] <- "1Recur"
################################################################################
#Get SBCE and non-SBCE pts char df
################################################################################
SBCE_PTs_Char_df   <- Final_PTs_Char_df[which(Final_PTs_Char_df[,"SBCE"] == 1),]
noSBCE_PTs_Char_df <- Final_PTs_Char_df[which(Final_PTs_Char_df[,"SBCE"] == 0),]
################################################################################
#Report number of patient and SBCE status in final model data
################################################################################
df <- read.csv(paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1/DownSampled_TrainInfo/Model_Data_WithDSFlag.csv"), stringsAsFactors = F)
################################################################################
#Report number of patient and SBCE status in final model data
################################################################################
final_modelIDs_df <- read.csv(paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1/DownSampled_TrainInfo/Model_Data_WithDSFlag.csv"), stringsAsFactors = F)
DS_ModelIDs_df <-  final_modelIDs_df[which(final_modelIDs_df$DownSampled_Train==1),]
which(DS_ModelIDs_df$study_id %in% SBCE_PTs_Char_df$study_id)
DS_ModelIDs_df$study_id
SBCE_PTs_Char_df$study_id
which(DS_ModelIDs_df$study_id %in% paste0("ID",SBCE_PTs_Char_df$study_id))
n_SBCE_inDSTrain <- which(DS_ModelIDs_df$study_id %in% paste0("ID",SBCE_PTs_Char_df$study_id))
length(n_SBCE_inDSTrain)
DS_ModelIDs_df_SBCE <- DS_ModelIDs_df[which(DS_ModelIDs_df$study_id %in% paste0("ID",SBCE_PTs_Char_df$study_id)),]
DS_ModelIDs_df_SBCE
length(unique(DS_ModelIDs_df_SBCE$study_id))
DS_ModelIDs_df_nonSBCE <- DS_ModelIDs_df[which(DS_ModelIDs_df$study_id %in% paste0("ID",noSBCE_PTs_Char_df$study_id)),]
n_nonSBCE_inDSTrain <- length(unique(DS_ModelIDs_df_nonSBCE$study_id))
length(n_nonSBCE_inDSTrain)
View(DS_ModelIDs_df_nonSBCE)
DS_ModelIDs_df_nonSBCE <- DS_ModelIDs_df[which(DS_ModelIDs_df$study_id %in% paste0("ID",noSBCE_PTs_Char_df$study_id)),]
n_nonSBCE_inDSTrain <- length(unique(DS_ModelIDs_df_nonSBCE$study_id))
length(n_nonSBCE_inDSTrain)
n_nonSBCE_inDSTrain
n_nonSBCE_inDSTrain
length(unique(DS_ModelIDs_df_SBCE$study_id))
length(unique(DS_ModelIDs_df_nonSBCE$study_id))
11008 + 3362
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
#This script get patient level group count for Final Id (All enrolls) in valid month
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
data_dir2  <- paste0(proj_dir, "0_Codes/Grouped_CleanUniqueCodes/")
data_dir_CCSdiag  <- paste0(proj_dir, "10B_CCSDiagFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_CCSproc  <- paste0(proj_dir, "10C_CCSProcFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_DM3spe   <- paste0(proj_dir, "10D_DM3SPEFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_DM3gen   <- paste0(proj_dir, "10E_DM3GENFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_SGNN     <- paste0(proj_dir, "10F_ShortGNNFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
outdir   <- paste0(proj_dir, "10G_Counts_UniqueGrp_PtsLevel/WithPossibleMonthsHasNoCodes/")
#Short GNN
S_GNN_count_tb     <- get_count_table_func(data_dir_SGNN,"S_GNN",SBCE_PTs,nonSBCE_PTs)
PTS_char_df <- read.xlsx(paste0(data_dir1,"9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
SBCE_PTs    <- PTS_char_df[which(PTS_char_df$SBCE==1),"study_id"]
nonSBCE_PTs <- PTS_char_df[which(PTS_char_df$SBCE==0),"study_id"]
################################################################################
#Read unique code discrption file
################################################################################
diag_disp_df <- read.xlsx(paste0(data_dir2,"Unique_Diag_And_Groups_inALLClaims.xlsx"),sheet = 1)
proc_disp_df <- read.xlsx(paste0(data_dir2,"Unique_Proc_And_Groups_inALLClaims.xlsx"),sheet = 1)
drug_disp_df <- read.xlsx(paste0(data_dir2,"Unique_Drug_And_Groups_inALLClaims.xlsx"),sheet = 1)
#Short GNN
S_GNN_count_tb     <- get_count_table_func(data_dir_SGNN,"S_GNN",SBCE_PTs,nonSBCE_PTs)
colnames(S_GNN_count_tb)[6] <- "DM3_SPE"
S_GNN_count_tb     <- add_grp_discrption_func(S_GNN_count_tb,drug_disp_df,"short_GNN","specific_group") ##Use DM3 SPE as the discrption for S_GNN, to see how many matched to DM3 spe
View(S_GNN_count_tb)
colnames(S_GNN_count_tb)[6] <- "DM3_SPE"
i <- 1
i <- 1
curr_short_gnn <- drug_disp_df[i,"short_GNN"]
curr_short_gnn
colnames(S_GNN_count_tb)
i <- 1
drug_disp_df[,"Num_PtsHasSGNN_SBCE"] <- NA
drug_disp_df[,"Frac_PtsHasSGNN_SBCE"] <- NA
drug_disp_df[,"Num_PtsHasSGNN_nonSBCE"] <- NA
drug_disp_df[,"Frac_PtsHasSGNN_nonSBCE"] <- NA
i <- 1
curr_short_gnn <- drug_disp_df[i,"short_GNN"]
which(S_GNN_count_tb[,"Code_Grp"] == curr_short_gnn)
S_GNN_count_tb[,"Code_Grp"]
i <- 1
curr_short_gnn <- paste0("S_GNN_" , drug_disp_df[i,"short_GNN"])
which(S_GNN_count_tb[,"Code_Grp"] == curr_short_gnn)
curr_idx       <- which(S_GNN_count_tb[,"Code_Grp"] == curr_short_gnn)
S_GNN_count_tb[curr_idx, ]
i <- 1
curr_short_gnn <- paste0("S_GNN_" , drug_disp_df[i,"short_GNN"])
#find idx in count tb
curr_idx       <- which(S_GNN_count_tb[,"Code_Grp"] == curr_short_gnn)
drug_disp_df[i,"Num_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_SBCE"]
drug_disp_df[i,"Frac_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Frac_PtsHasTheGrp_SBCE"]
drug_disp_df[i,"Num_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_nonSBCE"]
drug_disp_df[i,"Frac_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Frac_PtsHasTheGrp_nonSBCE"]
View(drug_disp_df)
S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_nonSBCE"]
i <- 1
curr_short_gnn <- paste0("S_GNN_" , drug_disp_df[i,"short_GNN"])
#find idx in count tb
curr_idx       <- which(S_GNN_count_tb[,"Code_Grp"] == curr_short_gnn)
drug_disp_df[i,"Num_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_SBCE"]
drug_disp_df[i,"Frac_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Frac_PtsHasTheGrp_SBCE"]
drug_disp_df[i,"Num_PtsHasSGNN_nonSBCE"] <- S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_nonSBCE"]
drug_disp_df[i,"Frac_PtsHasSGNN_nonSBCE"] <- S_GNN_count_tb[curr_idx, "Frac_PtsHasTheGrp_nonSBCE"]
for (i in 1:nrow(drug_disp_df)){
curr_short_gnn <- paste0("S_GNN_" , drug_disp_df[i,"short_GNN"])
#find idx in count tb
curr_idx       <- which(S_GNN_count_tb[,"Code_Grp"] == curr_short_gnn)
drug_disp_df[i,"Num_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_SBCE"]
drug_disp_df[i,"Frac_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Frac_PtsHasTheGrp_SBCE"]
drug_disp_df[i,"Num_PtsHasSGNN_nonSBCE"] <- S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_nonSBCE"]
drug_disp_df[i,"Frac_PtsHasSGNN_nonSBCE"] <- S_GNN_count_tb[curr_idx, "Frac_PtsHasTheGrp_nonSBCE"]
}
curr_short_gnn
#Output All unique code in valid + Full GNN + short GNN and freqency for clinician review
drug_disp_df_inPreditionWindow <- drug_disp_df[which(paste0("S_GNN_" , drug_disp_df[,"short_GNN"]) %in% S_GNN_count_tb[,"Code_Grp"]),]
drug_disp_df[,"Num_PtsHasSGNN_SBCE"] <- NA
drug_disp_df[,"Frac_PtsHasSGNN_SBCE"] <- NA
drug_disp_df[,"Num_PtsHasSGNN_nonSBCE"] <- NA
drug_disp_df[,"Frac_PtsHasSGNN_nonSBCE"] <- NA
for (i in 1:nrow(drug_disp_df)){
curr_short_gnn <- paste0("S_GNN_" , drug_disp_df[i,"short_GNN"])
#find idx in count tb
curr_idx       <- which(S_GNN_count_tb[,"Code_Grp"] == curr_short_gnn)
drug_disp_df[i,"Num_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_SBCE"]
drug_disp_df[i,"Frac_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Frac_PtsHasTheGrp_SBCE"]
drug_disp_df[i,"Num_PtsHasSGNN_nonSBCE"] <- S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_nonSBCE"]
drug_disp_df[i,"Frac_PtsHasSGNN_nonSBCE"] <- S_GNN_count_tb[curr_idx, "Frac_PtsHasTheGrp_nonSBCE"]
}
drug_disp_df_inPreditionWindow <- drug_disp_df[which(paste0("S_GNN_" , drug_disp_df[,"short_GNN"]) %in% S_GNN_count_tb[,"Code_Grp"]),]
drug_disp_df_inPreditionWindow[,"Num_PtsHasSGNN_SBCE"] <- NA
drug_disp_df_inPreditionWindow[,"Frac_PtsHasSGNN_SBCE"] <- NA
drug_disp_df_inPreditionWindow[,"Num_PtsHasSGNN_nonSBCE"] <- NA
drug_disp_df_inPreditionWindow[,"Frac_PtsHasSGNN_nonSBCE"] <- NA
for (i in 1:nrow(drug_disp_df_inPreditionWindow)){
curr_short_gnn <- paste0("S_GNN_" , drug_disp_df_inPreditionWindow[i,"short_GNN"])
#find idx in count tb
curr_idx       <- which(S_GNN_count_tb[,"Code_Grp"] == curr_short_gnn)
drug_disp_df_inPreditionWindow[i,"Num_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_SBCE"]
drug_disp_df_inPreditionWindow[i,"Frac_PtsHasSGNN_SBCE"] <- S_GNN_count_tb[curr_idx, "Frac_PtsHasTheGrp_SBCE"]
drug_disp_df_inPreditionWindow[i,"Num_PtsHasSGNN_nonSBCE"] <- S_GNN_count_tb[curr_idx, "Num_PtsHasTheGrp_nonSBCE"]
drug_disp_df_inPreditionWindow[i,"Frac_PtsHasSGNN_nonSBCE"] <- S_GNN_count_tb[curr_idx, "Frac_PtsHasTheGrp_nonSBCE"]
}
View(drug_disp_df_inPreditionWindow)
write.xlsx(drug_disp_df_inPreditionWindow,paste0(outdir,"Count_S_GNN_Unique_Grps_WithFullGNN.xlsx"))
colnames(drug_disp_df_inPreditionWindow)
#Output All unique code in valid + Full GNN + short GNN and freqency for clinician review
indexes_inCount_tb <- which(paste0("S_GNN_" , drug_disp_df[,"short_GNN"]) %in% S_GNN_count_tb[,"Code_Grp"])
#Output All unique code in valid + Full GNN + short GNN and freqency for clinician review
indexes_inCount_tb <- which(paste0("S_GNN_" , drug_disp_df[,"short_GNN"]) %in% S_GNN_count_tb[,"Code_Grp"])
drug_disp_df_inPreditionWindow <- drug_disp_df[indexes_inCount_tb, c("CODE","TYPE","GNN","short_GNN","specific_group","general_group")]
source("Recapse_Ultility.R")
#This script get patient level group count for Final Id (All enrolls) in valid month
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
data_dir2  <- paste0(proj_dir, "0_Codes/Grouped_CleanUniqueCodes/")
data_dir_CCSdiag  <- paste0(proj_dir, "10B_CCSDiagFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_CCSproc  <- paste0(proj_dir, "10C_CCSProcFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_DM3spe   <- paste0(proj_dir, "10D_DM3SPEFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_DM3gen   <- paste0(proj_dir, "10E_DM3GENFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
data_dir_SGNN     <- paste0(proj_dir, "10F_ShortGNNFeature_inValidMonth/WithPossibleMonthsHasNoCodes/UniqueGrp/")
outdir   <- paste0(proj_dir, "10G_Counts_UniqueGrp_PtsLevel/WithPossibleMonthsHasNoCodes/")
################################################################################
#'Load pts SBCElabel
################################################################################
PTS_char_df <- read.xlsx(paste0(data_dir1,"9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
SBCE_PTs    <- PTS_char_df[which(PTS_char_df$SBCE==1),"study_id"]
nonSBCE_PTs <- PTS_char_df[which(PTS_char_df$SBCE==0),"study_id"]
################################################################################
#Read unique code discrption file
################################################################################
diag_disp_df <- read.xlsx(paste0(data_dir2,"Unique_Diag_And_Groups_inALLClaims.xlsx"),sheet = 1)
proc_disp_df <- read.xlsx(paste0(data_dir2,"Unique_Proc_And_Groups_inALLClaims.xlsx"),sheet = 1)
drug_disp_df <- read.xlsx(paste0(data_dir2,"Unique_Drug_And_Groups_inALLClaims.xlsx"),sheet = 1)
################################################################################
#Count and add discription
################################################################################
# #Diag:
# CCS_Diag_count_tb  <- get_count_table_func(data_dir_CCSdiag,"CCS_DIAG",SBCE_PTs,nonSBCE_PTs)
# CCS_Diag_count_tb  <- add_grp_discrption_func(CCS_Diag_count_tb,diag_disp_df,"CCS_CATEGORY","CCS_CATEGORY_DESCRIPTION")
# write.xlsx(CCS_Diag_count_tb,paste0(outdir,"Count_CCS_Diag_Unique_Grps.xlsx"))
#
#
# CCS_Proc_count_tb  <- get_count_table_func(data_dir_CCSproc,"CCS_PROC",SBCE_PTs,nonSBCE_PTs)
# CCS_Proc_count_tb  <- add_grp_discrption_func(CCS_Proc_count_tb,proc_disp_df,"CCS_CATEGORY","CCS_CATEGORY_DESCRIPTION")
# write.xlsx(CCS_Proc_count_tb,paste0(outdir,"Count_CCS_proc_Unique_Grps.xlsx"))
#
#
# DM3_SPE_count_tb   <- get_count_table_func(data_dir_DM3spe,"DM3_SPE",SBCE_PTs,nonSBCE_PTs)
# DM3_SPE_count_tb$Grp_Discrip <- NA  #No discrip for DM3
# write.xlsx(DM3_SPE_count_tb,paste0(outdir,"Count_DM3_SPE_Unique_Grps.xlsx"))
#
# DM3_GEN_count_tb   <- get_count_table_func(data_dir_DM3gen,"DM3_GEN",SBCE_PTs,nonSBCE_PTs)
# DM3_GEN_count_tb$Grp_Discrip <- NA  #No discrip for DM3
# write.xlsx(DM3_GEN_count_tb,paste0(outdir,"Count_DM3_GEN_Unique_Grps.xlsx"))
#Short GNN
S_GNN_count_tb     <- get_count_table_func(data_dir_SGNN,"S_GNN",SBCE_PTs,nonSBCE_PTs)
S_GNN_count_tb     <- add_grp_discrption_func(S_GNN_count_tb,drug_disp_df,"short_GNN","specific_group") ##Use DM3 SPE as the discrption for S_GNN, to see how many matched to DM3 spe
colnames(S_GNN_count_tb)[6] <- "DM3_SPE"
#Output All unique code + Full GNN + short GNN In prediction Window + count tb for clinician review
indexes_inCount_tb <- which(paste0("S_GNN_" , drug_disp_df[,"short_GNN"]) %in% S_GNN_count_tb[,"Code_Grp"])
drug_disp_df_inPreditionWindow <- drug_disp_df[indexes_inCount_tb, c("CODE","TYPE","GNN","short_GNN")]
View(drug_disp_df_inPreditionWindow)
write.xlsx(drug_disp_df_inPreditionWindow,paste0(outdir,"FullGNN_ForReview.xlsx"))
sort(drug_disp_df_inPreditionWindow$TYPE)
order(drug_disp_df_inPreditionWindow$TYPE)
drug_disp_df_inPreditionWindow <- drug_disp_df_inPreditionWindow[order(drug_disp_df_inPreditionWindow$TYPE),]
write.xlsx(drug_disp_df_inPreditionWindow,paste0(outdir,"FullGNN_ForReview.xlsx"))
