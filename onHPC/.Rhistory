curr_importance_matrix
# Specifying the phi_0, i.e. the expected prediction without any features
p <- mean(y_train)
# Specifying the phi_0, i.e. the expected prediction without any features
p <- mean(train_Y)
p
train_Y
curr_model
source("TAKI_Ultility.R")
library("shapper")
#this script use entire UK data plus down sampleing, and validation on utsw data
#Data dir
data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/Model_Feature_Outcome/"
#feature file and outcome file names
feature_file <- c("All_Feature_imputed_normed.csv")
outcome_file <- "All_outcome.csv"
#######################################################################################
######                           Mortality Prediction                      ############
#feature file: Selected features
#Outcome file: All_outcome.csv
#######################################################################################
#Outcome column name
outcome_colname <- "Death_inHOSP"
selected_features <- c("UrineOutput_D0toD3" , "Vasopressor_ICUD0toD3","FI02_D1_HIGH","Platelets_D1_LOW","AGE",
"BUN_D0toD3_HIGH","HR_D1_HIGH","LAST_KDIGO_ICU_D0toD3","PH_D1_LOW","Bilirubin_D1_HIGH",
"MAX_KDIGO_ICU_D0toD3","ECMO_ICUD0toD3")
#1.Get model data
train_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
train_data <- train_data[,c(selected_features,outcome_colname)]
colnames(train_data)
table(train_data$Death_inHOSP)
#Outcome index
outcome_index <- which(colnames(train_data) == outcome_colname)
#Train data part
if (ncol(train_data) == 2){ ##For data has one feature column, must add as.data.frame, and rename col
train_X <- as.data.frame(train_data[,-outcome_index])
colnames(train_X) <- colnames(train_data)[1]
}else{
train_X <- train_data[,-outcome_index]
}
train_X
#Train label
train_Y <-  train_data[,outcome_index]
coln
colnames(train_X)
#train model
trained_model  <- train(train_X, train_Y,method= "svmLinear2" , trControl = trainControl("none", classProbs = TRUE),verbose=F) # Support Vector Machines
explainer <- shapr(as.matrix(train_data), trained_model)
library("shapr")
#train model
trained_model  <- train(train_X, train_Y,method= "svmLinear2" , trControl = trainControl("none", classProbs = TRUE),verbose=F) # Support Vector Machines
explainer <- shapr(as.matrix(train_data), trained_model)
?shapr::shapr
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
661098/31563
2267391/95903
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
#onHPC
grp_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
data_dir <- "/recapse/intermediate_data/"
outdir <- "/recapse/intermediate_data/"
# #local
# grp_dir <- "/Volumes/LJL_ExtPro/Data/Testing data for UH3 - Dec 16 2020/"
# data_dir <- "/Users/lucasliu/Desktop/intermediate_data/"
# outdir <- "/Users/lucasliu/Desktop/intermediate_data/"
################################################################################
#1. Load unique codes
################################################################################
#1.Load unique codes
unique_diag_df <- read.csv(paste0(data_dir,"11_all_unique_diag_codes_df.csv"),stringsAsFactors = F)
unique_proc_df <- read.csv(paste0(data_dir,"11_all_unique_proc_codes_df.csv"),stringsAsFactors = F)
unique_drug_df <- read.csv(paste0(data_dir,"11_all_unique_drug_codes_df.csv"),stringsAsFactors = F)
########################################################################
######                2. load HCUP CCS file:                    ########
########################################################################
CCS_df <- load_and_clean_CSS_data(grp_dir)
CCS_Diag_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Diag","ICD10_Diag")),]
CCS_Proc_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Proc","ICD10_Proc")),]
########################################################################
#3. Group  diagnose codes
########################################################################
grouped_unique_diag_df <- group_codes_into_CCS_func(unique_diag_df,CCS_Diag_df)
length(which(is.na(grouped_unique_diag_df$CCS_CATEGORY)==T)) #926 no grps
length(unique(grouped_unique_diag_df$CCS_CATEGORY)) #262 grps
source("Recapse_Ultility.R")
#onHPC
grp_dir <- "/recapse/data/Testing data for UH3 - Dec 16 2020/"
data_dir <- "/recapse/intermediate_data/"
outdir <- "/recapse/intermediate_data/"
#local
grp_dir <- "/Volumes/LJL_ExtPro/Data/Testing data for UH3 - Dec 16 2020/"
data_dir <- "/Users/lucasliu/Desktop/intermediate_data/"
outdir <- "/Users/lucasliu/Desktop/intermediate_data/"
################################################################################
#1. Load unique codes
################################################################################
#1.Load unique codes
unique_diag_df <- read.csv(paste0(data_dir,"11_all_unique_diag_codes_df.csv"),stringsAsFactors = F)
unique_proc_df <- read.csv(paste0(data_dir,"11_all_unique_proc_codes_df.csv"),stringsAsFactors = F)
unique_drug_df <- read.csv(paste0(data_dir,"11_all_unique_drug_codes_df.csv"),stringsAsFactors = F)
########################################################################
######                2. load HCUP CCS file:                    ########
########################################################################
CCS_df <- load_and_clean_CSS_data(grp_dir)
CCS_Diag_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Diag","ICD10_Diag")),]
CCS_Proc_df <- CCS_df[which(CCS_df[,"CODE_TYPE"] %in% c("ICD9_Proc","ICD10_Proc")),]
########################################################################
#3. Group  diagnose codes
########################################################################
grouped_unique_diag_df <- group_codes_into_CCS_func(unique_diag_df,CCS_Diag_df)
length(which(is.na(grouped_unique_diag_df$CCS_CATEGORY)==T)) #926 no grps
length(unique(grouped_unique_diag_df$CCS_CATEGORY)) #262 grps
nrow(grouped_unique_diag_df)
25469 - 1594
grouped_unique_proc_df <- group_codes_into_CCS_func(unique_proc_df,CCS_Proc_df)
length(which(is.na(grouped_unique_proc_df$CCS_CATEGORY)==T)) #8391 no grps
length(unique(grouped_unique_proc_df$CCS_CATEGORY)) #211 grps
nrow(grouped_unique_proc_df)
14152 - 1782
14152 - 10811
#1.Load drug group df
DM3_df <- read.csv(paste0(grp_dir,"Code_Groups/Drug Code Groups-DM3.sorted.csv"),stringsAsFactors = F)
DM3_df <- DM3_df[,-1]
# #Clean drug name by removing the source prefix
DM3_df[,"desc"] <- gsub("NC: |NH: |NO: |NS: ","",DM3_df[,"desc"])
DM3_df[,"desc"] <- gsub("[[:punct:]]"," ",DM3_df[,"desc"])
DM3_df[,"desc"] <- trimws(DM3_df[,"desc"], which = c("both"), whitespace = "[ \t\r\n]")
unique_drug_df[,"Drug_name"] <- gsub("[[:punct:]]"," ",unique_drug_df[,"Drug_name"])
unique_drug_df[,"Drug_name"] <- trimws(unique_drug_df[,"Drug_name"], which = c("both"), whitespace = "[ \t\r\n]")
#group drug codes
grouped_unique_drug_df <- group_drugcodes_into_DM3_func(unique_drug_df,DM3_df)
length(which(is.na(grouped_unique_drug_df$specific_group)==T)) #16415 no grps
length(which(is.na(grouped_unique_drug_df$general_group)==T)) #16415 no grps
length(unique(grouped_unique_drug_df$specific_group)) #58 grps
length(unique(grouped_unique_drug_df$general_group)) #14 grps
length(which(is.na(grouped_unique_drug_df$specific_group)==T)) #16415 no grps
length(which(is.na(grouped_unique_drug_df$general_group)==T)) #16415 no grps
nrow(grouped_unique_drug_df)
38638- 25798
length(unique(grouped_unique_drug_df$specific_group)) #58 grps
length(unique(grouped_unique_drug_df$general_group)) #14 grps
661,098/31563
661098/31563
6259/713
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
library(shapr)
#onHPC
data_dir <- "/recapse/intermediate_data/"
outdir <- "/recapse/intermediate_data/"
# #local
data_dir <- "/Users/lucasliu/Desktop/intermediate_data/"
outdir <- "/Users/lucasliu/Desktop/intermediate_data/"
########################################################################################################
#load data
########################################################################################################
model_data <- read.csv(paste0(outdir,"15_ModelReadyData.csv"),stringsAsFactors = F)
mean(model_data)
mean(model_data$months_since_dx,na.rm = T)
pts_level_char_df <- read.xlsx(paste0(data_dir,"/8_PatientLevel_charecteristics.xlsx"),sheet = 1)
final_ID <- unique(model_data$study_id)
pts_level_char_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% final_ID),]
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
original_noSBCE_toSBCEratio <- round(length(nosbce_pt_Ids)/length(sbce_pt_Ids))
model_data$y_PRE_OR_POST_2ndEvent
pre_recurrence_indxes <- which(model_data$y_PRE_OR_POST_2ndEvent==0)
post_recurrence_indxes <- which(model_data$y_PRE_OR_POST_2ndEvent==1)
mean(model_data$months_since_dx[pre_recurrence_indxes],na.rm = T)
mean(model_data$months_since_dx[post_recurrence_indxes],na.rm = T)
round(mean(model_data$months_since_dx[pre_recurrence_indxes],na.rm = T),2)
round(mean(model_data$months_since_dx[post_recurrence_indxes],na.rm = T),2)
colnames(model_data)
features_tocompute <- c("months_since_dx","reg_age_at_dx","reg_nodes_exam","Age","reg_nodes_pos","CCS_D_42","CCS_D24","C504","surg_prim_site_23","Laterality_1")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[f]
round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),2)
round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),2)
}
curr_f <- features_tocompute[i]
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),2)
round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),2)
}
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
if (i <= 5){
round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),2)
round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),2)
}
}
colnames(stat_tb) <- c("Features","Stats")
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 2))
colnames(stat_tb) <- c("Features","Stats")
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
stat_tb[i,"Stats_Pre"] <- round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),2)
stat_tb[i,"Stats_Post"] <- round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),2)
}
}
View(stat_tb)
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
stat_tb[i,"Stats_Pre"] <- round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),2)
stat_tb[i,"Stats_Post"] <- round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),2)
}else{
stat_tb[i,"Stats_Pre"] <- length(which(model_data[pre_recurrence_indxes,curr_f] == 1))
stat_tb[i,"Stats_Post"] <- length(which(model_data[post_recurrence_indxes,curr_f] == 1))
}
}
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
stat_tb[i,"Stats_Pre"] <- round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),2)
stat_tb[i,"Stats_Post"] <- round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),2)
}else{
stat_tb[i,"Stats_Pre"] <- length(which(model_data[pre_recurrence_indxes,curr_f] == 1))
stat_tb[i,"Stats_Post"] <- length(which(model_data[post_recurrence_indxes,curr_f] == 1))
}
}
#statitiscs
pre_recurrence_indxes <- which(model_data$y_PRE_OR_POST_2ndEvent==0)
post_recurrence_indxes <- which(model_data$y_PRE_OR_POST_2ndEvent==1)
features_tocompute <- c("months_since_dx","reg_age_at_dx","reg_nodes_exam","Age","reg_nodes_pos","CCS_D_42","CCS_D_24","C504","surg_prim_site_23","Laterality_1")
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
stat_tb[i,"Stats_Pre"] <- round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),2)
stat_tb[i,"Stats_Post"] <- round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),2)
}else{
stat_tb[i,"Stats_Pre"] <- length(which(model_data[pre_recurrence_indxes,curr_f] == 1))
stat_tb[i,"Stats_Post"] <- length(which(model_data[post_recurrence_indxes,curr_f] == 1))
}
}
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
stat_tb[i,"Stats_Pre"] <- round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),2)
stat_tb[i,"Stats_Post"] <- round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),2)
}else{
n0 <- length(which(model_data[pre_recurrence_indxes,curr_f] == 1))
p0 <- round(n0/length(pre_recurrence_indxes)*100,1)
n1 <- length(which(model_data[post_recurrence_indxes,curr_f] == 1))
p1 <- round(n1/length(post_recurrence_indxes)*100,1)
stat_tb[i,"Stats_Pre"] <-  paste0(n0,p0)
stat_tb[i,"Stats_Post"] <- paste0(n1,p1)
}
}
p0
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
stat_tb[i,"Stats_Pre"] <- round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),2)
stat_tb[i,"Stats_Post"] <- round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),2)
}else{
n0 <- length(which(model_data[pre_recurrence_indxes,curr_f] == 1))
p0 <- round(n0/length(pre_recurrence_indxes)*100,1)
n1 <- length(which(model_data[post_recurrence_indxes,curr_f] == 1))
p1 <- round(n1/length(post_recurrence_indxes)*100,1)
stat_tb[i,"Stats_Pre"] <-  paste0(n0,"(",p0,")")
stat_tb[i,"Stats_Post"] <- paste0(n1,"(",p1,")")
}
}
features_tocompute <- c("months_since_dx","reg_age_at_dx","reg_nodes_exam","Age","reg_nodes_pos","CCS_D_42","CCS_D_24","C504","surg_prim_site_23","Laterality_1")
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
avg0 <- round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
sd0 <- round(sd(model_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
avg1 <- round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),1)
sd1  <- round(sd(model_data[post_recurrence_indxes,curr_f],na.rm = T),1)
stat_tb[i,"Stats_Pre"] <-  paste0(avg0,"(",sd0,")")
stat_tb[i,"Stats_Post"] <- paste0(avg1,"(",sd1,")")
}else{
n0 <- length(which(model_data[pre_recurrence_indxes,curr_f] == 1))
p0 <- round(n0/length(pre_recurrence_indxes)*100,1)
n1 <- length(which(model_data[post_recurrence_indxes,curr_f] == 1))
p1 <- round(n1/length(post_recurrence_indxes)*100,1)
stat_tb[i,"Stats_Pre"] <-  paste0(n0,"(",p0,"%)")
stat_tb[i,"Stats_Post"] <- paste0(n1,"(",p1,"%)")
}
}
sd0
sd(model_data$months_since_dx)
#statitiscs
pre_recurrence_indxes <- which(model_data$y_PRE_OR_POST_2ndEvent==0)
post_recurrence_indxes <- which(model_data$y_PRE_OR_POST_2ndEvent==1)
features_tocompute <- c("months_since_dx","reg_age_at_dx","reg_nodes_exam","Age","reg_nodes_pos","CCS_D_42","CCS_D_24","C504","surg_prim_site_23","Laterality_1")
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
avg0 <- round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
sd0 <- round(sd(model_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
avg1 <- round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),1)
sd1  <- round(sd(model_data[post_recurrence_indxes,curr_f],na.rm = T),1)
stat_tb[i,"Stats_Pre"] <-  paste0(avg0," (",sd0,")")
stat_tb[i,"Stats_Post"] <- paste0(avg1," (",sd1,")")
}else{
n0 <- length(which(model_data[pre_recurrence_indxes,curr_f] == 1))
p0 <- round(n0/length(pre_recurrence_indxes)*100,1)
n1 <- length(which(model_data[post_recurrence_indxes,curr_f] == 1))
p1 <- round(n1/length(post_recurrence_indxes)*100,1)
stat_tb[i,"Stats_Pre"] <-  paste0(n0," (",p0,"%)")
stat_tb[i,"Stats_Post"] <- paste0(n1," (",p1,"%)")
}
}
nonrecurrent_pts_data <- model_data[which(model_data$study_id %in% nosbce_pt_Ids),]
n_no <- nrow(nonrecurrent_pts_data) #619991
recurrent_pts_data <- model_data[which(model_data$study_id %in% sbce_pt_Ids),]
n_yes<- nrow(recurrent_pts_data) # 72670
##statisc
mean(nonrecurrent_pts_data$Age,na.rm = T) #69.34246
mean(recurrent_pts_data$Age,na.rm = T) #66
mean(nonrecurrent_pts_data$months_since_dx,na.rm = T) #84.5
mean(recurrent_pts_data$months_since_dx,na.rm = T) #77.9
mean(nonrecurrent_pts_data$reg_nodes_exam,na.rm = T) #10.17263
mean(recurrent_pts_data$reg_nodes_exam,na.rm = T) #11.09704
mean(nonrecurrent_pts_data$reg_nodes_pos,na.rm = T) #10.17263
mean(recurrent_pts_data$reg_nodes_pos,na.rm = T) #11.09704
length(which(nonrecurrent_pts_data$CCS_D_42==1))/n_no*100
length(which(recurrent_pts_data$CCS_D_42==1))/n_yes*100
length(which(nonrecurrent_pts_data$CCS_D_24==1))/n_no*100
length(which(recurrent_pts_data$CCS_D_24==1))/n_yes*100
length(which(nonrecurrent_pts_data$C504==1))/n_no*100
length(which(recurrent_pts_data$C504==1))/n_yes*100
length(which(nonrecurrent_pts_data$surg_prim_site_23==1))/n_no*100
length(which(recurrent_pts_data$surg_prim_site_23==1))/n_yes*100
length(which(nonrecurrent_pts_data$Laterality_1==1))/n_no*100
length(which(recurrent_pts_data$Laterality_1==1))/n_yes*100
####Sample IDs
Total_n_test <- round(6259*0.1)
Total_n_validation <- round(6259*0.1)
Total_n_Train <- round(6259*0.5)
#1.Testing : Randomly choose 100 SBCE original pts data, and 100*8 noSBCE original pt Data
set.seed(123)
test_ID_SBCE <- sample(sbce_pt_Ids,100)
test_ID_noSBCE <- sample(nosbce_pt_Ids,100*8)
test_IDs <- c(test_ID_SBCE,test_ID_noSBCE)
#remove test ID from
remaining_ID <- final_ID[which(!final_ID %in% test_IDs)]
#1. Training 80% (50%)of the remaining_ID
training_ID <- sample(remaining_ID,length(remaining_ID)*0.8)
remaining_ID <- remaining_ID[which(!remaining_ID %in% training_ID)]
#2. validation 20% of the remaining_ID
validation_ID <- sample(remaining_ID,length(remaining_ID))
####Get data
train_data <- model_data[which(model_data$study_id %in% training_ID),]
table(train_data$y_PRE_OR_POST_2ndEvent) #114186   4707
#downsample
pos_idxes<- which(train_data$y_PRE_OR_POST_2ndEvent==1)
neg_idxes<- which(train_data$y_PRE_OR_POST_2ndEvent==0)
sampled_neg_indxes <- sample(neg_idxes,length(pos_idxes))
train_data <- train_data[c(sampled_neg_indxes,pos_idxes),]
validation_data <- model_data[which(model_data$study_id %in% validation_ID),]
table(validation_data$y_PRE_OR_POST_2ndEvent) #89164  4572
test_data <- model_data[which(model_data$study_id %in% test_IDs),]
table(test_data$y_PRE_OR_POST_2ndEvent) #96080  4381
train_data
#statitiscs
pre_recurrence_indxes <- which(train_data$y_PRE_OR_POST_2ndEvent==0)
post_recurrence_indxes <- which(train_data$y_PRE_OR_POST_2ndEvent==1)
features_tocompute <- c("months_since_dx","reg_age_at_dx","reg_nodes_exam","Age","reg_nodes_pos","CCS_D_42","CCS_D_24","C504","surg_prim_site_23","Laterality_1")
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
#statitiscs
pre_recurrence_indxes <- which(train_data$y_PRE_OR_POST_2ndEvent==0)
post_recurrence_indxes <- which(train_data$y_PRE_OR_POST_2ndEvent==1)
features_tocompute <- c("months_since_dx","reg_age_at_dx","reg_nodes_exam","Age","reg_nodes_pos","CCS_D_42","CCS_D_24","C504","surg_prim_site_23","Laterality_1")
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
avg0 <- round(mean(train_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
sd0 <- round(sd(train_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
avg1 <- round(mean(train_data[post_recurrence_indxes,curr_f],na.rm = T),1)
sd1  <- round(sd(train_data[post_recurrence_indxes,curr_f],na.rm = T),1)
stat_tb[i,"Stats_Pre"] <-  paste0(avg0," (",sd0,")")
stat_tb[i,"Stats_Post"] <- paste0(avg1," (",sd1,")")
}else{
n0 <- length(which(train_data[pre_recurrence_indxes,curr_f] == 1))
p0 <- round(n0/length(pre_recurrence_indxes)*100,1)
n1 <- length(which(train_data[post_recurrence_indxes,curr_f] == 1))
p1 <- round(n1/length(post_recurrence_indxes)*100,1)
stat_tb[i,"Stats_Pre"] <-  paste0(n0," (",p0,"%)")
stat_tb[i,"Stats_Post"] <- paste0(n1," (",p1,"%)")
}
}
table(train_data$y_PRE_OR_POST_2ndEvent)
nonrecurrent_pts_data <- model_data[which(model_data$study_id %in% nosbce_pt_Ids),]
n_no <- nrow(nonrecurrent_pts_data) #619991
recurrent_pts_data <- model_data[which(model_data$study_id %in% sbce_pt_Ids),]
n_yes<- nrow(recurrent_pts_data) # 72670
##statisc
mean(nonrecurrent_pts_data$Age,na.rm = T) #69.34246
mean(recurrent_pts_data$Age,na.rm = T) #66
mean(nonrecurrent_pts_data$months_since_dx,na.rm = T) #84.5
mean(recurrent_pts_data$months_since_dx,na.rm = T) #77.9
mean(nonrecurrent_pts_data$reg_nodes_exam,na.rm = T) #10.17263
mean(recurrent_pts_data$reg_nodes_exam,na.rm = T) #11.09704
mean(nonrecurrent_pts_data$reg_nodes_pos,na.rm = T) #10.17263
mean(recurrent_pts_data$reg_nodes_pos,na.rm = T) #11.09704
length(which(nonrecurrent_pts_data$CCS_D_42==1))/n_no*100
length(which(recurrent_pts_data$CCS_D_42==1))/n_yes*100
length(which(nonrecurrent_pts_data$CCS_D_24==1))/n_no*100
length(which(recurrent_pts_data$CCS_D_24==1))/n_yes*100
length(which(nonrecurrent_pts_data$C504==1))/n_no*100
length(which(recurrent_pts_data$C504==1))/n_yes*100
length(which(nonrecurrent_pts_data$surg_prim_site_23==1))/n_no*100
length(which(recurrent_pts_data$surg_prim_site_23==1))/n_yes*100
length(which(nonrecurrent_pts_data$Laterality_1==1))/n_no*100
length(which(recurrent_pts_data$Laterality_1==1))/n_yes*100
####Sample IDs
Total_n_test <- round(6259*0.1)
Total_n_validation <- round(6259*0.1)
Total_n_Train <- round(6259*0.5)
#1.Testing : Randomly choose 100 SBCE original pts data, and 100*8 noSBCE original pt Data
set.seed(123)
test_ID_SBCE <- sample(sbce_pt_Ids,100)
test_ID_noSBCE <- sample(nosbce_pt_Ids,100*8)
test_IDs <- c(test_ID_SBCE,test_ID_noSBCE)
#remove test ID from
remaining_ID <- final_ID[which(!final_ID %in% test_IDs)]
#1. Training 80% (50%)of the remaining_ID
training_ID <- sample(remaining_ID,length(remaining_ID)*0.8)
remaining_ID <- remaining_ID[which(!remaining_ID %in% training_ID)]
#2. validation 20% of the remaining_ID
validation_ID <- sample(remaining_ID,length(remaining_ID))
####Get data
train_data <- model_data[which(model_data$study_id %in% training_ID),]
table(train_data$y_PRE_OR_POST_2ndEvent) #114186   4707
table(train_data$y_PRE_OR_POST_2ndEvent)
#statitiscs
pre_recurrence_indxes <- which(train_data$y_PRE_OR_POST_2ndEvent==0)
post_recurrence_indxes <- which(train_data$y_PRE_OR_POST_2ndEvent==1)
features_tocompute <- c("months_since_dx","reg_age_at_dx","reg_nodes_exam","Age","reg_nodes_pos","CCS_D_42","CCS_D_24","C504","surg_prim_site_23","Laterality_1")
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
avg0 <- round(mean(train_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
sd0 <- round(sd(train_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
avg1 <- round(mean(train_data[post_recurrence_indxes,curr_f],na.rm = T),1)
sd1  <- round(sd(train_data[post_recurrence_indxes,curr_f],na.rm = T),1)
stat_tb[i,"Stats_Pre"] <-  paste0(avg0," (",sd0,")")
stat_tb[i,"Stats_Post"] <- paste0(avg1," (",sd1,")")
}else{
n0 <- length(which(train_data[pre_recurrence_indxes,curr_f] == 1))
p0 <- round(n0/length(pre_recurrence_indxes)*100,1)
n1 <- length(which(train_data[post_recurrence_indxes,curr_f] == 1))
p1 <- round(n1/length(post_recurrence_indxes)*100,1)
stat_tb[i,"Stats_Pre"] <-  paste0(n0," (",p0,"%)")
stat_tb[i,"Stats_Post"] <- paste0(n1," (",p1,"%)")
}
}
#statitiscs
pre_recurrence_indxes <- which(model_data$y_PRE_OR_POST_2ndEvent==0)
post_recurrence_indxes <- which(model_data$y_PRE_OR_POST_2ndEvent==1)
features_tocompute <- c("months_since_dx","reg_age_at_dx","reg_nodes_exam","Age","reg_nodes_pos","CCS_D_42","CCS_D_24","C504","surg_prim_site_23","Laterality_1")
stat_tb <- as.data.frame(matrix(NA, nrow = 10, ncol = 3))
colnames(stat_tb) <- c("Features","Stats_Pre","Stats_Post")
for (i in 1:length(features_tocompute)){
curr_f <- features_tocompute[i]
stat_tb[i,"Features"] <- curr_f
if (i <= 5){
avg0 <- round(mean(model_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
sd0 <- round(sd(model_data[pre_recurrence_indxes,curr_f],na.rm = T),1)
avg1 <- round(mean(model_data[post_recurrence_indxes,curr_f],na.rm = T),1)
sd1  <- round(sd(model_data[post_recurrence_indxes,curr_f],na.rm = T),1)
stat_tb[i,"Stats_Pre"] <-  paste0(avg0," (",sd0,")")
stat_tb[i,"Stats_Post"] <- paste0(avg1," (",sd1,")")
}else{
n0 <- length(which(model_data[pre_recurrence_indxes,curr_f] == 1))
p0 <- round(n0/length(pre_recurrence_indxes)*100,1)
n1 <- length(which(model_data[post_recurrence_indxes,curr_f] == 1))
p1 <- round(n1/length(post_recurrence_indxes)*100,1)
stat_tb[i,"Stats_Pre"] <-  paste0(n0," (",p0,"%)")
stat_tb[i,"Stats_Post"] <- paste0(n1," (",p1,"%)")
}
}
getwd()
write.csv(stat_tb,"/Users/lucasliu/Desktop/stats.csv")
6259 - 713
5546/713
