axis.title = element_text(size=40)) +
ggtitle("")+
scale_fill_manual(values=c("brown1","brown1", "#F8716F","#30B0BE"))
gp
gp = xgb.ggplot.importance(importance_matrix,top_n = 10,n_clusters = 1,cex = 2)
gp
gp
final_p
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10)) +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 40),
axis.text.y = element_text(size = 40),
axis.title = element_text(size=40)) +
ggtitle("")+
scale_fill_manual(values=c("brown1","brown1", "#F8716F","#30B0BE"))
final_p
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10)) +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")+
scale_fill_manual(values=c("brown1","brown1", "#F8716F","#30B0BE"))
final_p
importance_matrix$Group <- 1
gp = xgb.ggplot.importance(importance_matrix,top_n = 10,n_clusters = 1,cex = 2)
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10)+aes(fill =Group)) +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")+
scale_fill_manual(values=c("brown1","brown1", "#F8716F","#30B0BE"))
final_p
gp = xgb.ggplot.importance(importance_matrix,top_n = 10,n_clusters = 1,cex = 2)
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10)+aes(fill =Group)) +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")+
scale_fill_manual(values=c("brown1","brown1", "#F8716F","#30B0BE"))
importance_matrix$Group
importance_matrix
gp = xgb.ggplot.importance(importance_matrix,top_n = 10,n_clusters = 1)
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10)+aes(fill =Group)) +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")+
scale_fill_manual(values=c("brown1","brown1", "#F8716F","#30B0BE"))
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10))+aes(fill =Group) +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")+
scale_fill_manual(values=c("brown1","brown1", "#F8716F","#30B0BE"))
final_p
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10))+aes(fill =Group) +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")+
scale_fill_manual(values=c("brown1"))
final_p
importance_matrix$Group <- as.factor(1)
gp = xgb.ggplot.importance(importance_matrix,top_n = 10,n_clusters = 1)
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10))+aes(fill =Group) +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")+
scale_fill_manual(values=c("brown1","brown1", "#F8716F","#30B0BE"))
final_p
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10))+aes(color = "brown1") +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")
final_p
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10))+aes(fill = "brown1") +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")
final_p
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10))+aes(fill = "red") +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")
final_p
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10))+aes(fill = "darkred") +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")
final_p
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10))+
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")
final_p
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10))+aes(fill = "blue") +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")
final_p
final_p <- gp +geom_bar(stat="identity",position = position_dodge(width=10))+aes(fill = "brown1") +
theme_bw()+
theme(legend.position = "none",
#panel.grid.major = element_blank(), #remove grid
plot.title = element_text(size= 22),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title = element_text(size=20)) +
ggtitle("")
final_p
##statisc
mean(nonrecurrent_pts_data$Age,na.rm = T)
mean(recurrent_pts_data$Age,na.rm = T)
##statisc
mean(nonrecurrent_pts_data$Age,na.rm = T) #69.34246
mean(recurrent_pts_data$Age,na.rm = T) #66
mean(nonrecurrent_pts_data$months_since_dx,na.rm = T) #69.34246
mean(recurrent_pts_data$months_since_dx,na.rm = T) #66
mean(nonrecurrent_pts_data$reg_nodes_exam,na.rm = T) #84.5
mean(recurrent_pts_data$reg_nodes_exam,na.rm = T) #77.9
mean(nonrecurrent_pts_data$reg_nodes_pos,na.rm = T) #10.17263
mean(recurrent_pts_data$reg_nodes_pos,na.rm = T) #11.09704
mean(nonrecurrent_pts_data$CCS_D_42,na.rm = T) #10.17263
mean(recurrent_pts_data$CCS_D_42,na.rm = T) #11.09704
length(which(nonrecurrent_pts_data$CCS_D_42)==1)
length(which(nonrecurrent_pts_data$CCS_D_42==1)
)
length(which(nonrecurrent_pts_data$CCS_D_42==1))
length(which(recurrent_pts_data$CCS_D_42==1))
length(which(nonrecurrent_pts_data$CCS_D_24==1))
length(which(recurrent_pts_data$CCS_D_24==1))
length(which(nonrecurrent_pts_data$CCS_D_24==1))
length(which(recurrent_pts_data$CCS_D_24==1))
length(which(nonrecurrent_pts_data$C504==1))
length(which(recurrent_pts_data$C504==1))
length(which(nonrecurrent_pts_data$C504==1))
length(which(recurrent_pts_data$C504==1))
length(which(nonrecurrent_pts_data$surg_prim_site_23==1))
length(which(recurrent_pts_data$surg_prim_site_23==1))
length(which(nonrecurrent_pts_data$Laterality_1==1))
length(which(recurrent_pts_data$Laterality_1==1))
length(which(nonrecurrent_pts_data$Laterality_1==1))
library(openxlsx)
library(lubridate)
get_DAJCC_var_funtion <- function(kcr_data, pathology_results_col,clinical_results_col){
#Rules : consider the values from 'TNMPathT' first (which is pathology results),
#       if TNMPathT is in value of '88' or 'pX' (unknown) then you check the value from 'TNMClinT' (clinical diagnosis results
#pathology_results_col <- "TNMPathT"
#clinical_results_col <- "TNMClinT"
computed_value <- NA
for (i in 1:nrow(kcr_data)){
curr_res <- kcr_data[i,pathology_results_col]
if (curr_res %in% c("88","pX","") | is.na(curr_res) == T){ #if pathology is 88 or pX or NA
curr_res <- kcr_data[i,clinical_results_col]
if (curr_res %in% c("88","pX","") | is.na(curr_res) == T){ #if clinical is 88 or pX or NA
curr_res <- NA
}
}
computed_value[i] <- curr_res
}
return(computed_value)
}
#local
raw_data_dir <- "/Volumes/LJL_ExtPro/Data/Testing data for UH3 - Dec 16 2020/"
data_dir <- "/Users/lucasliu/Desktop/intermediate_data/"
per_month_data_dir <- "/Users/lucasliu/Desktop/intermediate_data/6_perMonthData_inValidMonth_perPatientData_V2_nonuniquecodes/"
perday_dir <- "/Users/lucasliu/Desktop/intermediate_data/3_perDay_PerPatientData/"
outdir <- "/Users/lucasliu/Desktop/intermediate_data/"
kcr_data <- read.csv(paste0(raw_data_dir, "uh3_kcrdata.csv"),stringsAsFactors = F)
#Compute DAJCC_T, DAJCC_M, DAJCC_N
kcr_data$DAJCC_T <- get_DAJCC_var_funtion(kcr_data,"TNMPathT","TNMClinT")
kcr_data$DAJCC_M <- get_DAJCC_var_funtion(kcr_data,"TNMPathM","TNMClinM")
kcr_data$DAJCC_N <- get_DAJCC_var_funtion(kcr_data,"TNMPathN","TNMClinN")
missing_table <- get_missing_rate_table(kcr_data,colnames(kcr_data))
source(Recapse_Ultility.R)
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
library(lubridate)
source(Recapse_Ultility.R)
get_DAJCC_var_funtion <- function(kcr_data, pathology_results_col,clinical_results_col){
#Rules : consider the values from 'TNMPathT' first (which is pathology results),
#       if TNMPathT is in value of '88' or 'pX' (unknown) then you check the value from 'TNMClinT' (clinical diagnosis results
#pathology_results_col <- "TNMPathT"
#clinical_results_col <- "TNMClinT"
computed_value <- NA
for (i in 1:nrow(kcr_data)){
curr_res <- kcr_data[i,pathology_results_col]
if (curr_res %in% c("88","pX","") | is.na(curr_res) == T){ #if pathology is 88 or pX or NA
curr_res <- kcr_data[i,clinical_results_col]
if (curr_res %in% c("88","pX","") | is.na(curr_res) == T){ #if clinical is 88 or pX or NA
curr_res <- NA
}
}
computed_value[i] <- curr_res
}
return(computed_value)
}
#local
kcr_data <- read.csv(paste0(raw_data_dir, "uh3_kcrdata.csv"),stringsAsFactors = F)
#Compute DAJCC_T, DAJCC_M, DAJCC_N
kcr_data$DAJCC_T <- get_DAJCC_var_funtion(kcr_data,"TNMPathT","TNMClinT")
kcr_data$DAJCC_M <- get_DAJCC_var_funtion(kcr_data,"TNMPathM","TNMClinM")
kcr_data$DAJCC_N <- get_DAJCC_var_funtion(kcr_data,"TNMPathN","TNMClinN")
missing_table <- get_missing_rate_table(kcr_data,colnames(kcr_data))
source(Recapse_Ultility.R)
source("Recapse_Ultility.R")
missing_table <- get_missing_rate_table(kcr_data,colnames(kcr_data))
#After exlcusion of seer
kcr_data$SEERSummStg2000
View(missing_table)
kcr_data[which(kcr_data=="",arr.ind = T),] <- NA
missing_table <- get_missing_rate_table(kcr_data,colnames(kcr_data))
which(kcr_data=="",arr.ind = T)
which(kcr_data==" ",arr.ind = T)
kcr_data <- read.csv(paste0(raw_data_dir, "uh3_kcrdata.csv"),stringsAsFactors = F)
which(kcr_data==" ",arr.ind = T)
which(kcr_data==" ",arr.ind = T)
table(kcr_data$SEERSummStg2000)
table(kcr_data$TNMPathM)
which(kcr_data$TNMPathM=="",arr.ind = T)
which(kcr_data=="",arr.ind = T)
library(openxlsx)
library(lubridate)
source("Recapse_Ultility.R")
get_DAJCC_var_funtion <- function(kcr_data, pathology_results_col,clinical_results_col){
#Rules : consider the values from 'TNMPathT' first (which is pathology results),
#       if TNMPathT is in value of '88' or 'pX' (unknown) then you check the value from 'TNMClinT' (clinical diagnosis results
#pathology_results_col <- "TNMPathT"
#clinical_results_col <- "TNMClinT"
computed_value <- NA
for (i in 1:nrow(kcr_data)){
curr_res <- kcr_data[i,pathology_results_col]
if (curr_res %in% c("88","pX","") | is.na(curr_res) == T){ #if pathology is 88 or pX or NA
curr_res <- kcr_data[i,clinical_results_col]
if (curr_res %in% c("88","pX","") | is.na(curr_res) == T){ #if clinical is 88 or pX or NA
curr_res <- NA
}
}
computed_value[i] <- curr_res
}
return(computed_value)
}
#local
raw_data_dir <- "/Volumes/LJL_ExtPro/Data/Testing data for UH3 - Dec 16 2020/"
data_dir <- "/Users/lucasliu/Desktop/intermediate_data/"
per_month_data_dir <- "/Users/lucasliu/Desktop/intermediate_data/6_perMonthData_inValidMonth_perPatientData_V2_nonuniquecodes/"
perday_dir <- "/Users/lucasliu/Desktop/intermediate_data/3_perDay_PerPatientData/"
outdir <- "/Users/lucasliu/Desktop/intermediate_data/"
kcr_data <- read.csv(paste0(raw_data_dir, "uh3_kcrdata.csv"),stringsAsFactors = F)
#Compute DAJCC_T, DAJCC_M, DAJCC_N
kcr_data$DAJCC_T <- get_DAJCC_var_funtion(kcr_data,"TNMPathT","TNMClinT")
kcr_data$DAJCC_M <- get_DAJCC_var_funtion(kcr_data,"TNMPathM","TNMClinM")
kcr_data$DAJCC_N <- get_DAJCC_var_funtion(kcr_data,"TNMPathN","TNMClinN")
which(kcr_data=="",arr.ind = T)
which(kcr_data==" ",arr.ind = T)
which(kcr_data=="",arr.ind = T)
missing_table <- get_missing_rate_table(kcr_data,colnames(kcr_data))
kcr_data[which(kcr_data=="",arr.ind = T)] <- NA
#After exlcusion of SEERSummStg2000 NA
kcr_data$SEERSummStg2000
missing_table <- get_missing_rate_table(kcr_data,colnames(kcr_data))
kcr_data <- read.csv(paste0(raw_data_dir, "uh3_kcrdata.csv"),stringsAsFactors = F)
#Compute DAJCC_T, DAJCC_M, DAJCC_N
kcr_data$DAJCC_T <- get_DAJCC_var_funtion(kcr_data,"TNMPathT","TNMClinT")
kcr_data$DAJCC_M <- get_DAJCC_var_funtion(kcr_data,"TNMPathM","TNMClinM")
kcr_data$DAJCC_N <- get_DAJCC_var_funtion(kcr_data,"TNMPathN","TNMClinN")
table(kcr_data$TNMClinM)
table(kcr_data$TNMPathM)
table(kcr_data$TNMClinM)
kcr_data[which(kcr_data=="",arr.ind = T)] <- NA
table(kcr_data$TNMClinM)
missing_table <- get_missing_rate_table(kcr_data,colnames(kcr_data))
table(kcr_data$TNMPathM)
#After exlcusion of SEERSummStg2000 NA
exlucde_indxes <- which(is.na(kcr_data$SEERSummStg2000)==T)
exlucde_indxes
kcr_data <- kcr_data[-exlucde_indxes,]
missing_table2 <- get_missing_rate_table(kcr_data,colnames(kcr_data))
View(missing_table2)
nrow(kcr_data)
#After exlcusion of SEERSummStg2000 NA
exlucde_indxes <- which(is.na(kcr_data$SEERSummStg2000)==T | kcr_data$SEERSummStg2000 == "")
exlucde_indxes
library(openxlsx)
library(lubridate)
source("Recapse_Ultility.R")
get_DAJCC_var_funtion <- function(kcr_data, pathology_results_col,clinical_results_col){
#Rules : consider the values from 'TNMPathT' first (which is pathology results),
#       if TNMPathT is in value of '88' or 'pX' (unknown) then you check the value from 'TNMClinT' (clinical diagnosis results
#pathology_results_col <- "TNMPathT"
#clinical_results_col <- "TNMClinT"
computed_value <- NA
for (i in 1:nrow(kcr_data)){
curr_res <- kcr_data[i,pathology_results_col]
if (curr_res %in% c("88","pX","") | is.na(curr_res) == T){ #if pathology is 88 or pX or NA
curr_res <- kcr_data[i,clinical_results_col]
if (curr_res %in% c("88","pX","") | is.na(curr_res) == T){ #if clinical is 88 or pX or NA
curr_res <- NA
}
}
computed_value[i] <- curr_res
}
return(computed_value)
}
#local
raw_data_dir <- "/Volumes/LJL_ExtPro/Data/Testing data for UH3 - Dec 16 2020/"
data_dir <- "/Users/lucasliu/Desktop/intermediate_data/"
per_month_data_dir <- "/Users/lucasliu/Desktop/intermediate_data/6_perMonthData_inValidMonth_perPatientData_V2_nonuniquecodes/"
perday_dir <- "/Users/lucasliu/Desktop/intermediate_data/3_perDay_PerPatientData/"
outdir <- "/Users/lucasliu/Desktop/intermediate_data/"
kcr_data <- read.csv(paste0(raw_data_dir, "uh3_kcrdata.csv"),stringsAsFactors = F)
#Compute DAJCC_T, DAJCC_M, DAJCC_N
kcr_data$DAJCC_T <- get_DAJCC_var_funtion(kcr_data,"TNMPathT","TNMClinT")
kcr_data$DAJCC_M <- get_DAJCC_var_funtion(kcr_data,"TNMPathM","TNMClinM")
kcr_data$DAJCC_N <- get_DAJCC_var_funtion(kcr_data,"TNMPathN","TNMClinN")
kcr_data[which(kcr_data=="",arr.ind = T)] <- NA
missing_table <- get_missing_rate_table(kcr_data,colnames(kcr_data))
table(kcr_data$TNMPathM)
#After exlcusion of SEERSummStg2000 NA
exlucde_indxes <- which(is.na(kcr_data$SEERSummStg2000)==T | kcr_data$SEERSummStg2000 == "")
#After exlcusion of SEERSummStg2000 NA
exlucde_indxes <- which(is.na(kcr_data$SEERSummStg2000)==T | kcr_data$SEERSummStg2000 == "")
length(exlucde_indxes)
kcr_data2 <- kcr_data[-exlucde_indxes,]
nrow(kcr_data2)
nrow(kcr_data2) # 12021
missing_table2 <- get_missing_rate_table(kcr_data2,colnames(kcr_data2))
kcr_data$BestStageGrp
table(kcr_data$BestStageGrp)
#After exlcusion of BestStageGrp  stage unkown or 0  or na
exclusion_indxes2 <- which(exclusion_df$BestStageGrp %in% c(0,1,2,seq(70,79,1),88,99) | is.na(exclusion_df$BestStageGrp)==T) #2788
#After exlcusion of BestStageGrp  stage unkown or 0  or na
exlucde_indxes <- which(kcr_data$BestStageGrp %in% c(0,1,2,seq(70,79,1),88,99) | is.na(kcr_data$BestStageGrp)==T) #2788
kcr_data3 <- kcr_data[-exlucde_indxes,]
nrow(kcr_data3) # 12021
missing_table2 <- get_missing_rate_table(kcr_data3,colnames(kcr_data3))
missing_table3 <- get_missing_rate_table(kcr_data3,colnames(kcr_data3))
View(missing_table3)
##statisc
mean(nonrecurrent_pts_data$Age,na.rm = T) #69.34246
source("Recapse_Ultility.R")
library(shapr)
#onHPC
data_dir <- "/recapse/intermediate_data/"
outdir <- "/recapse/intermediate_data/"
# # #local
# data_dir <- "/Users/lucasliu/Desktop/intermediate_data/"
# outdir <- "/Users/lucasliu/Desktop/intermediate_data/"
########################################################################################################
#load data
########################################################################################################
model_data <- read.csv(paste0(outdir,"15_ModelReadyData.csv"),stringsAsFactors = F)
################################################################################
#2. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
pts_level_char_df <- read.xlsx(paste0(data_dir,"/8_PatientLevel_charecteristics.xlsx"),sheet = 1)
final_ID <- unique(model_data$study_id)
pts_level_char_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% final_ID),]
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
original_noSBCE_toSBCEratio <- round(length(nosbce_pt_Ids)/length(sbce_pt_Ids))
##########START HERE##########
########################################################################################################
#### Data reprocessing 0521
### make sure no overlapping in original Ids in train,validation and test
########################################################################################################
nonrecurrent_pts_data <- model_data[which(model_data$study_id %in% nosbce_pt_Ids),]
nrow(nonrecurrent_pts_data) #619991
recurrent_pts_data <- model_data[which(model_data$study_id %in% sbce_pt_Ids),]
nrow(recurrent_pts_data) # 72670
##statisc
mean(nonrecurrent_pts_data$Age,na.rm = T) #69.34246
mean(recurrent_pts_data$Age,na.rm = T) #66
mean(nonrecurrent_pts_data$months_since_dx,na.rm = T) #84.5
mean(recurrent_pts_data$months_since_dx,na.rm = T) #77.9
mean(nonrecurrent_pts_data$reg_nodes_exam,na.rm = T) #10.17263
mean(recurrent_pts_data$reg_nodes_exam,na.rm = T) #11.09704
mean(nonrecurrent_pts_data$reg_nodes_pos,na.rm = T) #10.17263
mean(recurrent_pts_data$reg_nodes_pos,na.rm = T) #11.09704
length(which(nonrecurrent_pts_data$CCS_D_42==1))
length(which(recurrent_pts_data$CCS_D_42==1))
length(which(nonrecurrent_pts_data$CCS_D_24==1))
length(which(recurrent_pts_data$CCS_D_24==1))
length(which(nonrecurrent_pts_data$C504==1))
length(which(recurrent_pts_data$C504==1))
length(which(nonrecurrent_pts_data$surg_prim_site_23==1))
length(which(recurrent_pts_data$surg_prim_site_23==1))
length(which(nonrecurrent_pts_data$Laterality_1==1))
length(which(recurrent_pts_data$Laterality_1==1))
setwd("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC")
source("Recapse_Ultility.R")
library(shapr)
#onHPC
data_dir <- "/recapse/intermediate_data/"
outdir <- "/recapse/intermediate_data/"
# #local
data_dir <- "/Users/lucasliu/Desktop/intermediate_data/"
outdir <- "/Users/lucasliu/Desktop/intermediate_data/"
########################################################################################################
#load data
########################################################################################################
model_data <- read.csv(paste0(outdir,"15_ModelReadyData.csv"),stringsAsFactors = F)
################################################################################
#2. Load patient level char to get SBCE or not to make sure original ID not in both train and validation
################################################################################
pts_level_char_df <- read.xlsx(paste0(data_dir,"/8_PatientLevel_charecteristics.xlsx"),sheet = 1)
final_ID <- unique(model_data$study_id)
pts_level_char_df <- pts_level_char_df[which(pts_level_char_df$study_id %in% final_ID),]
sbce_pt_Ids <-   unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 1)])
nosbce_pt_Ids <- unique(pts_level_char_df$study_id[which(pts_level_char_df$SBCE == 0)])
original_noSBCE_toSBCEratio <- round(length(nosbce_pt_Ids)/length(sbce_pt_Ids))
##########START HERE##########
########################################################################################################
#### Data reprocessing 0521
### make sure no overlapping in original Ids in train,validation and test
########################################################################################################
nonrecurrent_pts_data <- model_data[which(model_data$study_id %in% nosbce_pt_Ids),]
nrow(nonrecurrent_pts_data) #619991
recurrent_pts_data <- model_data[which(model_data$study_id %in% sbce_pt_Ids),]
nrow(recurrent_pts_data) # 72670
##statisc
mean(nonrecurrent_pts_data$Age,na.rm = T) #69.34246
mean(recurrent_pts_data$Age,na.rm = T) #66
n_no <- nrow(nonrecurrent_pts_data) #619991
n_yes<- nrow(recurrent_pts_data) # 72670
##statisc
mean(nonrecurrent_pts_data$Age,na.rm = T) #69.34246
mean(recurrent_pts_data$Age,na.rm = T) #66
mean(nonrecurrent_pts_data$months_since_dx,na.rm = T) #84.5
mean(recurrent_pts_data$months_since_dx,na.rm = T) #77.9
mean(nonrecurrent_pts_data$reg_nodes_exam,na.rm = T) #10.17263
mean(recurrent_pts_data$reg_nodes_exam,na.rm = T) #11.09704
mean(nonrecurrent_pts_data$reg_nodes_pos,na.rm = T) #10.17263
mean(recurrent_pts_data$reg_nodes_pos,na.rm = T) #11.09704
length(which(nonrecurrent_pts_data$CCS_D_42==1))/n_no
length(which(recurrent_pts_data$CCS_D_42==1))/n_yes
length(which(nonrecurrent_pts_data$CCS_D_42==1))/n_no*100
length(which(recurrent_pts_data$CCS_D_42==1))/n_yes*100
length(which(recurrent_pts_data$CCS_D_42==1))/n_yes*100
length(which(nonrecurrent_pts_data$CCS_D_42==1))/n_no*100
length(which(recurrent_pts_data$CCS_D_42==1))/n_yes*100
length(which(nonrecurrent_pts_data$CCS_D_24==1))/n_no*100
length(which(recurrent_pts_data$CCS_D_24==1))/n_yes*100
length(which(nonrecurrent_pts_data$C504==1))/n_no*100
length(which(recurrent_pts_data$C504==1))/n_yes*100
length(which(nonrecurrent_pts_data$surg_prim_site_23==1))/n_no*100
length(which(recurrent_pts_data$surg_prim_site_23==1))/n_yes*100
length(which(nonrecurrent_pts_data$surg_prim_site_23==1))/n_no*100
length(which(recurrent_pts_data$surg_prim_site_23==1))/n_yes*100
length(which(nonrecurrent_pts_data$Laterality_1==1))/n_no*100
length(which(recurrent_pts_data$Laterality_1==1))/n_yes*100
