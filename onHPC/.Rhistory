########################################################################################################
#1. Load all pts model data with four top features
########################################################################################################
#1A. Load data
load(file = paste0(data_dir, "Top4PCAFeature_ModelReadyData_Train.rda"))
963687+32473
#2B. Original NEG POS ratio
compute_sp_label_ratio(model_data_4f)
########################################################################################################
#2. OBV NEGTIVES
#Find best combination of thresholds for features for NEGs
# Best:
#1. good precision of selected negative samples (Proportion of neg is high)
#2  neg:pos ratio of after exclusion is OK (more balanced)
########################################################################################################
#2A. Get threshold list by checking the distribution plot
#Anyone with values < thres_list is considered as obv negtives
thres1_list <- seq(0,0.2,0.1) #CCS 227
thres2_list <- seq(24,48,4)   #Month since dx
#2B.Get precisions and neg:pos ratio for each combination of threshold
n_thres1 <- length(thres1_list)
n_thres2 <- length(thres2_list)
n_comb   <- n_thres1*n_thres2
print(n_comb)
prec_ratio_tb <- as.data.frame(matrix(NA, nrow = n_comb,ncol = 6))
colnames(prec_ratio_tb) <- c("Threshold_PROC202",
"Threshold_PROC227",
"Threshold_months_since_dx",
"NEG_Percentage_SelectedSamples", #this is also the precision of negtives in the sample
"NEGtoPOS_Ratio_SelectedSamples",
"NEGtoPOS_Ratio_AfterExclusion")
ct <- 1
for (i in 1:length(thres1_list)){
if(i %% 2 == 0){print(i)}
thres1 <- thres1_list[i]
for (j in 1:length(thres2_list)){
thres2 <- thres2_list[j]
prec_ratio_tb[ct,"Threshold_PROC202"] <- paste0("=","-1")
prec_ratio_tb[ct,"Threshold_PROC227"] <- paste0("<",thres1)
prec_ratio_tb[ct,"Threshold_months_since_dx"] <- paste0("<",thres2)
#Data to be treated as negatives
sample1_idxes <- which(model_data_4f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_4f[,"cumul_ratio_CCS_PROC_227"] < thres1 |
model_data_4f[,"months_since_dx"] < thres2 )
sample1_data  <- model_data_4f[sample1_idxes,]
sp_res        <- compute_sp_label_ratio(sample1_data)
#Presicion of negatives of selected samples (i.e,For this samples, we predict them all as "pre")
prec_ratio_tb[ct,"NEG_Percentage_SelectedSamples"] <- sp_res["Pre"]/(sp_res["Pre"] + sp_res["Post"])
#Pre to post ratio
prec_ratio_tb[ct,"NEGtoPOS_Ratio_SelectedSamples"] <- sp_res["Ratio"]
#after
after_data <- model_data_4f[-sample1_idxes,]
after_res <- compute_sp_label_ratio(after_data)
prec_ratio_tb[ct,"NEGtoPOS_Ratio_AfterExclusion"] <- after_res["Ratio"]
ct <- ct + 1
}
}
##2C. Plot neg:pos ratio vs. percentage of negative after exclusion
x_col = "NEG_Percentage_SelectedSamples"
y_col = "NEGtoPOS_Ratio_AfterExclusion"
x_lab = "Precision of Negatives (Percentage of Negatives) \n in Selected Samples"
y_lab = "Negative to Positive Ratio After Exclusion \n (non-obvious cases)"
ylim_min = 19
p <- plot_ratio_vs_perc_func(prec_ratio_tb, x_col,y_col,x_lab,y_lab,ylim_min)
print(p)
p <- plot_ratio_vs_perc_func(prec_ratio_tb, x_col,y_col,x_lab,y_lab,ylim_min)
png(paste0(outdir,"Precision_Ratio_Plot_NEG.png"),res = 150,width = 1000,height = 800)
print(p)
dev.off()
View(prec_ratio_tb)
#2D. Find the best thresholds by checking the figure
if (SBCE_col == "SBCE_Excluded_DeathLabel" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <-  0.9812913
turning_pt_y <-  19.94299
}else if (SBCE_col == "SBCE" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.9814992
turning_pt_y <- 19.80003
}else if (SBCE_col == "SBCE_Excluded_DeathPts" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.9826699
turning_pt_y <- 19.69092
}
var_name1 <- "Threshold_PROC202"
var_name2 <- "Threshold_PROC227"
var_name3 <- "Threshold_months_since_dx"
thres_neg <- find_final_thres_func(prec_ratio_tb, x_col,y_col,turning_pt_x, turning_pt_y,var_name1, var_name2,var_name3)
thres_neg
thres_neg <- find_final_thres_func(prec_ratio_tb, x_col,y_col,turning_pt_x, turning_pt_y,var_name1, var_name2,var_name3)
write.csv(thres_neg,paste0(outdir,"Threshold_NEG.csv"))
########################################################################################################
#3. OBV Postives
#######################################################################################################
#3A. Get threshold list by checking the distribution plot
thres1_lower <- seq(1,2,0.5)      #CCS 227
thres1_upper <- seq(3,4,0.5)      #CCS 227
thres2_lower <- seq(48,60,4)      #month since dx
thres2_upper <- seq(78,90,4)      #month since dx
thres3_lower <- seq(0.1,0.2,0.05) #CCS 202
thres3_upper <- seq(0.3,0.4,0.05) #CCS 202
#3B.Get precisions and neg:pos ratio for each combination of threshold
n_thres1 <- length(thres1_lower)
n_thres2 <- length(thres2_lower)
n_thres3 <- length(thres3_lower)
n_comb   <- n_thres1*n_thres2
print(n_comb)
prec_ratio_tb <- as.data.frame(matrix(NA, nrow = n_comb,ncol = 6))
colnames(prec_ratio_tb) <- c("Threshold_PROC202","Threshold_PROC227","Threshold_months_since_dx",
"POS_Percentage_SelectedSamples", #this is also the precision of pos in the sample
"NEGtoPOS_Ratio_SelectedSamples",
"NEGtoPOS_Ratio_AfterExclusion")
ct <- 1
for (i in 1:n_thres1){
if(i %% 1 == 0){print(i)}
thres1_l <- thres1_lower[i]
thres1_u <- thres1_upper[i]
for (j in 1:n_thres2){
thres2_l <- thres2_lower[j]
thres2_u <- thres2_upper[j]
for (k in 1:n_thres3){
thres3_l <- thres3_lower[k]
thres3_u <- thres3_upper[k]
prec_ratio_tb[ct,"Threshold_PROC202"] <- paste0(thres3_l ," < V < ",thres3_u)
prec_ratio_tb[ct,"Threshold_PROC227"] <- paste0(thres1_l ," < V < ",thres1_u)
prec_ratio_tb[ct,"Threshold_months_since_dx"] <-  paste0(thres2_l ," < V < ",thres2_u)
#Data to be treated as negatives
sample1_idxes <- which((model_data_4f[,"cumul_ratio_CCS_PROC_202"] >  thres3_l  & model_data_4f[,"cumul_ratio_CCS_PROC_202"] <  thres3_u )|
(model_data_4f[,"cumul_ratio_CCS_PROC_227"] > thres1_l & model_data_4f[,"cumul_ratio_CCS_PROC_227"] < thres1_u) |
(model_data_4f[,"months_since_dx"] > thres2_l & model_data_4f[,"months_since_dx"] < thres2_u))
sample1_data  <- model_data_4f[sample1_idxes,]
sp_res        <- compute_sp_label_ratio(sample1_data)
#Presicion of postives of selected samples (i.e,For this samples, we predict them all as "post")
prec_ratio_tb[ct,"POS_Percentage_SelectedSamples"] <- sp_res["Post"]/(sp_res["Pre"] + sp_res["Post"])
#Pre to post ratio
prec_ratio_tb[ct,"NEGtoPOS_Ratio_SelectedSamples"] <- sp_res["Ratio"]
#after
after_data <- model_data_4f[-sample1_idxes,]
after_res <- compute_sp_label_ratio(after_data)
prec_ratio_tb[ct,"NEGtoPOS_Ratio_AfterExclusion"] <- after_res["Ratio"]
ct <- ct + 1
}
}
}
##3C. Plot neg:pos ratio vs. percentage of postive after exclusion
x_col = "POS_Percentage_SelectedSamples"
y_col = "NEGtoPOS_Ratio_AfterExclusion"
x_lab = "Precision of Postives (Percentage of Postives) \n in Selected Samples"
y_lab = "Negative to Positive Ratio After Exclusion \n (non-obvious cases)"
ylim_min = 33
p <- plot_ratio_vs_perc_func(prec_ratio_tb, x_col,y_col,x_lab,y_lab,ylim_min)
png(paste0(outdir,"Precision_Ratio_Plot_POS.png"),res = 150,width = 1000,height = 800)
print(p)
dev.off()
#3D. Find the best thresholds by checking the figure
if (SBCE_col == "SBCE_Excluded_DeathLabel" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417078
turning_pt_y <- 35.81769
}else if (SBCE_col == "SBCE" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417920
turning_pt_y <- 34.18392
}else if (SBCE_col == "SBCE_Excluded_DeathPts" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.04257926
turning_pt_y <- 34.04217
}
var_name1 <- "Threshold_PROC202"
var_name2 <- "Threshold_PROC227"
var_name3 <- "Threshold_months_since_dx"
thres_pos <- find_final_thres_func(prec_ratio_tb, x_col,y_col,turning_pt_x, turning_pt_y,var_name1, var_name2,var_name3)
#3D. Find the best thresholds by checking the figure
if (SBCE_col == "SBCE_Excluded_DeathLabel" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417078
turning_pt_y <- 35.81769
}else if (SBCE_col == "SBCE" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417920
turning_pt_y <- 34.18392
}else if (SBCE_col == "SBCE_Excluded_DeathPts" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.04257926
turning_pt_y <- 34.04217
}
var_name1 <- "Threshold_PROC202"
var_name2 <- "Threshold_PROC227"
var_name3 <- "Threshold_months_since_dx"
thres_pos <- find_final_thres_func(prec_ratio_tb, x_col,y_col,turning_pt_x, turning_pt_y,var_name1, var_name2,var_name3)
#3D. Find the best thresholds by checking the figure
if (SBCE_col == "SBCE_Excluded_DeathLabel" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417078
turning_pt_y <- 35.81769
}else if (SBCE_col == "SBCE" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0417920
turning_pt_y <- 34.18392
}else if (SBCE_col == "SBCE_Excluded_DeathPts" & feature_set_name == "CCSandVAL2nd"){
turning_pt_x <- 0.0425793
turning_pt_y <- 34.04217
}
var_name1 <- "Threshold_PROC202"
var_name2 <- "Threshold_PROC227"
var_name3 <- "Threshold_months_since_dx"
thres_pos <- find_final_thres_func(prec_ratio_tb, x_col,y_col,turning_pt_x, turning_pt_y,var_name1, var_name2,var_name3)
thres_pos
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/12D_IdentifyOBVs4_FindSelectionCriteria_Train.R")
74971/3833
292052
/14030
292052/14030
78804122760 +45502+
0
78804+122760 +45502+
0
505537 + 184541 + 306082
292052 + 14030
271976 + 13061
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/18_ComputeDispStats.R")
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/18_ComputeDispStats.R")
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
SBCE_col    <- "SBCE_Excluded_DeathPts" #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
feature_set_name <- "CCSandVAL2nd"
if ((SBCE_col == "SBCE") | (SBCE_col == "SBCE_Excluded_DeathPts")){
label_col   <- "y_PRE_OR_POST_2ndEvent"
}else{
label_col   <- "y_PRE_OR_POST_2ndEvent_ExcludedDeath"
}
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
data_dir2  <- paste0(proj_dir,"12E_OBVandNONOBV_SamplesIDs/",feature_set_name,"/",SBCE_col,"/")
newout <- paste0("18_Discrip_Statistics/",feature_set_name,"/",SBCE_col,"/")
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
################################################################################
#1.Load all train and test IDs with flag for obv pos/neg or non obv
################################################################################
train_res <- load_obsSample_IDs(data_dir2,"Train",pt_char_df)
all_train_df <- train_res[[1]]
all_train_pt_ids <- train_res[[2]] #14592
all_train_sp_ids <- train_res[[3]] #999117
test_res <- load_obsSample_IDs(data_dir2,"Test",pt_char_df)
all_test_df <- test_res[[1]]
all_test_pt_ids <- test_res[[2]] #3647
test_res <- load_obsSample_IDs(data_dir2,"Test",pt_char_df)
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/18_ComputeDispStats.R")
source("Recapse_Ultility.R")
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
SBCE_col    <- "SBCE_Excluded_DeathPts" #Choose SBCE or SBCE_Excluded_DeathLabel or SBCE_Excluded_DeathPts
feature_set_name <- "CCSandVAL2nd"
if ((SBCE_col == "SBCE") | (SBCE_col == "SBCE_Excluded_DeathPts")){
label_col   <- "y_PRE_OR_POST_2ndEvent"
}else{
label_col   <- "y_PRE_OR_POST_2ndEvent_ExcludedDeath"
}
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
data_dir2  <- paste0(proj_dir,"12E_OBVandNONOBV_SamplesIDs/",feature_set_name,"/",SBCE_col,"/")
newout <- paste0("18_Discrip_Statistics/",feature_set_name,"/",SBCE_col,"/")
outdir   <- paste0(proj_dir, newout)
dir.create(file.path(proj_dir, newout), recursive = TRUE)
################################################################################
#1. Load PTS level char for all analysis IDs
################################################################################
pt_char_df <- load_pt_char_func(data_dir1)
################################################################################
#1.Load all train and test IDs with flag for obv pos/neg or non obv
################################################################################
train_res <- load_obsSample_IDs(data_dir2,"Train",pt_char_df)
all_train_df <- train_res[[1]]
all_train_pt_ids <- train_res[[2]] #14592
all_train_sp_ids <- train_res[[3]] #999117
test_res <- load_obsSample_IDs(data_dir2,"Test",pt_char_df)
all_test_df <- test_res[[1]]
all_test_pt_ids <- test_res[[2]] #3647
all_test_sp_ids <- test_res[[3]] #248732
all_analysis_pt_ids <-c(all_train_pt_ids,all_test_pt_ids) #18239
all_analysis_sp_ids <-c(all_train_sp_ids,all_test_sp_ids) #1247849
################################################################################
#3.Fiter pt char df for anlaysis Ids
################################################################################
pt_char_df <- pt_char_df[which(pt_char_df[,"study_id"] %in% all_analysis_pt_ids),]
length(all_analysis_pt_ids)
#4.(Sample Level) Report pre/post status and number of sbce/nonsbce patients
#A. All Training
#B. All Testing
#C. obvious neg training
#D. obvious pos training
#E. non-obvious training
#F. obvious neg test
#G. obvious pos test
#H. non-obvious test
################################################################################
train_num_df1 <- compute_prepost_and_sbcepts_func(all_train_df, SBCE_col)
source("~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/18_ComputeDispStats.R")
14030*2
292052 + 14030
1322-1185
source("Recapse_Ultility.R")
exclusion_func <- function(in_data){
exclusion1_indxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
exclusion2_indxes <- which(in_data[,"Stage"]  %in% c(0,4) |
is.na(in_data[,"Stage"])==T) #3491
exclusion3_indxes <- which(in_data[,"Comb_SEERSummStg"]  %in% c(0,7,9) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
exclusion4_indxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
all_exc_indexes <- unique(c(exclusion1_indxes,exclusion2_indxes,exclusion3_indxes,exclusion4_indxes))
updated_in_data <- in_data[-all_exc_indexes,]
return(updated_in_data)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
outdir   <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
################################################################################
#1. Load pts level char
################################################################################
patient_level_char_df1 <- read.xlsx(paste0(data_dir1,"8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
#patient_level_char_df2 <- read.xlsx(paste0(data_dir1,"8_PatientLevel_char_WithEveryMonthsHasCodes.xlsx"),sheet = 1)
################################################################################
#3.Analysis ID
################################################################################
analysis_ID1 <- unique(patient_level_char_df1$study_id)
length(analysis_ID1)
View(patient_level_char_df1)
################################################################################
#Exclusion 1: Has_ValidClaims_inRange == 0
#Exclusion 2: Stage 0 (0-2), Stage IV [70-80) ,Unknown (88,99) (Stage(BestStageGrp) )
#Exclusion 3 : non- local or regional stage for 1st priamry bc (SEERSummStg2000 stages  != 1,2,3,4,5) #In-situ 0; Localized 1; Regional 2-5; Distant 7
#Exclusion 4: diagnoise of first primary BC not in 2004 to 2015
################################################################################
#1.For enrollment moths record that allow no codes in the months
patient_level_char_df1 <- exclusion_func(patient_level_char_df1)
################################################################################
#1. Load pts level char
################################################################################
patient_level_char_df1 <- read.xlsx(paste0(data_dir1,"8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
indata <- patient_level_char_df1
exclusion1_indxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
in_data <- patient_level_char_df1
exclusion1_indxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
in_data <- patient_level_char_df1
in_data <- patient_level_char_df1
idxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
in_data <- in_data[-idxes,]
min(in_data$reg_age_at_dx)
in_data <- patient_level_char_df1
min(in_data$reg_age_at_dx)
in_data <- patient_level_char_df1
idxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
in_data <- in_data[-idxes,]
in_data <- patient_level_char_df1
idxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
in_data <- in_data[-idxes,]
idxes <- which(in_data[,"Stage"]  %in% c(0,4) |is.na(in_data[,"Stage"])==T) #3491
in_data <- in_data[-idxes,]
table(in_data$regional)
table(in_data$Comb_SEERSummStg)
452 + 4533 + 902
4899  + 696
idxes <- which(in_data[,"Stage"]  %in% c(0,4) |is.na(in_data[,"Stage"])==T) #3491
idxes <- which(in_data[,"Comb_SEERSummStg"]  %in% c(0,7,9) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
in_data <- in_data[-idxes,]
idxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
in_data <- in_data[-idxes,]
table(in_data$regional)
table(in_data$Comb_SEERSummStg)
in_data <- patient_level_char_df1
idxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
in_data <- in_data[-idxes,]
idxes <- which(in_data[,"Stage"]  %in% c(0,4) |is.na(in_data[,"Stage"])==T) #3491
in_data <- in_data[-idxes,]
idxes <- which(in_data[,"Comb_SEERSummStg"]  %in% c(0,7,9) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
in_data <- in_data[-idxes,]
table(in_data[,"Comb_SEERSummStg"])
table(patient_level_char_df1[,"Comb_SEERSummStg"])
idxes <- which(!in_data[,"Comb_SEERSummStg"]  %in% c(1,2,3,4,5) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
in_data <- patient_level_char_df1
idxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
in_data <- in_data[-idxes,]
idxes <- which(in_data[,"Stage"]  %in% c(0,4) |is.na(in_data[,"Stage"])==T) #3491
in_data <- in_data[-idxes,]
idxes <- which(!in_data[,"Comb_SEERSummStg"]  %in% c(1,2,3,4,5) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
in_data <- in_data[-idxes,]
idxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
in_data <- in_data[-idxes,]
table(in_data$Comb_SEERSummStg)
in_data <- patient_level_char_df1
idxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
in_data[idxes,"Diagnosis_Year"]
table(in_data[idxes,"Diagnosis_Year"])
in_data <- patient_level_char_df1
idxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
in_data <- in_data[-idxes,]
idxes <- which(in_data[,"Stage"]  %in% c(0,4) |is.na(in_data[,"Stage"])==T) #3491
in_data[idxes,"Stage"]
table(in_data[idxes,"Stage"])
in_data[,"Comb_SEERSummStg"]
table(in_data[,"Comb_SEERSummStg"])
in_data <- patient_level_char_df1
idxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
in_data <- in_data[-idxes,]
idxes <- which(in_data[,"Stage"]  %in% c(0,4) |is.na(in_data[,"Stage"])==T) #3491
in_data <- in_data[-idxes,]
idxes <- which(!in_data[,"Comb_SEERSummStg"]  %in% c(1,2,3,4,5) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
length(idxes)
idxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
length(idxes)
in_data <- patient_level_char_df1
idxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
in_data <- in_data[-idxes,]
idxes <- which(in_data[,"Stage"]  %in% c(0,4) |is.na(in_data[,"Stage"])==T) #3491
in_data <- in_data[-idxes,]
idxes <- which(!in_data[,"Comb_SEERSummStg"]  %in% c(1,2,3,4,5) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
in_data <- in_data[-idxes,]
idxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
length(idxes)
source("Recapse_Ultility.R")
exclusion_func <- function(in_data){
exclusion1_indxes <- which(in_data[,"HasEnoughMonths_InWindow"] ==0 |
is.na(in_data[,"HasEnoughMonths_InWindow"])==T) #999
exclusion2_indxes <- which(in_data[,"Stage"]  %in% c(0,4) |
is.na(in_data[,"Stage"])==T) #3491
exclusion3_indxes <- which(in_data[,"Comb_SEERSummStg"]  %in% c(0,7,9) |
is.na(in_data[,"Comb_SEERSummStg"])==T) #3382
exclusion4_indxes <- which(in_data[,"Diagnosis_Year"]<2004 | in_data[,"Diagnosis_Year"]>2015|
is.na(in_data[,"Diagnosis_Year"])==T) #7393
all_exc_indexes <- unique(c(exclusion1_indxes,exclusion2_indxes,exclusion3_indxes,exclusion4_indxes))
updated_in_data <- in_data[-all_exc_indexes,]
return(updated_in_data)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
outdir   <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
################################################################################
#1. Load pts level char
################################################################################
patient_level_char_df1 <- read.xlsx(paste0(data_dir1,"8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
#patient_level_char_df2 <- read.xlsx(paste0(data_dir1,"8_PatientLevel_char_WithEveryMonthsHasCodes.xlsx"),sheet = 1)
################################################################################
#3.Analysis ID
################################################################################
analysis_ID1 <- unique(patient_level_char_df1$study_id)
#analysis_ID2 <- unique(patient_level_char_df2$study_id)
################################################################################
#Exclusion 1: Has_ValidClaims_inRange == 0
#Exclusion 2: Stage 0 (0-2), Stage IV [70-80) ,Unknown (88,99) (Stage(BestStageGrp) )
#Exclusion 3 : non- local or regional stage for 1st priamry bc (SEERSummStg2000 stages  != 1,2,3,4,5) #In-situ 0; Localized 1; Regional 2-5; Distant 7
#Exclusion 4: diagnoise of first primary BC not in 2004 to 2015
################################################################################
#1.For enrollment moths record that allow no codes in the months
patient_level_char_df1 <- exclusion_func(patient_level_char_df1)
#patient_level_char_df2 <- exclusion_func(patient_level_char_df2)
final_IDs1 <- as.data.frame(patient_level_char_df1[,"study_id"])
colnames(final_IDs1) <- "study_id"
View(final_IDs1)
