unique(drug_grp_df[,"VAL_SECONDARY_group"])
unique(length(drug_grp_df$specific_group))
unique(drug_grp_df$specific_group)
################################################################################
#1.Load group df
################################################################################
drug_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Drug_And_Groups_inALLClaims.xlsx"),sheet = 1)
#reformat
#Drug:
indx1 <- which(drug_grp_df[,"TYPE"] == "DRUG_THERA_CLS_AHFS")
drug_grp_df[indx1,"TYPE"] <- "DRUG_AHFS"  #change type name
#replace space, "(" and "/" by "_"
drug_grp_df[,"VAL_SECONDARY_group"] <- gsub(" |/|\\(","_",drug_grp_df[,"VAL_SECONDARY_group"])
drug_grp_df[,"VAL_SECONDARY_group"] <- gsub(")","",drug_grp_df[,"VAL_SECONDARY_group"])
drug_grp_df[,"VAL_SECONDARY_group"] <- gsub("___","_",drug_grp_df[,"VAL_SECONDARY_group"])
drug_grp_df[,"VAL_SECONDARY_group"] <- gsub("__","_",drug_grp_df[,"VAL_SECONDARY_group"])
#add prefix
drug_grp_df[,"VAL_SECONDARY_group"] <- paste0("VAL_2ND_",drug_grp_df[,"VAL_SECONDARY_group"])
colnames(drug_grp_df)[which(colnames(drug_grp_df) == "VAL_SECONDARY_group")] <- "VAL_2ND" #change column names
View(drug_grp_df)
################################################################################
#2.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir3,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
########################################################################################################################
#Use the following code to run in case out of memory when procssing all at one time
########################################################################################################################
grp_type <- "VAL_2ND"
ID_processed <- as.numeric(gsub(paste0("_Month_",grp_type, "_Feature.xlsx|ID"),"",list.files(paste0(outdir, "Feature/"))))
if (length(ID_processed) != 0 ){
analysis_IDs <- analysis_IDs[-which(analysis_IDs %in% ID_processed)]
}
print(length(analysis_IDs))
curr_id <- 10000
curr_file <- paste0("ID",curr_id,"_perMonthData_Enrolled_inPredictionWindow.xlsx")
#per month df
curr_perMonth_df <- read.xlsx(paste0(data_dir2,curr_file),sheet = 1)
#Make sure no code has all NAs rows
#NOTE this was also done in previous code when generate in prediction Window
curr_perMonth_df <- curr_perMonth_df[,colSums(is.na(curr_perMonth_df))<nrow(curr_perMonth_df)]
ncol(curr_perMonth_df)
code_names <- colnames(curr_perMonth_df)[5:ncol(curr_perMonth_df)]
#unique codes
curr_drug_AHFS_codes  <-   get_codes_func(code_names,"DRUG_AHFS")
source("Recapse_Ultility.R")
code_names <- colnames(curr_perMonth_df)[5:ncol(curr_perMonth_df)]
#unique codes
curr_drug_AHFS_codes  <-   get_codes_func(code_names,"DRUG_AHFS")
curr_drug_NDC_codes   <-  get_codes_func(code_names,"DRUG_NDC")
unique_codes_df   <- rbind(curr_drug_AHFS_codes,curr_drug_NDC_codes)
unique_codes_df
code_names
View(curr_perMonth_df)
curr_id<-10002
curr_file <- paste0("ID",curr_id,"_perMonthData_Enrolled_inPredictionWindow.xlsx")
#per month df
curr_perMonth_df <- read.xlsx(paste0(data_dir2,curr_file),sheet = 1)
#Make sure no code has all NAs rows
#NOTE this was also done in previous code when generate in prediction Window
curr_perMonth_df <- curr_perMonth_df[,colSums(is.na(curr_perMonth_df))<nrow(curr_perMonth_df)]
code_names <- colnames(curr_perMonth_df)[5:ncol(curr_perMonth_df)]
#unique codes
curr_drug_AHFS_codes  <-   get_codes_func(code_names,"DRUG_AHFS")
curr_drug_NDC_codes   <-  get_codes_func(code_names,"DRUG_NDC")
unique_codes_df   <- rbind(curr_drug_AHFS_codes,curr_drug_NDC_codes)
View(unique_codes_df)
#find grp info for each unique code
unique_codes_df[,"GRPS"] <- find_listofcode_grp_func(unique_codes_df,grp_type,drug_grp_df)
View(unique_codes_df)
#unique groups
unique_grps <- unique(unique_codes_df[,"GRPS"])
unique_grps_df   <- as.data.frame(unique_grps)
#Get group feature df
curr_grp_feature_df <- create_grp_feature_df_func(curr_perMonth_df,unique_grps,unique_codes_df)
View(curr_grp_feature_df)
curr_id <- 10000
curr_id <- analysis_IDs[i]
curr_file <- paste0("ID",curr_id,"_perMonthData_Enrolled_inPredictionWindow.xlsx")
curr_id <- 10000
#per month df
curr_perMonth_df <- read.xlsx(paste0(data_dir2,curr_file),sheet = 1)
#Make sure no code has all NAs rows
#NOTE this was also done in previous code when generate in prediction Window
curr_perMonth_df <- curr_perMonth_df[,colSums(is.na(curr_perMonth_df))<nrow(curr_perMonth_df)]
if (ncol(curr_perMonth_df) > 4){ #Make sure there is any code left in the df, if not, this pts should be excluded for final
code_names <- colnames(curr_perMonth_df)[5:ncol(curr_perMonth_df)]
#unique codes
curr_drug_AHFS_codes  <-   get_codes_func(code_names,"DRUG_AHFS")
curr_drug_NDC_codes   <-  get_codes_func(code_names,"DRUG_NDC")
unique_codes_df   <- rbind(curr_drug_AHFS_codes,curr_drug_NDC_codes)
if (is.null(unique_codes_df) == T){ #if does not have any code in this type
curr_grp_feature_df <- curr_perMonth_df[,1:4] #only keep id and month
unique_grps_df <- data.frame("unique_grps" = "NONE") #craete an emtpy unique grp df
}else{
#find grp info for each unique code
unique_codes_df[,"GRPS"] <- find_listofcode_grp_func(unique_codes_df,grp_type,drug_grp_df)
#unique groups
unique_grps <- unique(unique_codes_df[,"GRPS"])
unique_grps_df   <- as.data.frame(unique_grps)
#Get group feature df
curr_grp_feature_df <- create_grp_feature_df_func(curr_perMonth_df,unique_grps,unique_codes_df)
}
#Output group feature df
write.xlsx(curr_grp_feature_df,paste0(outdir,"Feature/","ID",curr_id,"_Month_", grp_type, "_Feature.xlsx"))
#Ouput unique grps
write.xlsx(unique_grps_df,paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx"))
}
View(curr_grp_feature_df)
outdir
curr_file <- paste0("ID",curr_id,"_perMonthData_Enrolled_inPredictionWindow.xlsx")
#per month df
curr_perMonth_df <- read.xlsx(paste0(data_dir2,curr_file),sheet = 1)
#Make sure no code has all NAs rows
#NOTE this was also done in previous code when generate in prediction Window
curr_perMonth_df <- curr_perMonth_df[,colSums(is.na(curr_perMonth_df))<nrow(curr_perMonth_df)]
if (ncol(curr_perMonth_df) > 4){ #Make sure there is any code left in the df, if not, this pts should be excluded for final
code_names <- colnames(curr_perMonth_df)[5:ncol(curr_perMonth_df)]
#unique codes
curr_drug_AHFS_codes  <-   get_codes_func(code_names,"DRUG_AHFS")
curr_drug_NDC_codes   <-  get_codes_func(code_names,"DRUG_NDC")
unique_codes_df   <- rbind(curr_drug_AHFS_codes,curr_drug_NDC_codes)
if (is.null(unique_codes_df) == T){ #if does not have any code in this type
curr_grp_feature_df <- curr_perMonth_df[,1:4] #only keep id and month
unique_grps_df <- data.frame("unique_grps" = "NONE") #craete an emtpy unique grp df
}else{
#find grp info for each unique code
unique_codes_df[,"GRPS"] <- find_listofcode_grp_func(unique_codes_df,grp_type,drug_grp_df)
#unique groups
unique_grps <- unique(unique_codes_df[,"GRPS"])
unique_grps_df   <- as.data.frame(unique_grps)
#Get group feature df
curr_grp_feature_df <- create_grp_feature_df_func(curr_perMonth_df,unique_grps,unique_codes_df)
}
#Output group feature df
write.xlsx(curr_grp_feature_df,paste0(outdir,"Feature/","ID",curr_id,"_Month_", grp_type, "_Feature.xlsx"))
#Ouput unique grps
write.xlsx(unique_grps_df,paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx"))
}
outdir
#Output group feature df
write.xlsx(curr_grp_feature_df,paste0(outdir,"Feature/","ID",curr_id,"_Month_", grp_type, "_Feature.xlsx"))
#Ouput unique grps
write.xlsx(unique_grps_df,paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx"))
#Output group feature df
write.xlsx(curr_grp_feature_df,paste0(outdir,"Feature/","ID",curr_id,"_Month_", grp_type, "_Feature.xlsx"))
curr_grp_feature_df
outdir
outdir   <- paste0(proj_dir, "10F2_VAL2NDFeature_inValidMonth/WithPossibleMonthsHasNoCodes/")
curr_file <- paste0("ID",curr_id,"_perMonthData_Enrolled_inPredictionWindow.xlsx")
#per month df
curr_perMonth_df <- read.xlsx(paste0(data_dir2,curr_file),sheet = 1)
#Make sure no code has all NAs rows
#NOTE this was also done in previous code when generate in prediction Window
curr_perMonth_df <- curr_perMonth_df[,colSums(is.na(curr_perMonth_df))<nrow(curr_perMonth_df)]
if (ncol(curr_perMonth_df) > 4){ #Make sure there is any code left in the df, if not, this pts should be excluded for final
code_names <- colnames(curr_perMonth_df)[5:ncol(curr_perMonth_df)]
#unique codes
curr_drug_AHFS_codes  <-   get_codes_func(code_names,"DRUG_AHFS")
curr_drug_NDC_codes   <-  get_codes_func(code_names,"DRUG_NDC")
unique_codes_df   <- rbind(curr_drug_AHFS_codes,curr_drug_NDC_codes)
if (is.null(unique_codes_df) == T){ #if does not have any code in this type
curr_grp_feature_df <- curr_perMonth_df[,1:4] #only keep id and month
unique_grps_df <- data.frame("unique_grps" = "NONE") #craete an emtpy unique grp df
}else{
#find grp info for each unique code
unique_codes_df[,"GRPS"] <- find_listofcode_grp_func(unique_codes_df,grp_type,drug_grp_df)
#unique groups
unique_grps <- unique(unique_codes_df[,"GRPS"])
unique_grps_df   <- as.data.frame(unique_grps)
#Get group feature df
curr_grp_feature_df <- create_grp_feature_df_func(curr_perMonth_df,unique_grps,unique_codes_df)
}
#Output group feature df
write.xlsx(curr_grp_feature_df,paste0(outdir,"Feature/","ID",curr_id,"_Month_", grp_type, "_Feature.xlsx"))
#Ouput unique grps
write.xlsx(unique_grps_df,paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx"))
}
curr_id <- 100002
curr_id <- 10002
curr_file <- paste0("ID",curr_id,"_perMonthData_Enrolled_inPredictionWindow.xlsx")
#per month df
curr_perMonth_df <- read.xlsx(paste0(data_dir2,curr_file),sheet = 1)
#Make sure no code has all NAs rows
#NOTE this was also done in previous code when generate in prediction Window
curr_perMonth_df <- curr_perMonth_df[,colSums(is.na(curr_perMonth_df))<nrow(curr_perMonth_df)]
if (ncol(curr_perMonth_df) > 4){ #Make sure there is any code left in the df, if not, this pts should be excluded for final
code_names <- colnames(curr_perMonth_df)[5:ncol(curr_perMonth_df)]
#unique codes
curr_drug_AHFS_codes  <-   get_codes_func(code_names,"DRUG_AHFS")
curr_drug_NDC_codes   <-  get_codes_func(code_names,"DRUG_NDC")
unique_codes_df   <- rbind(curr_drug_AHFS_codes,curr_drug_NDC_codes)
if (is.null(unique_codes_df) == T){ #if does not have any code in this type
curr_grp_feature_df <- curr_perMonth_df[,1:4] #only keep id and month
unique_grps_df <- data.frame("unique_grps" = "NONE") #craete an emtpy unique grp df
}else{
#find grp info for each unique code
unique_codes_df[,"GRPS"] <- find_listofcode_grp_func(unique_codes_df,grp_type,drug_grp_df)
#unique groups
unique_grps <- unique(unique_codes_df[,"GRPS"])
unique_grps_df   <- as.data.frame(unique_grps)
#Get group feature df
curr_grp_feature_df <- create_grp_feature_df_func(curr_perMonth_df,unique_grps,unique_codes_df)
}
#Output group feature df
write.xlsx(curr_grp_feature_df,paste0(outdir,"Feature/","ID",curr_id,"_Month_", grp_type, "_Feature.xlsx"))
#Ouput unique grps
write.xlsx(unique_grps_df,paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx"))
}
df <- read.xlsx(unique_grps_df,paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx")
df
df
df <- read.xlsx(unique_grps_df,paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx")
)
df <- read.xlsx(paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx")
)
df <- read.xlsx(paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx"))
View(df)
df <- read.xlsx(paste0(outdir,"Feature/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx"))
curr_id
df <- read.xlsx(paste0(outdir,"Feature/","ID",curr_id,"_Month_",grp_type, "_Feature.xlsx"))
View(df)
drug_grp_df <- read.xlsx(paste0(data_dir1,"Unique_Drug_And_Groups_inALLClaims.xlsx"),sheet = 1)
#reformat
#Drug:
indx1 <- which(drug_grp_df[,"TYPE"] == "DRUG_THERA_CLS_AHFS")
drug_grp_df[indx1,"TYPE"] <- "DRUG_AHFS"  #change type name
#replace space, "(" and "/" by "_"
# drug_grp_df[,"VAL_SECONDARY_group"] <- gsub(" |/|\\(","_",drug_grp_df[,"VAL_SECONDARY_group"])
# drug_grp_df[,"VAL_SECONDARY_group"] <- gsub(")","",drug_grp_df[,"VAL_SECONDARY_group"])
# drug_grp_df[,"VAL_SECONDARY_group"] <- gsub("___","_",drug_grp_df[,"VAL_SECONDARY_group"])
# drug_grp_df[,"VAL_SECONDARY_group"] <- gsub("__","_",drug_grp_df[,"VAL_SECONDARY_group"])
#add prefix
drug_grp_df[,"VAL_SECONDARY_group"] <- paste0("VAL_2ND_",drug_grp_df[,"VAL_SECONDARY_group"])
colnames(drug_grp_df)[which(colnames(drug_grp_df) == "VAL_SECONDARY_group")] <- "VAL_2ND" #change column names
curr_file <- paste0("ID",curr_id,"_perMonthData_Enrolled_inPredictionWindow.xlsx")
#per month df
curr_perMonth_df <- read.xlsx(paste0(data_dir2,curr_file),sheet = 1)
#Make sure no code has all NAs rows
#NOTE this was also done in previous code when generate in prediction Window
curr_perMonth_df <- curr_perMonth_df[,colSums(is.na(curr_perMonth_df))<nrow(curr_perMonth_df)]
if (ncol(curr_perMonth_df) > 4){ #Make sure there is any code left in the df, if not, this pts should be excluded for final
code_names <- colnames(curr_perMonth_df)[5:ncol(curr_perMonth_df)]
#unique codes
curr_drug_AHFS_codes  <-   get_codes_func(code_names,"DRUG_AHFS")
curr_drug_NDC_codes   <-  get_codes_func(code_names,"DRUG_NDC")
unique_codes_df   <- rbind(curr_drug_AHFS_codes,curr_drug_NDC_codes)
if (is.null(unique_codes_df) == T){ #if does not have any code in this type
curr_grp_feature_df <- curr_perMonth_df[,1:4] #only keep id and month
unique_grps_df <- data.frame("unique_grps" = "NONE") #craete an emtpy unique grp df
}else{
#find grp info for each unique code
unique_codes_df[,"GRPS"] <- find_listofcode_grp_func(unique_codes_df,grp_type,drug_grp_df)
#unique groups
unique_grps <- unique(unique_codes_df[,"GRPS"])
unique_grps_df   <- as.data.frame(unique_grps)
#Get group feature df
curr_grp_feature_df <- create_grp_feature_df_func(curr_perMonth_df,unique_grps,unique_codes_df)
}
#Output group feature df
write.xlsx(curr_grp_feature_df,paste0(outdir,"Feature/","ID",curr_id,"_Month_", grp_type, "_Feature.xlsx"))
#Ouput unique grps
write.xlsx(unique_grps_df,paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx"))
}
curr_file <- paste0("ID",curr_id,"_perMonthData_Enrolled_inPredictionWindow.xlsx")
#per month df
curr_perMonth_df <- read.xlsx(paste0(data_dir2,curr_file),sheet = 1)
#Make sure no code has all NAs rows
#NOTE this was also done in previous code when generate in prediction Window
curr_perMonth_df <- curr_perMonth_df[,colSums(is.na(curr_perMonth_df))<nrow(curr_perMonth_df)]
if (ncol(curr_perMonth_df) > 4){ #Make sure there is any code left in the df, if not, this pts should be excluded for final
code_names <- colnames(curr_perMonth_df)[5:ncol(curr_perMonth_df)]
#unique codes
curr_drug_AHFS_codes  <-   get_codes_func(code_names,"DRUG_AHFS")
curr_drug_NDC_codes   <-  get_codes_func(code_names,"DRUG_NDC")
unique_codes_df   <- rbind(curr_drug_AHFS_codes,curr_drug_NDC_codes)
if (is.null(unique_codes_df) == T){ #if does not have any code in this type
curr_grp_feature_df <- curr_perMonth_df[,1:4] #only keep id and month
unique_grps_df <- data.frame("unique_grps" = "NONE") #craete an emtpy unique grp df
}else{
#find grp info for each unique code
unique_codes_df[,"GRPS"] <- find_listofcode_grp_func(unique_codes_df,grp_type,drug_grp_df)
#unique groups
unique_grps <- unique(unique_codes_df[,"GRPS"])
unique_grps_df   <- as.data.frame(unique_grps)
#Get group feature df
curr_grp_feature_df <- create_grp_feature_df_func(curr_perMonth_df,unique_grps,unique_codes_df)
}
#Output group feature df
write.xlsx(curr_grp_feature_df,paste0(outdir,"Feature/","ID",curr_id,"_Month_", grp_type, "_Feature.xlsx"))
#Ouput unique grps
write.xlsx(unique_grps_df,paste0(outdir,"UniqueGrp/","ID",curr_id,"_Month_",grp_type, "_UniqueGrps.xlsx"))
}
df <- read.xlsx(paste0(outdir,"Feature/","ID",curr_id,"_Month_",grp_type, "_Feature.xlsx"))
colnames(df)
source("Recapse_Ultility.R")
#This script get patient level group count for Final Id (All enrolls) in valid month
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "10G_Counts_UniqueGrp_PtsLevel/WithPossibleMonthsHasNoCodes/")
outdir     <- paste0(proj_dir, "10H_Selected_Grps/WithPossibleMonthsHasNoCodes/")
source("Recapse_Ultility.R")
#This script get patient level group count for Final Id (All enrolls) in valid month
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "10G_Counts_UniqueGrp_PtsLevel/WithPossibleMonthsHasNoCodes/")
outdir     <- paste0(proj_dir, "10H_Selected_Grps/WithPossibleMonthsHasNoCodes/")
################################################################################
#Select Final grps for model ready data
#Select grps from:
#1. Count_CCS_Diag_Unique_Grps.xlsx
#2. Count_CCS_proc_Unique_Grps.xlsx
#3. Count_VAL_2ND_Unique_Grps.xlsx
################################################################################
count_df1 <- read.xlsx(paste0(data_dir1,"Count_CCS_Diag_Unique_Grps.xlsx"),sheet = 1)
count_df2 <- read.xlsx(paste0(data_dir1,"Count_CCS_proc_Unique_Grps.xlsx"),sheet = 1)
count_df3 <- read.xlsx(paste0(data_dir1,"Count_VAL_2ND_Unique_Grps.xlsx"),sheet = 1)
#Diag
selected_index1 <- which(count_df1[,"Frac_PtsHasTheGrp_SBCE"] > 0.1 | count_df1[,"Frac_PtsHasTheGrp_nonSBCE"] > 0.15)
Final_selected_grps_df1 <- count_df1[selected_index1,"Code_Grp"] #130
Final_selected_grps_df1
length(Final_selected_grps_df1)
write.xlsx(Final_selected_grps_df1,paste0(outdir,"Selected_CCSDiag_Unique_Grps.xlsx"))
write.xlsx(Final_selected_grps_df1,paste0(outdir,"Selected_CCSDiag_Unique_Grps.xlsx"),overwrite = True)
source("Recapse_Ultility.R")
#This script get patient level group count for Final Id (All enrolls) in valid month
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "10G_Counts_UniqueGrp_PtsLevel/WithPossibleMonthsHasNoCodes/")
outdir     <- paste0(proj_dir, "10H_Selected_Grps/WithPossibleMonthsHasNoCodes/")
################################################################################
#Select Final grps for model ready data
#Select grps from:
#1. Count_CCS_Diag_Unique_Grps.xlsx
#2. Count_CCS_proc_Unique_Grps.xlsx
#3. Count_VAL_2ND_Unique_Grps.xlsx
################################################################################
count_df1 <- read.xlsx(paste0(data_dir1,"Count_CCS_Diag_Unique_Grps.xlsx"),sheet = 1)
count_df2 <- read.xlsx(paste0(data_dir1,"Count_CCS_proc_Unique_Grps.xlsx"),sheet = 1)
count_df3 <- read.xlsx(paste0(data_dir1,"Count_VAL_2ND_Unique_Grps.xlsx"),sheet = 1)
#Diag
selected_index1 <- which(count_df1[,"Frac_PtsHasTheGrp_SBCE"] > 0.1 | count_df1[,"Frac_PtsHasTheGrp_nonSBCE"] > 0.15)
Final_selected_grps_df1 <- count_df1[selected_index1,"Code_Grp"] #130
write.xlsx(Final_selected_grps_df1,paste0(outdir,"Selected_CCSDiag_Unique_Grps.xlsx"))
#Proc
selected_index2 <- which(count_df2[,"Frac_PtsHasTheGrp_SBCE"] > 0.1 | count_df2[,"Frac_PtsHasTheGrp_nonSBCE"] > 0.15)
Final_selected_grps_df2 <- count_df2[selected_index2,"Code_Grp"] #61
length(Final_selected_grps_df2)
Final_selected_grps_df2 <- count_df2[selected_index2,"Code_Grp"] #61
write.xlsx(Final_selected_grps_df2,paste0(outdir,"Selected_CCSProc_Unique_Grps.xlsx"))
#Drug
selected_index3 <- which(count_df3[,"Frac_PtsHasTheGrp_SBCE"] > 0.1 | count_df3[,"Frac_PtsHasTheGrp_nonSBCE"] > 0.15)
Final_selected_grps_df3 <- count_df3[selected_index3,"Code_Grp"] #27
length(Final_selected_grps_df3)
Final_selected_grps_df3 <- count_df3[selected_index3,"Code_Grp"] #62
write.xlsx(Final_selected_grps_df3,paste0(outdir,"Selected_VAL2ndDrug_Unique_Grps.xlsx"))
61+130+62
130+61+27
source("Recapse_Ultility.R")
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir_diag  <- paste0(proj_dir, "10B_CCSDiagFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir_proc  <- paste0(proj_dir, "10C_CCSProcFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir_drug  <- paste0(proj_dir, "10F2_VAL2NDFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir2  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
data_dir3  <- paste0(proj_dir, "10H_Selected_Grps/WithPossibleMonthsHasNoCodes/")
outdir   <- paste0(proj_dir, "11A_ModelReady_GrpFeature/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir2,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
################################################################################
#2.Final model ready grps
################################################################################
modelready_grps_df1 <- read.xlsx(paste0(data_dir3,"Selected_CCSDiag_Unique_Grps.xlsx"),sheet = 1,colNames = F)
modelready_grps_df2 <- read.xlsx(paste0(data_dir3,"Selected_CCSProc_Unique_Grps.xlsx"),sheet = 1,colNames = F)
modelready_grps_df3 <- read.xlsx(paste0(data_dir3,"Selected_VAL2ndDrug_Unique_Grps.xlsx"),sheet = 1,colNames = F)
modelready_Diag_features <- sort(modelready_grps_df1[,1])
modelready_Proc_features <- sort(modelready_grps_df2[,1])
modelready_Drug_features <- sort(modelready_grps_df3[,1])
#All features
modelready_grps_features <- sort(c(modelready_Diag_features,modelready_Proc_features,modelready_Drug_features))
########################################################################################################################
#Use the following code to run in case out of memory when procssing all at one time
########################################################################################################################
ID_processed <- as.numeric(gsub("_Selected_Grp_Features.xlsx|ID","",list.files(outdir)))
if (length(ID_processed) != 0 ){
analysis_IDs <- analysis_IDs[-which(analysis_IDs %in% ID_processed)]
}
print(length(analysis_IDs))
curr_id <- 10000
curr_file1 <- paste0("ID",curr_id,"_Month_CCS_DIAG_Feature.xlsx")
curr_file2 <- paste0("ID",curr_id,"_Month_CCS_PROC_Feature.xlsx")
View(modelready_grps_df1)
################################################################################
#2.Final model ready grps
################################################################################
modelready_grps_df1 <- read.xlsx(paste0(data_dir3,"Selected_CCSDiag_Unique_Grps.xlsx"),sheet = 1,colNames = F)
modelready_grps_df1
################################################################################
#2.Final model ready grps
################################################################################
modelready_grps_df1 <- read.xlsx(paste0(data_dir3,"Selected_CCSDiag_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df1
modelready_grps_df3 <- read.xlsx(paste0(data_dir3,"Selected_VAL2ndDrug_Unique_Grps.xlsx"),sheet = 1,colNames = F)
data_dir3
source("Recapse_Ultility.R")
#This script get patient level group count for Final Id (All enrolls) in valid month
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1  <- paste0(proj_dir, "10G_Counts_UniqueGrp_PtsLevel/WithPossibleMonthsHasNoCodes/")
outdir     <- paste0(proj_dir, "10H_Selected_Grps/WithPossibleMonthsHasNoCodes/")
################################################################################
#Select Final grps for model ready data
#Select grps from:
#1. Count_CCS_Diag_Unique_Grps.xlsx
#2. Count_CCS_proc_Unique_Grps.xlsx
#3. Count_VAL_2ND_Unique_Grps.xlsx
################################################################################
count_df1 <- read.xlsx(paste0(data_dir1,"Count_CCS_Diag_Unique_Grps.xlsx"),sheet = 1)
count_df2 <- read.xlsx(paste0(data_dir1,"Count_CCS_proc_Unique_Grps.xlsx"),sheet = 1)
count_df3 <- read.xlsx(paste0(data_dir1,"Count_VAL_2ND_Unique_Grps.xlsx"),sheet = 1)
#Diag
selected_index1 <- which(count_df1[,"Frac_PtsHasTheGrp_SBCE"] > 0.1 | count_df1[,"Frac_PtsHasTheGrp_nonSBCE"] > 0.15)
Final_selected_grps_df1 <- count_df1[selected_index1,"Code_Grp"] #130
write.xlsx(Final_selected_grps_df1,paste0(outdir,"Selected_CCSDiag_Unique_Grps.xlsx"))
Final_selected_grps_df1
Final_selected_grps_df1 <- data.frame(count_df1[selected_index1,"Code_Grp"]) #130
View(Final_selected_grps_df1)
View(Final_selected_grps_df1)
colnames(Final_selected_grps_df1) <- "Selected_Grps"
write.xlsx(Final_selected_grps_df1,paste0(outdir,"Selected_CCSDiag_Unique_Grps.xlsx"))
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/10H_SelectGroups.R', echo=TRUE)
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir_diag  <- paste0(proj_dir, "10B_CCSDiagFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir_proc  <- paste0(proj_dir, "10C_CCSProcFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir_drug  <- paste0(proj_dir, "10F2_VAL2NDFeature_inValidMonth/WithPossibleMonthsHasNoCodes/Feature/")
data_dir2  <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
data_dir3  <- paste0(proj_dir, "10H_Selected_Grps/WithPossibleMonthsHasNoCodes/")
outdir   <- paste0(proj_dir, "11A_ModelReady_GrpFeature/WithPossibleMonthsHasNoCodes/")
################################################################################
#1.Final IDs
################################################################################
Final_ID_df <- read.xlsx(paste0(data_dir2,"9_Final_ID1_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
analysis_IDs <- Final_ID_df[,"study_id"]
################################################################################
#2.Final model ready grps
################################################################################
modelready_grps_df1 <- read.xlsx(paste0(data_dir3,"Selected_CCSDiag_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df2 <- read.xlsx(paste0(data_dir3,"Selected_CCSProc_Unique_Grps.xlsx"),sheet = 1,colNames = F)
modelready_grps_df3 <- read.xlsx(paste0(data_dir3,"Selected_VAL2ndDrug_Unique_Grps.xlsx"),sheet = 1,colNames = F)
modelready_Diag_features <- sort(modelready_grps_df1[,1])
modelready_Proc_features <- sort(modelready_grps_df2[,1])
modelready_Drug_features <- sort(modelready_grps_df3[,1])
#All features
modelready_grps_features <- sort(c(modelready_Diag_features,modelready_Proc_features,modelready_Drug_features))
modelready_Diag_features
#All features
modelready_grps_features <- sort(c(modelready_Diag_features,modelready_Proc_features,modelready_Drug_features))
length(modelready_grps_features)
130+61+62
modelready_grps_features
modelready_grps_df1[,1]
modelready_grps_df1 <- read.xlsx(paste0(data_dir3,"Selected_CCSDiag_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df2 <- read.xlsx(paste0(data_dir3,"Selected_CCSProc_Unique_Grps.xlsx"),sheet = 1)
modelready_grps_df3 <- read.xlsx(paste0(data_dir3,"Selected_VAL2ndDrug_Unique_Grps.xlsx"),sheet = 1)
modelready_Diag_features <- sort(modelready_grps_df1[,1])
modelready_Proc_features <- sort(modelready_grps_df2[,1])
modelready_Drug_features <- sort(modelready_grps_df3[,1])
#All features
modelready_grps_features <- sort(c(modelready_Diag_features,modelready_Proc_features,modelready_Drug_features))
modelready_grps_features
759/3
