}else {
curr_acutal_SBCEMonth <- "NONE"
}
pt_pred_df[i , "Acutal_SBCEMonth"] <- curr_acutal_SBCEMonth
#sort by month
curr_pred_df <- curr_pred_df[order(curr_pred_df$month_start),]
for (j in 1:length(thres)){
curr_thres <- thres[j]
#Get col index of threshold in sample pred df
curr_col_idxes_inpreddf <- which(grepl(paste0("PredictedClass_Thres_",curr_thres),colnames(curr_pred_df)))
curr_all_idxes <- which(curr_pred_df[,curr_col_idxes_inpreddf] == 1) #all index predicted higher than threhold
if (length(curr_all_idxes) > 0 ){ #if there is any predicted month ?= threhold
curr_pred_month <- curr_pred_df[curr_all_idxes[1],"month_start"] #1st index predicted higher or equal to the threhold
curr_pred_class <- 1
}else {
curr_pred_month <- "NONE"
curr_pred_class <- 0
}
#get col idex of threhold in patient pred df
curr_col_idxes_inptdf1 <- which(grepl(paste0("PredictedSBCEMonth_Thres_",curr_thres),colnames(pt_pred_df)))
curr_col_idxes_inptdf2 <- which(grepl(paste0("PredictedClass_Thres_",curr_thres),colnames(pt_pred_df)))
pt_pred_df[i,curr_col_idxes_inptdf1] <- curr_pred_month
pt_pred_df[i,curr_col_idxes_inptdf2] <- curr_pred_class
}
}
return(pt_pred_df)
}
#There is no AUC in this function
compute_binaryclass_perf_func2_PTLEVEL <- function(prediction_df,thresholdClass_col){
predicted_class <- prediction_df[,thresholdClass_col]
actual_label    <- prediction_df[,"SBCE"]
#Match label factor levels
matched_res   <- match_label_levels_func(predicted_class,actual_label)
final_pred    <- matched_res[[1]]
final_actual  <- matched_res[[2]]
cm<-confusionMatrix(final_pred, final_actual, positive = "1", dnn = c("Prediction", "TrueLabels"),mode = "everything")
#Manually get TN, FP, TP, FN
cm_tb <- cm$table
TN <- cm_tb[2,2]
FP <- cm_tb[1,2]
TP <- cm_tb[1,1]
FN <- cm_tb[2,1]
#class 1
performance_table <- cm$byClass[c("Sensitivity","Specificity",
"Pos Pred Value","Neg Pred Value",
"Precision", "Recall","F1")]
performance_table["Accuracy"] <- cm$overall[1]
performance_table["TNR_Specificity"] <- TN/(TN + FP) #True negative rate = specificity
performance_table["FPR"] <- FP/(TN + FP) #False postive rate
performance_table["TPR_Sensitivity_Recall"] <- TP/(TP + FN) #True postive rate = sensitivity = recall
performance_table["FNR"] <- FN/(TP + FN) #False negative rate
performance_table <- round(performance_table,2)
return(performance_table)
}
get_perf_table_PTLEVEL_func<- function(analysis_df){
#Get SBCE or nonSBCE numbers
n_nonSBCE           <- length(which(analysis_df[,"SBCE"]==0))
n_SBCE              <- length(which(analysis_df[,"SBCE"]==1))
#Get performance for each threshold
thres <- c("01","02","03","04","05","06","07","08")
thres_class_cols <- paste0("PredictedClass_Thres_",thres)
final_perf_df<- as.data.frame(matrix(NA, nrow = length(thres_class_cols),ncol = 11))
colnames(final_perf_df) <- c("Threshold","N_NonRecurrent","N_Recurrent",
"Accuracy","Recall/Sensitivity/TPR",
"Specificity/TNR",
"Precision/PPV","F1",
"NPV","FPR","FNR")
for (i in 1:length(thres_class_cols)){
final_perf_df[i,"Threshold"]          <- thres_class_cols[i]
final_perf_df[i,"N_NonRecurrent"]     <- n_nonSBCE
final_perf_df[i,"N_Recurrent"]        <- n_SBCE
curr_perf <- compute_binaryclass_perf_func2_PTLEVEL(analysis_df,thres_class_cols[i])
final_perf_df[i,"Accuracy"]               <- curr_perf["Accuracy"]
final_perf_df[i,"Recall/Sensitivity/TPR"] <- curr_perf["Recall"]
final_perf_df[i,"Specificity/TNR"]        <- curr_perf["Specificity"]
final_perf_df[i,"Precision/PPV"]          <- curr_perf["Precision"]
final_perf_df[i,"F1"]                     <- curr_perf["F1"]
final_perf_df[i,"NPV"]                    <- curr_perf["Neg Pred Value"]
final_perf_df[i,"FPR"]                    <- curr_perf["FPR"]
final_perf_df[i,"FNR"]                    <- curr_perf["FNR"]
}
return(final_perf_df)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1/")
data_dir2        <- paste0(proj_dir, "8_Characteristics2/Patient_Level/")
outdir           <- paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1/")
########################################################################################################
#1.Load predictions
########################################################################################################
#Load prediction data
test_prediction_df <- read.csv(paste0(data_dir1,"16_Prediction_Table_posweight0.5.csv"))
#Get predicted Class by different threshold
ths <- seq(0.1,0.8,0.1)
test_prediction_df <- add_predicted_class_byThreshold(test_prediction_df,ths)
#Add study_id and month start
original_IDs <- strsplit(as.character(test_prediction_df$sample_id),split = "@")
test_prediction_df$study_id    <- gsub("ID","",sapply(original_IDs, "[[", 1))
test_prediction_df$month_start <- sapply(original_IDs, "[[", 2)
################################################################################
#3. Load patient level char to get SBCE or not
################################################################################
pts_level_char_df <- read.xlsx(paste0(data_dir2,"/8_PatientLevel_char_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
########################################################################################################
#5. Patient-level performance for all samples
#'@NOTE: These four pts ID: "14813" "24100" "31815" "36077" has death as 2nd event, but the prediction per-month data end a couple month before death date,
#'# so for these pts, there is no month labeled as SBCE
#'Might need to filter out these pts in predictionWinwdow.R file, need to make sure has data within 3 month before/after SBCE
########################################################################################################
#For each patient, get the first month that the prediction is great or equal to the threhold
#if there is a first month that prediction is great/equal to the threhold, the prediction for this patient = SBCE
# and the first month is when SBCE occurs
ptlevel_pred_df_alltest <- get_pt_level_pred_df(test_prediction_df,pts_level_char_df)
ptlevel_perf_tb_alltest <- get_perf_table_PTLEVEL_func(ptlevel_pred_df_alltest)
analysis_df <- ptlevel_pred_df_SBCE
#For SBCE patient, Compute the difference between predicted SBCE month and actual SBCE month
ptlevel_pred_df_SBCE <- ptlevel_pred_df_alltest[which(ptlevel_pred_df_alltest[,"SBCE"]==1), ]
analysis_df <- ptlevel_pred_df_SBCE
thres <- c("01","02","03","04","05","06","07","08")
pt_diff_df<- as.data.frame(matrix(NA, nrow = nrow(analysis_df),ncol = 9))
colnames(pt_diff_df) <- c("study_id","DiffinMonth_Thres_01","DiffinMonth_Thres_02",
"DiffinMonth_Thres_03", "DiffinMonth_Thres_04",
"DiffinMonth_Thres_05", "DiffinMonth_Thres_06",
"DiffinMonth_Thres_07","DiffinMonth_Thres_08")
i <- 1
curr_id <- analysis_df[i,"study_id"]
curr_acutal_month <- ymd(analysis_df[i,"Acutal_SBCEMonth"])
for (j in 1:length(thres)){
curr_th <- thres[j]
curr_th_col <- paste0("PredictedSBCEMonth_Thres_", curr_th)
curr_pred_month <- analysis_df[i,curr_th_col]
if (curr_pred_month == "NONE"){
curr_diff <- -Inf
}else{
curr_diff <- as.numeric(difftime(ymd(curr_pred_month),curr_acutal_month, units = "days"))/30
}
curr_th_diff_col <- paste0("DiffinMonth_Thres_", curr_th)
pt_diff_df[i,curr_th_diff_col] <- curr_diff
}
View(pt_diff_df)
for (i in 1:nrow(analysis_df)){
curr_id <- analysis_df[i,"study_id"]
curr_acutal_month <- ymd(analysis_df[i,"Acutal_SBCEMonth"])
pt_diff_df[i,"study_id"] <- curr_id
for (j in 1:length(thres)){
curr_th <- thres[j]
curr_th_col <- paste0("PredictedSBCEMonth_Thres_", curr_th)
curr_pred_month <- analysis_df[i,curr_th_col]
if (curr_pred_month == "NONE"){
curr_diff <- -Inf
}else{
curr_diff <- as.numeric(difftime(ymd(curr_pred_month),curr_acutal_month, units = "days"))/30
}
curr_th_diff_col <- paste0("DiffinMonth_Thres_", curr_th)
pt_diff_df[i,curr_th_diff_col] <- curr_diff
}
}
View(pt_diff_df)
compute_month_diff <- function(analysis_df){
#analysis_df <- ptlevel_pred_df_SBCE
thres <- c("01","02","03","04","05","06","07","08")
pt_diff_df<- as.data.frame(matrix(NA, nrow = nrow(analysis_df),ncol = 9))
colnames(pt_diff_df) <- c("study_id","DiffinMonth_Thres_01","DiffinMonth_Thres_02",
"DiffinMonth_Thres_03", "DiffinMonth_Thres_04",
"DiffinMonth_Thres_05", "DiffinMonth_Thres_06",
"DiffinMonth_Thres_07","DiffinMonth_Thres_08")
for (i in 1:nrow(analysis_df)){
curr_id <- analysis_df[i,"study_id"]
curr_acutal_month <- ymd(analysis_df[i,"Acutal_SBCEMonth"])
pt_diff_df[i,"study_id"] <- curr_id
for (j in 1:length(thres)){
curr_th <- thres[j]
curr_th_col <- paste0("PredictedSBCEMonth_Thres_", curr_th)
curr_pred_month <- analysis_df[i,curr_th_col]
if (curr_pred_month == "NONE"){
curr_diff <- Inf
}else{
curr_diff <- as.numeric(difftime(ymd(curr_pred_month),curr_acutal_month, units = "days"))/30
}
curr_th_diff_col <- paste0("DiffinMonth_Thres_", curr_th)
pt_diff_df[i,curr_th_diff_col] <- curr_diff
}
}
return(pt_diff_df)
}
ptlevel_monthdiff_df <- compute_month_diff(ptlevel_pred_df_SBCE)
analysis_df <- ptlevel_monthdiff_df
View(analysis_df)
#get abs diff first
abs(analysis_df[,2:])
#get abs diff first
abs(analysis_df[,2:ncol(analysis_df)])
#get abs diff first
analysis_df <- abs(analysis_df[,2:ncol(analysis_df)])
View(analysis_df)
#get abs diff first
analysis_df[,2:ncol(analysis_df)] <- abs(analysis_df[,2:ncol(analysis_df)])
analysis_df <- ptlevel_monthdiff_df
#get abs diff first
analysis_df[,2:ncol(analysis_df)] <- abs(analysis_df[,2:ncol(analysis_df)])
View(analysis_df)
pt_diff_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(pt_diff_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
diff_stat_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(diff_stat_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
i <- 1
curr_th <- thres[i]
colnames(analysis_df)
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
analysis_df[,curr_th_col]
mean(analysis_df[,curr_th_col])
curr_col_vals <- analysis_df[,curr_th_col]
curr_indxes_notINF <- which(curr_col_vals != Inf)
length(curr_indxes_notINF)
curr_num_pts <- length(curr_indxes_notINF)
curr_col_vals_excINF <- curr_col_vals[curr_indxes_notINF]
curr_col_vals_excINF
curr_indxes_INF <- which(curr_col_vals == Inf)
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
curr_col_vals_excINF
curr_num_pts <- length(curr_col_vals_excINF)
curr_num_pts
mean(curr_col_vals_excINF)
colnames(diff_stat_df)
for (i in 1:length(thres)){
curr_th <- thres[i]
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
curr_col_vals <- analysis_df[,curr_th_col]
#Get indxes of diff is inf
curr_indxes_INF <- which(curr_col_vals == Inf)
#exclude INF
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
diff_stat_df[i,"Num_PTs_HasPredictedSBCEMonth"]   <- length(curr_col_vals_excINF)
diff_stat_df[i,"Mean_Diff_InMonth"]               <- mean(curr_col_vals_excINF)
diff_stat_df[i,"Std_Diff_InMonth"]                <- std(curr_col_vals_excINF)
diff_stat_df[i,"Median_Diff_InMonth"]             <- median(curr_col_vals_excINF)
diff_stat_df[i,"Min_Diff_InMonth"]                <- min(curr_col_vals_excINF)
diff_stat_df[i,"Max_Diff_InMonth"]                <- max(curr_col_vals_excINF)
}
thres <- c("01","02","03","04","05","06","07","08")
diff_stat_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(diff_stat_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
for (i in 1:length(thres)){
curr_th <- thres[i]
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
curr_col_vals <- analysis_df[,curr_th_col]
#Get indxes of diff is inf
curr_indxes_INF <- which(curr_col_vals == Inf)
#exclude INF
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
diff_stat_df[i,"Threshold"]                       <- curr_th
diff_stat_df[i,"Num_PTs_HasPredictedSBCEMonth"]   <- length(curr_col_vals_excINF)
diff_stat_df[i,"Mean_Diff_InMonth"]               <- mean(curr_col_vals_excINF)
diff_stat_df[i,"Std_Diff_InMonth"]                <- sd(curr_col_vals_excINF)
diff_stat_df[i,"Median_Diff_InMonth"]             <- median(curr_col_vals_excINF)
diff_stat_df[i,"Min_Diff_InMonth"]                <- min(curr_col_vals_excINF)
diff_stat_df[i,"Max_Diff_InMonth"]                <- max(curr_col_vals_excINF)
}
View(diff_stat_df)
131/24
View(pt_diff_df)
#Report stats of month diff
monthdiff_stattb  <- get_stats_month_diff(ptlevel_monthdiff_df)
get_stats_month_diff <- function(analysis_df){
#analysis_df <- ptlevel_monthdiff_df
#get abs diff first
analysis_df[,2:ncol(analysis_df)] <- abs(analysis_df[,2:ncol(analysis_df)])
thres <- c("01","02","03","04","05","06","07","08")
diff_stat_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(diff_stat_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
for (i in 1:length(thres)){
curr_th <- thres[i]
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
curr_col_vals <- analysis_df[,curr_th_col]
#Get indxes of diff is inf
curr_indxes_INF <- which(curr_col_vals == Inf)
#exclude INF
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
diff_stat_df[i,"Threshold"]                       <- curr_th
diff_stat_df[i,"Num_PTs_HasPredictedSBCEMonth"]   <- length(curr_col_vals_excINF)
diff_stat_df[i,"Mean_Diff_InMonth"]               <- mean(curr_col_vals_excINF)
diff_stat_df[i,"Std_Diff_InMonth"]                <- sd(curr_col_vals_excINF)
diff_stat_df[i,"Median_Diff_InMonth"]             <- median(curr_col_vals_excINF)
diff_stat_df[i,"Min_Diff_InMonth"]                <- min(curr_col_vals_excINF)
diff_stat_df[i,"Max_Diff_InMonth"]                <- max(curr_col_vals_excINF)
}
}
#Report stats of month diff
monthdiff_stattb  <- get_stats_month_diff(ptlevel_monthdiff_df)
#Report stats of month diff
monthdiff_stattb  <- get_stats_month_diff(ptlevel_monthdiff_df)
ptlevel_monthdiff_df
#Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
get_stats_month_diff <- function(analysis_df){
#analysis_df <- ptlevel_monthdiff_df
#get abs diff first
analysis_df[,2:ncol(analysis_df)] <- abs(analysis_df[,2:ncol(analysis_df)])
thres <- c("01","02","03","04","05","06","07","08")
diff_stat_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(diff_stat_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
for (i in 1:length(thres)){
curr_th <- thres[i]
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
curr_col_vals <- analysis_df[,curr_th_col]
#Get indxes of diff is inf
curr_indxes_INF <- which(curr_col_vals == Inf)
#exclude INF
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
diff_stat_df[i,"Threshold"]                       <- curr_th
diff_stat_df[i,"Num_PTs_HasPredictedSBCEMonth"]   <- length(curr_col_vals_excINF)
diff_stat_df[i,"Mean_Diff_InMonth"]               <- mean(curr_col_vals_excINF)
diff_stat_df[i,"Std_Diff_InMonth"]                <- sd(curr_col_vals_excINF)
diff_stat_df[i,"Median_Diff_InMonth"]             <- median(curr_col_vals_excINF)
diff_stat_df[i,"Min_Diff_InMonth"]                <- min(curr_col_vals_excINF)
diff_stat_df[i,"Max_Diff_InMonth"]                <- max(curr_col_vals_excINF)
}
return(diff_stat_df)
}
#Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
#Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
get_stats_month_diff <- function(analysis_df){
#analysis_df <- ptlevel_monthdiff_df
#get abs diff first
analysis_df[,2:ncol(analysis_df)] <- abs(analysis_df[,2:ncol(analysis_df)])
thres <- c("01","02","03","04","05","06","07","08")
diff_stat_df<- as.data.frame(matrix(NA, nrow = length(thres),ncol = 7))
colnames(diff_stat_df) <- c("Threshold","Num_PTs_HasPredictedSBCEMonth","Mean_Diff_InMonth",
"Std_Diff_InMonth", "Median_Diff_InMonth",
"Min_Diff_InMonth", "Max_Diff_InMonth")
for (i in 1:length(thres)){
curr_th <- thres[i]
curr_th_col <- paste0("DiffinMonth_Thres_",curr_th)
curr_col_vals <- analysis_df[,curr_th_col]
#Get indxes of diff is inf
curr_indxes_INF <- which(curr_col_vals == Inf)
#exclude INF
curr_col_vals_excINF <- curr_col_vals[-curr_indxes_INF]
diff_stat_df[i,"Threshold"]                       <- curr_th
diff_stat_df[i,"Num_PTs_HasPredictedSBCEMonth"]   <- length(curr_col_vals_excINF)
diff_stat_df[i,"Mean_Diff_InMonth"]               <- mean(curr_col_vals_excINF)
diff_stat_df[i,"Std_Diff_InMonth"]                <- sd(curr_col_vals_excINF)
diff_stat_df[i,"Median_Diff_InMonth"]             <- median(curr_col_vals_excINF)
diff_stat_df[i,"Min_Diff_InMonth"]                <- min(curr_col_vals_excINF)
diff_stat_df[i,"Max_Diff_InMonth"]                <- max(curr_col_vals_excINF)
}
return(diff_stat_df)
}
#Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
View(monthdiff_stats)
View(ptlevel_perf_tb_alltest)
View(ptlevel_pred_df_SBCE)
View(monthdiff_stats)
View(ptlevel_monthdiff_df)
View(ptlevel_monthdiff_df)
View(pts_level_char_df)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
#2.2 Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
#2.1 compute the difference between predicted SBCE month and actual SBCE month
ptlevel_monthdiff_df <- compute_month_diff(ptlevel_pred_df_SBCE)
ptlevel_perf_tb_alltest
ptlevel_pred_df_SBCE
#2.For SBCE patient,
ptlevel_pred_df_SBCE <- ptlevel_pred_df_alltest[which(ptlevel_pred_df_alltest[,"SBCE"]==1), ]
#2.1 compute the difference between predicted SBCE month and actual SBCE month
ptlevel_monthdiff_df <- compute_month_diff(ptlevel_pred_df_SBCE)
#2.2 Report stats of month diff
monthdiff_stats  <- get_stats_month_diff(ptlevel_monthdiff_df)
write.csv(monthdiff_stats,paste0(outdir,"Predicted_Monthdiff_stats",".csv"),row.names = T)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16B_Compute_Perf.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Code/onHPC/16C_PlotPredictions.R', echo=TRUE)
length(test_ID)
df <- read.csv("/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/16_Performance_WithSurgPrimSite_V1/DownSampled_TrainInfo/Model_Data_WithDSFlag.csv")
View(df)
nrow(df)
966866 + 32251+239885+8847
which(df$DownSampled_Train==1)
length(which(df$DownSampled_Train==1))
source("Recapse_Ultility.R")
compute_mean_sd_func <- function(data_col,round_digit){
mean_val <- round(mean(data_col),round_digit)
sd_val <-  round(sd(data_col),round_digit)
comb_val <- paste0(mean_val," \u00b1 ",sd_val)
return(comb_val)
}
compute_n_perc_func <- function(data_col,round_digit){
# data_col <- curr_values
total_n <- length(data_col)
count_tb <- table(data_col)
count_tb_perc <- round(count_tb/total_n*100,round_digit)
count_cato_names <- names(count_tb)
count_final <-""
count_final <- paste0(count_cato_names,": ", count_tb, " (",count_tb_perc,")", collapse = "\n")
count_final <- paste0(count_final,"\n Total(NA excluded):",total_n)
return(count_final)
}
compute_median_p25andp75_func <- function(data_col,round_digit){
med_val <- round(median(data_col),round_digit)
quant_res <- quantile(data_col,c(0.25,0.75))
p25 <- round(quant_res[1],round_digit)
p75 <- round(quant_res[2],round_digit)
comb_val <- paste0(med_val," [",p25,"-",p75,"]")
return(comb_val)
}
compute_stats_func <- function(input_df,cohort_name,ordered_parameters,n_perc_variables_list){
Final_table <- as.data.frame(matrix(NA, nrow = length(ordered_parameters), ncol = 3))
colnames(Final_table) <- c("Var","Stats","Missingness")
Final_table$Var <- ordered_parameters
for (i in 1:length(ordered_parameters)){
curr_f <- ordered_parameters[i]
#get index column of current feature
curr_colindex <- which(colnames(input_df) == curr_f)
if (length(curr_colindex) == 0){ #if feature is not in curret data input
Final_table[i,2] <- NA
}else{
#Get current values
curr_values <- input_df[,curr_f]
#report and remove NAs
na_indexes <- which(is.na(curr_values) == T)
n_NA <-  length(na_indexes)
prec_NA <- round((n_NA/length(curr_values)*100),2)
Final_table[i,3] <- paste0(n_NA," (",prec_NA,"%)")
if(n_NA > 0){
curr_values <- curr_values[-na_indexes]
}
if (curr_f %in% n_perc_variables_list){ #compte n perc
Final_table[i,2] <- compute_n_perc_func(curr_values,2)
}else{
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}
}
}
colnames(Final_table) <- paste0(cohort_name,"_",colnames(Final_table))
return(Final_table)
}
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir1        <- paste0(proj_dir, "9_FinalIDs_And_UpdatedPtsChar/")
outdir           <- paste0(proj_dir, "17_Discrip_Statistics/")
################################################################################
#1. Load pts level char for final IDs
################################################################################
Final_PTs_Char_df <- read.xlsx(paste0(data_dir1,"/9_PtsCharForFinalID_WithPossibleMonthsHasNoCodes.xlsx"),sheet = 1)
final_Ids <- Final_PTs_Char_df$study_id
#Recode Type 2 event:
#1. As long as the string has "1Recur", it counted as "first primary recurrence", no matter if it has same date with others
recode_idxes1 <- which(grepl("1Recur",Final_PTs_Char_df[,"Type_2nd_Event"]) == T)
Final_PTs_Char_df[recode_idxes1,"Type_2nd_Event"] <- "1Recur"
################################################################################
#Get SBCE and non-SBCE pts char df
################################################################################
SBCE_PTs_Char_df   <- Final_PTs_Char_df[which(Final_PTs_Char_df[,"SBCE"] == 1),]
noSBCE_PTs_Char_df <- Final_PTs_Char_df[which(Final_PTs_Char_df[,"SBCE"] == 0),]
################################################################################
#Report number of patient and SBCE status in final model data
################################################################################
df <- read.csv(paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1/DownSampled_TrainInfo/Model_Data_WithDSFlag.csv"), stringsAsFactors = F)
################################################################################
#Report number of patient and SBCE status in final model data
################################################################################
final_modelIDs_df <- read.csv(paste0(proj_dir, "16_Performance_WithSurgPrimSite_V1/DownSampled_TrainInfo/Model_Data_WithDSFlag.csv"), stringsAsFactors = F)
DS_ModelIDs_df <-  final_modelIDs_df[which(final_modelIDs_df$DownSampled_Train==1),]
which(DS_ModelIDs_df$study_id %in% SBCE_PTs_Char_df$study_id)
DS_ModelIDs_df$study_id
SBCE_PTs_Char_df$study_id
which(DS_ModelIDs_df$study_id %in% paste0("ID",SBCE_PTs_Char_df$study_id))
n_SBCE_inDSTrain <- which(DS_ModelIDs_df$study_id %in% paste0("ID",SBCE_PTs_Char_df$study_id))
length(n_SBCE_inDSTrain)
DS_ModelIDs_df_SBCE <- DS_ModelIDs_df[which(DS_ModelIDs_df$study_id %in% paste0("ID",SBCE_PTs_Char_df$study_id)),]
DS_ModelIDs_df_SBCE
length(unique(DS_ModelIDs_df_SBCE$study_id))
DS_ModelIDs_df_nonSBCE <- DS_ModelIDs_df[which(DS_ModelIDs_df$study_id %in% paste0("ID",noSBCE_PTs_Char_df$study_id)),]
n_nonSBCE_inDSTrain <- length(unique(DS_ModelIDs_df_nonSBCE$study_id))
length(n_nonSBCE_inDSTrain)
View(DS_ModelIDs_df_nonSBCE)
DS_ModelIDs_df_nonSBCE <- DS_ModelIDs_df[which(DS_ModelIDs_df$study_id %in% paste0("ID",noSBCE_PTs_Char_df$study_id)),]
n_nonSBCE_inDSTrain <- length(unique(DS_ModelIDs_df_nonSBCE$study_id))
length(n_nonSBCE_inDSTrain)
n_nonSBCE_inDSTrain
n_nonSBCE_inDSTrain
length(unique(DS_ModelIDs_df_SBCE$study_id))
length(unique(DS_ModelIDs_df_nonSBCE$study_id))
11008 + 3362
